<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>使用React+Three.js 封装一个三维地球</title>
      <link href="/2017/09/23/%E4%BD%BF%E7%94%A8React+Three.js%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%89%E7%BB%B4%E5%9C%B0%E7%90%83/"/>
      <url>/2017/09/23/%E4%BD%BF%E7%94%A8React+Three.js%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%89%E7%BB%B4%E5%9C%B0%E7%90%83/</url>
      
        <content type="html"><![CDATA[<p>良久没有写过博客了，最近忙的焦头烂额，忽略了博客，罪过罪过。今天补充一篇，前一段时间研究过的技术，使用React+Three.js 封装一个三维地球，支持鼠标的交互行为。其实也实现了对有坐标的json数据展示在地球上的功能，以后会有补充。</p><p><a href="https://github.com/zrysmt/react-threejs-app" target="_blank" rel="noopener">github仓库地址</a>:</p><blockquote><p><a href="https://github.com/zrysmt/react-threejs-app" target="_blank" rel="noopener">https://github.com/zrysmt/react-threejs-app</a></p></blockquote><p>整体做完之后的效果图：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/react%2Bthreejs/1.jpg" alt=""><br>废话少说，直接上环境</p><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>使用facebook给出的脚手架工具<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">create-react-app</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app react-threejs-app</span><br><span class="line"><span class="built_in">cd</span> react-threejs-app/</span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></p><p>浏览器会自动打开<code>localhost:3000</code>。</p><h2 id="2-背景知识"><a href="#2-背景知识" class="headerlink" title="2.背景知识"></a>2.背景知识</h2><p>Three.js简单来说就是封装了WebGL一些易用的API接口，我们知道只使用WebGL比较低效。具体的关于WebGL的技术给出两篇博客的入口,关于Three.js可以参考文章最后给出的参考阅读部分。</p><ul><li><a href="https://zrysmt.github.io/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B1-%E7%AE%80%E4%BB%8B/">WebGL基础简明教程1-简介</a></li><li><a href="https://zrysmt.github.io/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">WebGL基础简明教程2-基础知识</a></li></ul><p>如果不是很了解WebGL技术也没有关系，不妨现在先看看Three.js创建模型的整体过程。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/react%2Bthreejs/2.png" alt=""></p><p>安装需要的库,<code>three</code>是Three.js的库，<code>three-orbitcontrols</code>用来支持鼠标的交互行为的库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i three three-orbitcontrols --save</span><br></pre></td></tr></table></figure></p><h2 id="3-一步一个脚印"><a href="#3-一步一个脚印" class="headerlink" title="3.一步一个脚印"></a>3.一步一个脚印</h2><h3 id="3-1-准备一张高清的世界地图"><a href="#3-1-准备一张高清的世界地图" class="headerlink" title="3.1 准备一张高清的世界地图"></a>3.1 准备一张高清的世界地图</h3><p>这里在github仓库中已经给出。</p><h3 id="3-2-定义一个组件ThreeMap"><a href="#3-2-定义一个组件ThreeMap" class="headerlink" title="3.2 定义一个组件ThreeMap"></a>3.2 定义一个组件<code>ThreeMap</code></h3><p>在<code>ThreeMap.js</code>定义组件<code>ThreeMap</code>，并且创建改组件的样式<code>ThreeMap.css</code>。css定义三维地球的容器的宽度和高度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#WebGL-output</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">700px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并且该组件在<code>App.js</code>引用。</p><h3 id="3-3-引入库和样式"><a href="#3-3-引入库和样式" class="headerlink" title="3.3 引入库和样式"></a>3.3 引入库和样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./ThreeMap.css'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> THREE <span class="keyword">from</span> <span class="string">'three'</span>;</span><br><span class="line"><span class="keyword">import</span> Orbitcontrols <span class="keyword">from</span> <span class="string">'three-orbitcontrols'</span>;</span><br><span class="line"><span class="keyword">import</span> Stats <span class="keyword">from</span> <span class="string">'./common/threejslibs/stats.min.js'</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-初始化方法入口和要渲染的虚拟DOM"><a href="#3-4-初始化方法入口和要渲染的虚拟DOM" class="headerlink" title="3.4 初始化方法入口和要渲染的虚拟DOM"></a>3.4 初始化方法入口和要渲染的虚拟DOM</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line"><span class="keyword">this</span>.initThree();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要渲染的虚拟DOM设定好<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div id=<span class="string">'WebGL-output'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4-initThree方法"><a href="#3-4-initThree方法" class="headerlink" title="3.4 initThree方法"></a>3.4 initThree方法</h3><ul><li>创建场景</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scene;</span><br><span class="line">scene = <span class="keyword">new</span> THREE.Scene();</span><br></pre></td></tr></table></figure><ul><li>创建Group</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> group;</span><br><span class="line">group = <span class="keyword">new</span> THREE.Group();</span><br><span class="line">scene.add( group );</span><br></pre></td></tr></table></figure><ul><li>创建相机</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">60</span>, width / height, <span class="number">1</span>, <span class="number">2000</span> );</span><br><span class="line">camera.position.x = <span class="number">-10</span>;</span><br><span class="line">camera.position.y = <span class="number">15</span>;</span><br><span class="line">camera.position.z = <span class="number">500</span>;</span><br><span class="line">camera.lookAt( scene.position );</span><br></pre></td></tr></table></figure><ul><li>相机作为<code>Orbitcontrols</code>的参数，支持鼠标交互</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> orbitControls = <span class="keyword">new</span> Orbitcontrols(camera);</span><br><span class="line">orbitControls.autoRotate = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>添加光源:环境光和点光源</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ambi = <span class="keyword">new</span> THREE.AmbientLight(<span class="number">0x686868</span>); <span class="comment">//环境光</span></span><br><span class="line">scene.add(ambi);</span><br><span class="line"><span class="keyword">let</span> spotLight = <span class="keyword">new</span> THREE.DirectionalLight(<span class="number">0xffffff</span>);  <span class="comment">//点光源</span></span><br><span class="line">spotLight.position.set(<span class="number">550</span>, <span class="number">100</span>, <span class="number">550</span>);  </span><br><span class="line">spotLight.intensity = <span class="number">0.6</span>;</span><br><span class="line">scene.add(spotLight);</span><br></pre></td></tr></table></figure><ul><li>创建模型和材质</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> loader = <span class="keyword">new</span> THREE.TextureLoader();</span><br><span class="line"><span class="keyword">let</span> planetTexture = <span class="built_in">require</span>(<span class="string">"./assets/imgs/planets/Earth.png"</span>);</span><br><span class="line"></span><br><span class="line">loader.load( planetTexture, <span class="function"><span class="keyword">function</span> (<span class="params"> texture </span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> THREE.SphereGeometry( <span class="number">200</span>, <span class="number">20</span>, <span class="number">20</span> );</span><br><span class="line"><span class="keyword">let</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial( &#123; <span class="attr">map</span>: texture, <span class="attr">overdraw</span>: <span class="number">0.5</span> &#125; );</span><br><span class="line"><span class="keyword">let</span> mesh = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span><br><span class="line">group.add( mesh );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><ul><li>渲染</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> renderer;</span><br><span class="line">renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">renderer.setClearColor( <span class="number">0xffffff</span> );</span><br><span class="line">renderer.setPixelRatio( <span class="built_in">window</span>.devicePixelRatio );</span><br><span class="line">renderer.setSize( width, height );</span><br><span class="line">container.appendChild( renderer.domElement );</span><br></pre></td></tr></table></figure><ul><li>增加监控的信息状态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stats = <span class="keyword">new</span> Stats();</span><br><span class="line">container.appendChild( stats.dom );</span><br></pre></td></tr></table></figure><p><strong>将以上封装到<code>init</code>函数中</strong></p><ul><li>动态渲染，地球自转</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">requestAnimationFrame( animate );</span><br><span class="line">render();</span><br><span class="line">stats.update();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">group.rotation.y -= <span class="number">0.005</span>;  <span class="comment">//这行可以控制地球自转</span></span><br><span class="line">renderer.render( scene, camera );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的顺序是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init();</span><br><span class="line">animate();</span><br></pre></td></tr></table></figure></p><p>大功告成，一个可交互的三维地球就可以使用了。</p><h2 id="4-ThreeMap-js整体代码"><a href="#4-ThreeMap-js整体代码" class="headerlink" title="4.ThreeMap.js整体代码"></a>4.<code>ThreeMap.js</code>整体代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./ThreeMap.css'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> THREE <span class="keyword">from</span> <span class="string">'three'</span>;</span><br><span class="line"><span class="keyword">import</span> Orbitcontrols <span class="keyword">from</span> <span class="string">'three-orbitcontrols'</span>;</span><br><span class="line"><span class="keyword">import</span> Stats <span class="keyword">from</span> <span class="string">'./common/threejslibs/stats.min.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreeMap</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"> componentDidMount()&#123;</span><br><span class="line"><span class="keyword">this</span>.initThree();</span><br><span class="line">&#125;</span><br><span class="line">initThree()&#123;</span><br><span class="line"><span class="keyword">let</span> stats;</span><br><span class="line"><span class="keyword">let</span> camera, scene, renderer;</span><br><span class="line"><span class="keyword">let</span> group;</span><br><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'WebGL-output'</span>);</span><br><span class="line"><span class="keyword">let</span> width = container.clientWidth,height = container.clientHeight;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">animate();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line">group = <span class="keyword">new</span> THREE.Group();</span><br><span class="line">scene.add( group );</span><br><span class="line"></span><br><span class="line">camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">60</span>, width / height, <span class="number">1</span>, <span class="number">2000</span> );</span><br><span class="line">camera.position.x = <span class="number">-10</span>;</span><br><span class="line">        camera.position.y = <span class="number">15</span>;</span><br><span class="line">camera.position.z = <span class="number">500</span>;</span><br><span class="line">camera.lookAt( scene.position );</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制地球</span></span><br><span class="line"><span class="keyword">let</span> orbitControls = <span class="keyword">new</span> <span class="comment">/*THREE.OrbitControls*/</span>Orbitcontrols(camera);</span><br><span class="line">        orbitControls.autoRotate = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// let clock = new THREE.Clock();</span></span><br><span class="line">        <span class="comment">//光源</span></span><br><span class="line">        <span class="keyword">let</span> ambi = <span class="keyword">new</span> THREE.AmbientLight(<span class="number">0x686868</span>);</span><br><span class="line">        scene.add(ambi);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> spotLight = <span class="keyword">new</span> THREE.DirectionalLight(<span class="number">0xffffff</span>);</span><br><span class="line">        spotLight.position.set(<span class="number">550</span>, <span class="number">100</span>, <span class="number">550</span>);</span><br><span class="line">        spotLight.intensity = <span class="number">0.6</span>;</span><br><span class="line"></span><br><span class="line">        scene.add(spotLight);</span><br><span class="line"><span class="comment">// Texture</span></span><br><span class="line"><span class="keyword">let</span> loader = <span class="keyword">new</span> THREE.TextureLoader();</span><br><span class="line"><span class="keyword">let</span> planetTexture = <span class="built_in">require</span>(<span class="string">"./assets/imgs/planets/Earth.png"</span>);</span><br><span class="line"></span><br><span class="line">loader.load( planetTexture, <span class="function"><span class="keyword">function</span> (<span class="params"> texture </span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> geometry = <span class="keyword">new</span> THREE.SphereGeometry( <span class="number">200</span>, <span class="number">20</span>, <span class="number">20</span> );</span><br><span class="line"><span class="keyword">let</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial( &#123; <span class="attr">map</span>: texture, <span class="attr">overdraw</span>: <span class="number">0.5</span> &#125; );</span><br><span class="line"><span class="keyword">let</span> mesh = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span><br><span class="line">group.add( mesh );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">renderer.setClearColor( <span class="number">0xffffff</span> );</span><br><span class="line">renderer.setPixelRatio( <span class="built_in">window</span>.devicePixelRatio );</span><br><span class="line">renderer.setSize( width, height );</span><br><span class="line">container.appendChild( renderer.domElement );</span><br><span class="line">stats = <span class="keyword">new</span> Stats();</span><br><span class="line">container.appendChild( stats.dom );  <span class="comment">//增加状态信息 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">requestAnimationFrame( animate );</span><br><span class="line">render();</span><br><span class="line">stats.update();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">group.rotation.y -= <span class="number">0.005</span>;  <span class="comment">//这行可以控制地球自转</span></span><br><span class="line">renderer.render( scene, camera );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div id=<span class="string">'WebGL-output'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ThreeMap;</span><br></pre></td></tr></table></figure><p><strong>参考阅读：</strong></p><ul><li><a href="https://zrysmt.github.io/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B1-%E7%AE%80%E4%BB%8B/">WebGL基础简明教程1-简介</a></li><li><a href="https://zrysmt.github.io/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/">WebGL基础简明教程2-基础知识</a></li><li><a href="http://www.cnblogs.com/wanbo/p/6754066.html" target="_blank" rel="noopener">图解WebGL&amp;Three.js工作原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> Three.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于WebGL的大数据二三维可视化--uber的deck.gl介绍</title>
      <link href="/2017/06/02/%E5%9F%BA%E4%BA%8EWebGL%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BA%8C%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96-uber%E7%9A%84deck-gl%E4%BB%8B%E7%BB%8D/"/>
      <url>/2017/06/02/%E5%9F%BA%E4%BA%8EWebGL%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BA%8C%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96-uber%E7%9A%84deck-gl%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>deck.gl是由uber开发并开源出来的基于WebGL的大数据量可视化框架。它具有提供不同类型可视化图层，GPU渲染的高性能，React和Mapbox GL集成，结合地理信息数据（GPS）的特点。下面我们就举两个例子探索一下这个神奇的库。</p><h1 id="1-第一站：将源码的例子跑起来"><a href="#1-第一站：将源码的例子跑起来" class="headerlink" title="1.第一站：将源码的例子跑起来"></a>1.第一站：将源码的例子跑起来</h1><p>源码在<a href="https://github.com/uber/deck.gl" target="_blank" rel="noopener">github</a>里，首先克隆出来。</p><p>npm 下载，在项目根目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>(友情提醒，如果npm下载速度比较慢，可以使用淘宝镜像，详细请自行搜索)</p><p>下面我们来到例子中，和上不一样在<code>example</code>文件夹下下载安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>安装成功之后，要申请mapbox的一个key。方法如下：<br>在<a href="https://www.mapbox.com/" target="_blank" rel="noopener">mapbox</a>网站注册后进入<a href="https://www.mapbox.com/studio/account/tokens/" target="_blank" rel="noopener">https://www.mapbox.com/studio/account/tokens/</a>,我们便可以在<code>Default Public Token</code><br>找到我们需要的<code>mapbox key</code>。</p><p>在例子文件夹下命令行下输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export MAPBOX_ACCESS_TOKEN=&lt;上面申请到的key&gt;</span><br></pre></td></tr></table></figure></p><p>注意：cmd会不认export,可以使用git命令行，或者直接在代码中加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const MAPBOX_TOKEN = process.env.MAPBOX_ACCESS_TOKEN; //改为</span></span><br><span class="line"><span class="keyword">const</span> MAPBOX_TOKEN = <span class="xml"><span class="tag">&lt;<span class="name">上面申请到的key</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></p><p>浏览器会自动打开,地址为<code>localhost:3030</code>。</p><p>第一例子<code>3d-heatmap</code>,我们看到<br>对应官网上的例子<a href="http://uber.github.io/deck.gl/#/examples/core-layers/hexagon-layer" target="_blank" rel="noopener">http://uber.github.io/deck.gl/#/examples/core-layers/hexagon-layer</a><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/deck.gl/1.jpg" alt=""><br>这是一个<code>HexagonLayer</code>的例子。<br>第二个例子是利用<code>geojson</code><br>对应官网上的例子<a href="http://uber.github.io/deck.gl/#/examples/core-layers/geojson-layer" target="_blank" rel="noopener">http://uber.github.io/deck.gl/#/examples/core-layers/geojson-layer</a><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/deck.gl/2.jpg" alt=""></p><h1 id="2-第二站：先拿一个例子看看"><a href="#2-第二站：先拿一个例子看看" class="headerlink" title="2.第二站：先拿一个例子看看"></a>2.第二站：先拿一个例子看看</h1><p>第一例子<code>3d-heatmap</code>，显示效果上面有给出。</p><p><a href="https://github.com/uber/deck.gl/tree/master/examples/3d-heatmap" target="_blank" rel="noopener">源码路径</a>。</p><blockquote><p><a href="https://github.com/uber/deck.gl/tree/master/examples/3d-heatmap" target="_blank" rel="noopener">https://github.com/uber/deck.gl/tree/master/examples/3d-heatmap</a></p></blockquote><p>deck.gl 是基于地理信息数据的，所以可视化很多都会分层两层，一层是地图数据底图，一层是可视化的数据。这个观念我们要记住，带进去看整个例子。对于这个例子组件<code>MapGL</code>是地里数据底图，组件<code>DeckGLOverlay</code>是可视化成的数据。</p><p>基本结构很见简单。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/deck.gl/3.png" alt=""><br>由于是使用React框架搭建，html很简单</p><ul><li><strong>index.html</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'UTF-8'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>deck.gl example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">overflow</span>: hidden;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'bundle.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>deckgl-overlay.js</strong></li></ul><p>首先引入React和deckgl。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> DeckGL, &#123;HexagonLayer&#125; <span class="keyword">from</span> <span class="string">'deck.gl'</span>;</span><br></pre></td></tr></table></figure></p><p>几个变量先放出来，光线设置（LIGHT_SETTINGS），颜色范围设置（colorRange），高度显示范围（elevationScale），一些默认的属性（defaultProps）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LIGHT_SETTINGS = &#123;</span><br><span class="line">  lightsPosition: [<span class="number">-0.144528</span>, <span class="number">49.739968</span>, <span class="number">8000</span>, <span class="number">-3.807751</span>, <span class="number">54.104682</span>, <span class="number">8000</span>],</span><br><span class="line">  ambientRatio: <span class="number">0.4</span>,</span><br><span class="line">  diffuseRatio: <span class="number">0.6</span>,</span><br><span class="line">  specularRatio: <span class="number">0.2</span>,</span><br><span class="line">  lightsStrength: [<span class="number">0.8</span>, <span class="number">0.0</span>, <span class="number">0.8</span>, <span class="number">0.0</span>],</span><br><span class="line">  numberOfLights: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colorRange = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">152</span>, <span class="number">189</span>],</span><br><span class="line">  [<span class="number">73</span>, <span class="number">227</span>, <span class="number">206</span>],</span><br><span class="line">  [<span class="number">216</span>, <span class="number">254</span>, <span class="number">181</span>],</span><br><span class="line">  [<span class="number">254</span>, <span class="number">237</span>, <span class="number">177</span>],</span><br><span class="line">  [<span class="number">254</span>, <span class="number">173</span>, <span class="number">84</span>],</span><br><span class="line">  [<span class="number">209</span>, <span class="number">55</span>, <span class="number">78</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elevationScale = &#123;<span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultProps = &#123;</span><br><span class="line">  radius: <span class="number">1000</span>,</span><br><span class="line">  upperPercentile: <span class="number">100</span>,</span><br><span class="line">  coverage: <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们建立叫<code>DeckGLOverlay</code>的组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DeckGLOverlay</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>组件中提供了两个静态的属性，静态属性可以使用[类名].[方法名]调用，例如：<code>DeckGLOverlay.defaultColorRange</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> get defaultColorRange() &#123;<span class="comment">//默认的颜色范围</span></span><br><span class="line">  <span class="keyword">return</span> colorRange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> get defaultViewport() &#123;<span class="comment">//默认的视图</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    longitude: <span class="number">-1.4157267858730052</span>,</span><br><span class="line">    latitude: <span class="number">52.232395363869415</span>,</span><br><span class="line">    zoom: <span class="number">6.6</span>,</span><br><span class="line">    minZoom: <span class="number">5</span>,</span><br><span class="line">    maxZoom: <span class="number">15</span>,</span><br><span class="line">    pitch: <span class="number">40.5</span>,</span><br><span class="line">    bearing: <span class="number">-27.396674584323023</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>constructor</code>是构造函数，主要看的是<code>_animateHeight</code>对组件state的设置，这个是用来控制高度的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.startAnimationTimer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.intervalTimer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    elevationScale: elevationScale.min</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._startAnimate = <span class="keyword">this</span>._startAnimate.bind(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>._animateHeight = <span class="keyword">this</span>._animateHeight.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">this</span>._animate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nextProps.data.length !== <span class="keyword">this</span>.props.data.length) &#123;</span><br><span class="line">    <span class="keyword">this</span>._animate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillUnmount() &#123;</span><br><span class="line">  <span class="keyword">this</span>._stopAnimate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_animate() &#123;</span><br><span class="line">  <span class="keyword">this</span>._stopAnimate();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait 1.5 secs to start animation so that all data are loaded</span></span><br><span class="line">  <span class="keyword">this</span>.startAnimationTimer = <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>._startAnimate, <span class="number">1500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_startAnimate() &#123;</span><br><span class="line">  <span class="keyword">this</span>.intervalTimer = <span class="built_in">window</span>.setInterval(<span class="keyword">this</span>._animateHeight, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_stopAnimate() &#123;</span><br><span class="line">  <span class="built_in">window</span>.clearTimeout(<span class="keyword">this</span>.startAnimationTimer);</span><br><span class="line">  <span class="built_in">window</span>.clearTimeout(<span class="keyword">this</span>.intervalTimer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_animateHeight() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.elevationScale === elevationScale.max) &#123;</span><br><span class="line">    <span class="keyword">this</span>._stopAnimate();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">elevationScale</span>: <span class="keyword">this</span>.state.elevationScale + <span class="number">1</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_initialize(gl) &#123;</span><br><span class="line">  gl.enable(gl.DEPTH_TEST);</span><br><span class="line">  gl.depthFunc(gl.LEQUAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>render</code>渲染方法，layers是可视化渲染的图层定义变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;viewport, data, radius, coverage, upperPercentile&#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> layers = [</span><br><span class="line">    <span class="keyword">new</span> HexagonLayer(&#123;</span><br><span class="line">      id: <span class="string">'heatmap'</span>,</span><br><span class="line">      colorRange,</span><br><span class="line">      coverage,</span><br><span class="line">      data,</span><br><span class="line">      elevationRange: [<span class="number">0</span>, <span class="number">3000</span>],</span><br><span class="line">      elevationScale: <span class="keyword">this</span>.state.elevationScale, <span class="comment">//高度</span></span><br><span class="line">      extruded: <span class="literal">true</span>,</span><br><span class="line">      getPosition: <span class="function"><span class="params">d</span> =&gt;</span> d,          <span class="comment">//位置</span></span><br><span class="line">      lightSettings: LIGHT_SETTINGS,</span><br><span class="line">      onHover: <span class="keyword">this</span>.props.onHover,</span><br><span class="line">      opacity: <span class="number">1</span>,</span><br><span class="line">      pickable: <span class="built_in">Boolean</span>(<span class="keyword">this</span>.props.onHover),</span><br><span class="line">      radius,</span><br><span class="line">      upperPercentile</span><br><span class="line">    &#125;)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">DeckGL</span> &#123;<span class="attr">...viewport</span>&#125; <span class="attr">layers</span>=<span class="string">&#123;layers&#125;</span> <span class="attr">onWebGLInitialized</span>=<span class="string">&#123;this._initialize&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>app.js</strong></li></ul><p>引入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> MapGL <span class="keyword">from</span> <span class="string">'react-map-gl'</span>;</span><br><span class="line"><span class="keyword">import</span> DeckGLOverlay <span class="keyword">from</span> <span class="string">'./deckgl-overlay.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;csv <span class="keyword">as</span> requestCsv&#125; <span class="keyword">from</span> <span class="string">'d3-request'</span>;<span class="comment">//加载csv文件</span></span><br></pre></td></tr></table></figure></p><p>mapbox key：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAPBOX_TOKEN = process.env.MAPBOX_ACCESS_TOKEN;</span><br></pre></td></tr></table></figure></p><p>组件<code>Root</code>：<br>在构造函数中，我们将两个关键的变量viewport和data均放入到state中。这里的<code>MapGL</code>组件就是地理底图。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      viewport: &#123;</span><br><span class="line">        ...DeckGLOverlay.defaultViewport,</span><br><span class="line">        width: <span class="number">500</span>,</span><br><span class="line">        height: <span class="number">500</span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//请求csv数据</span></span><br><span class="line">    requestCsv(<span class="string">'./data/heatmap-data.csv'</span>, (error, response) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = response.map(<span class="function"><span class="params">d</span> =&gt;</span> ([<span class="built_in">Number</span>(d.lng), <span class="built_in">Number</span>(d.lat)]));</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;data&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>._resize.bind(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">this</span>._resize();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _resize() &#123;</span><br><span class="line">    <span class="keyword">this</span>._onChangeViewport(&#123;</span><br><span class="line">      width: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">      height: <span class="built_in">window</span>.innerHeight</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onChangeViewport(viewport) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      viewport: &#123;...this.state.viewport, ...viewport&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;viewport, data&#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;MapGL</span><br><span class="line">        &#123;...viewport&#125;</span><br><span class="line">        mapStyle=<span class="string">"mapbox://styles/mapbox/dark-v9"</span></span><br><span class="line">        perspectiveEnabled=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">        onChangeViewport=&#123;<span class="keyword">this</span>._onChangeViewport.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">        mapboxApiAccessToken=&#123;MAPBOX_TOKEN&#125;&gt;</span><br><span class="line">        &lt;DeckGLOverlay</span><br><span class="line">          viewport=&#123;viewport&#125;</span><br><span class="line">          data=&#123;data || []&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/MapGL&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>渲染：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">Root</span> /&gt;</span>, document.body.appendChild(document.createElement('div')));</span></span><br></pre></td></tr></table></figure></p><p>MapGL组件我们来修改下<code>mapStyle</code>来重新生成一张图。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapStyle=<span class="string">"mapbox://styles/mapbox/satellite-v9"</span></span><br></pre></td></tr></table></figure></p><p>来看下显示效果，地图就变成了卫星影像。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/deck.gl/4.jpg" alt=""></p><p><a href="https://www.mapbox.com/studio/styles/" target="_blank" rel="noopener">mapbox</a>提供了几款基础的样式，我们还可以自定义样式使用。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/deck.gl/5.jpg" alt=""></p><h1 id="3-第三站：总结一下"><a href="#3-第三站：总结一下" class="headerlink" title="3.第三站：总结一下"></a>3.第三站：总结一下</h1><p>通过上面我们就分析了一个简单的例子，使用Deck.gl，MapGL组件，利用两百多行代码就可以渲染14万多条数据，而且显示效果让我们惊叹，还支持交互，性能比较好，基于WebGL的大数据二三维可视化一个值得研究的方向。</p><p><strong>参考阅读：</strong></p><ul><li><a href="http://uber.github.io/" target="_blank" rel="noopener">uber deck.gl官网</a></li><li><a href="http://www.jianshu.com/p/143ee36b9536" target="_blank" rel="noopener">uber可能用到的可视化技术</a></li><li><a href="http://www.tuicool.com/articles/fqYbieY" target="_blank" rel="noopener">Uber工程的deck.gl框架下的Web数据可视化集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> WebGL </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leaflet可视化平台搭建</title>
      <link href="/2017/05/22/leaflet%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/05/22/leaflet%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://github.com/zrysmt/leaflet-viz" target="_blank" rel="noopener">leaflet-viz–Leaflet可视化平台</a></strong></p><blockquote><p><a href="https://github.com/zrysmt/leaflet-viz" target="_blank" rel="noopener">https://github.com/zrysmt/leaflet-viz</a></p></blockquote><p><a href="http://leafletjs.com/index.html" target="_blank" rel="noopener">leaflet</a>是一个开源的前端地图交互类库，比较轻量级，支持移动端。而且有丰富的<a href="http://leafletjs.com/plugins.html" target="_blank" rel="noopener">插件资源</a>可供我们使用。</p><p><a href="http://echarts.baidu.com/" target="_blank" rel="noopener">Echarts</a>是百度开源的前端可视化类库，提供丰富的前端可视化图表，平台中重要的一部分是我们要将leaflet和Echarts结合在一起。</p><p>该平台是基于leaflet及其插件搭建的一个方便可用的可视化平台。详细参见[示例Demo]。(<a href="https://zrysmt.github.io/demo/leaflet-demo/">https://zrysmt.github.io/demo/leaflet-demo/</a>)</p><h2 id="1-安装与编译"><a href="#1-安装与编译" class="headerlink" title="1. 安装与编译"></a>1. 安装与编译</h2><ul><li><strong>安装</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li><strong>编译</strong></li></ul><p><strong>debug模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="2-示例简介"><a href="#2-示例简介" class="headerlink" title="2.示例简介"></a>2.示例简介</h2><p>示例地址：<a href="https://zrysmt.github.io/demo/leaflet-demo/">https://zrysmt.github.io/demo/leaflet-demo/</a><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-1.jpg" alt=""><br>示例包含最基本的GIS功能和可视化Demo</p><h2 id="3-基础的GIS功能"><a href="#3-基础的GIS功能" class="headerlink" title="3.基础的GIS功能"></a>3.基础的GIS功能</h2><ul><li>拖放、全图、定位、打印出图片、打印出PDF功能。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-2.png" alt=""></li><li>地图缩放、比例尺显示功能</li><li>测量面积和距离功能</li><li>图层切换，提供丰富的图层切换<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-3.png" alt=""></li><li>地图搜索功能</li><li>基础绘图功能<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-4.png" alt=""></li></ul><h2 id="4-可视化示例"><a href="#4-可视化示例" class="headerlink" title="4.可视化示例"></a>4.可视化示例</h2><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-5.png" alt=""></p><ul><li><strong>热力图</strong></li></ul><p>引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;../common/leaflet-plugin/HeatLayer.js&apos;;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heat = L.heatLayer([</span><br><span class="line">    [<span class="number">50.5</span>, <span class="number">30.5</span>, <span class="number">0.2</span>], <span class="comment">// lat, lng, intensity</span></span><br><span class="line">    [<span class="number">50.6</span>, <span class="number">30.4</span>, <span class="number">0.5</span>],</span><br><span class="line">...</span><br><span class="line">], &#123;<span class="attr">radius</span>: <span class="number">25</span>&#125;).addTo(map)</span><br></pre></td></tr></table></figure></p><p><strong>效果图</strong>：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-6.jpg" alt=""></p><ul><li><strong>结合Echarts</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> overlay = <span class="keyword">new</span> L.echartsLayer3(map, echarts);</span><br><span class="line"><span class="keyword">let</span> chartsContainer = overlay.getEchartsContainer();</span><br><span class="line"><span class="keyword">let</span> myChart = overlay.initECharts(chartsContainer);</span><br><span class="line"><span class="built_in">window</span>.onresize = myChart.onresize;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"chartsContainer:"</span>, chartsContainer);</span><br><span class="line"><span class="keyword">if</span> (type == <span class="string">"qianxi"</span>) &#123;</span><br><span class="line">    overlay.setOption(ecOption);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"scatter"</span>) &#123;</span><br><span class="line">    overlay.setOption(scatterOption);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>迁徙图</strong>（选择了高德卫星底图）<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-7.jpg" alt=""><br><strong>散点图</strong>（选择了Geoq午夜蓝底图）<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-8.jpg" alt=""></p><ul><li><strong>DivIcon结合Echarts</strong></li></ul><p>这个方案不太适合大数据量的渲染。<br>我写了两个简单的功能函数，一个用来渲染可视化图（echartsIcon），一个专门用来渲染图例（echartsLegend）。<br><strong>效果图</strong>（底图选择了为google底图）<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-9.jpg" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echartsIcon <span class="keyword">from</span> <span class="string">'../common/plugin/echartsIcon.js'</span>; <span class="comment">//echartsLegend</span></span><br><span class="line"><span class="keyword">import</span> echartsLegend <span class="keyword">from</span> <span class="string">'../common/plugin/echartsLegend.js'</span>; <span class="comment">//echartsLegend</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span>,</span><br><span class="line">        formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'访问来源'</span>,</span><br><span class="line">        type: <span class="string">'pie'</span>,</span><br><span class="line">        radius: <span class="string">'55%'</span>,</span><br><span class="line">        center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">        label: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        lableLine: &#123;</span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                shadowBlur: <span class="number">10</span>,</span><br><span class="line">                shadowOffsetX: <span class="number">0</span>,</span><br><span class="line">                shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//经纬度不能相同</span></span><br><span class="line"><span class="keyword">let</span> latlngs = [</span><br><span class="line">    [<span class="number">30</span>, <span class="number">104</span>],</span><br><span class="line">    [<span class="number">31</span>, <span class="number">110</span>],</span><br><span class="line">    [<span class="number">34</span>, <span class="number">120</span>]</span><br><span class="line">];</span><br><span class="line">option.datas = [</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">335</span>, <span class="attr">name</span>: <span class="string">'直接访问'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">310</span>, <span class="attr">name</span>: <span class="string">'邮件营销'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">234</span>, <span class="attr">name</span>: <span class="string">'联盟广告'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">135</span>, <span class="attr">name</span>: <span class="string">'视频广告'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">1548</span>, <span class="attr">name</span>: <span class="string">'搜索引擎'</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">345</span>, <span class="attr">name</span>: <span class="string">'直接访问'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">410</span>, <span class="attr">name</span>: <span class="string">'邮件营销'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">244</span>, <span class="attr">name</span>: <span class="string">'联盟广告'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">145</span>, <span class="attr">name</span>: <span class="string">'视频广告'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">548</span>, <span class="attr">name</span>: <span class="string">'搜索引擎'</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">445</span>, <span class="attr">name</span>: <span class="string">'直接访问'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">410</span>, <span class="attr">name</span>: <span class="string">'邮件营销'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">244</span>, <span class="attr">name</span>: <span class="string">'联盟广告'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">145</span>, <span class="attr">name</span>: <span class="string">'视频广告'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">148</span>, <span class="attr">name</span>: <span class="string">'搜索引擎'</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line">echartsIcon(map, latlngs, option);</span><br><span class="line"><span class="comment">//图例</span></span><br><span class="line"><span class="keyword">let</span> legendOption = &#123;</span><br><span class="line">    orient: <span class="string">'vertical'</span>,</span><br><span class="line">    left: <span class="string">'left'</span>,</span><br><span class="line">    width: <span class="string">"90px"</span>,</span><br><span class="line">    height: <span class="string">"140px"</span>,</span><br><span class="line">    data: [<span class="string">'直接访问'</span>, <span class="string">'邮件营销'</span>, <span class="string">'联盟广告'</span>, <span class="string">'视频广告'</span>, <span class="string">'搜索引擎'</span>]</span><br><span class="line">&#125;;</span><br><span class="line">echartsLegend(map, legendOption);</span><br></pre></td></tr></table></figure><ul><li>leaflet-dvf</li></ul><p><a href="https://github.com/humangeo/leaflet-dvf" target="_blank" rel="noopener">leaflet-dvf</a>是一个基于leaflet的数据可视化框架，提供有比较多的可视化图形。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"../common/leaflet-plugin/Leaflet.dvf/css/dvf.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"leaflet-dvf"</span>;</span><br></pre></td></tr></table></figure></p><p><strong>地震图：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-10.jpg" alt=""><br><strong>收入水平图：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-11.jpg" alt=""><br>需要的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> earthquakesData <span class="keyword">from</span> <span class="string">'../data/earthquakes.json'</span>;</span><br><span class="line"><span class="keyword">import</span> countryData <span class="keyword">from</span> <span class="string">'../data/countryData.js'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>地震图代码：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lastLayer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> eqfeed_callback = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize framework linear functions for mapping earthquake data properties to Leaflet style properties</span></span><br><span class="line">    <span class="comment">// Color scale - green to red using the basic HSLHueFunction</span></span><br><span class="line">    <span class="keyword">let</span> magnitudeColorFunction = <span class="keyword">new</span> L.HSLHueFunction(<span class="keyword">new</span> L.Point(<span class="number">0</span>, <span class="number">90</span>), <span class="keyword">new</span> L.Point(<span class="number">10</span>, <span class="number">0</span>), &#123; <span class="attr">outputSaturation</span>: <span class="string">'100%'</span>, <span class="attr">outputLuminosity</span>: <span class="string">'25%'</span>, <span class="attr">postProcess</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> magnitudeFillColorFunction = <span class="keyword">new</span> L.HSLHueFunction(<span class="keyword">new</span> L.Point(<span class="number">0</span>, <span class="number">90</span>), <span class="keyword">new</span> L.Point(<span class="number">10</span>, <span class="number">0</span>), &#123; <span class="attr">outputSaturation</span>: <span class="string">'100%'</span>, <span class="attr">outputLuminosity</span>: <span class="string">'50%'</span>, <span class="attr">postProcess</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> magnitudeRadiusFunction = <span class="keyword">new</span> L.LinearFunction(<span class="keyword">new</span> L.Point(<span class="number">0</span>, <span class="number">10</span>), <span class="keyword">new</span> L.Point(<span class="number">10</span>, <span class="number">30</span>), &#123; <span class="attr">postProcess</span>: <span class="literal">null</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Math</span>.round((<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime());</span><br><span class="line">    <span class="keyword">let</span> start = now - <span class="number">86400000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize a linear function to map earthquake time to opacity</span></span><br><span class="line">    <span class="keyword">let</span> timeOpacityFunction = <span class="keyword">new</span> L.LinearFunction(<span class="keyword">new</span> L.Point(start, <span class="number">0.3</span>), <span class="keyword">new</span> L.Point(now, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">let</span> fontSizeFunction = <span class="keyword">new</span> L.LinearFunction(<span class="keyword">new</span> L.Point(<span class="number">0</span>, <span class="number">8</span>), <span class="keyword">new</span> L.Point(<span class="number">10</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> textFunction = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            text: value,</span><br><span class="line">            style: &#123;</span><br><span class="line">                <span class="string">'font-size'</span>: fontSizeFunction.evaluate(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup a new data layer</span></span><br><span class="line">    <span class="keyword">let</span> dataLayer = <span class="keyword">new</span> L.DataLayer(data, &#123;</span><br><span class="line">        recordsField: <span class="string">'features'</span>,</span><br><span class="line">        latitudeField: <span class="string">'geometry.coordinates.1'</span>,</span><br><span class="line">        longitudeField: <span class="string">'geometry.coordinates.0'</span>,</span><br><span class="line">        locationMode: L.LocationModes.LATLNG,</span><br><span class="line">        displayOptions: &#123;</span><br><span class="line">            <span class="string">'properties.mag'</span>: &#123;</span><br><span class="line">                displayName: <span class="string">'震级'</span>,</span><br><span class="line">                color: magnitudeColorFunction,</span><br><span class="line">                fillColor: magnitudeFillColorFunction,</span><br><span class="line">                radius: magnitudeRadiusFunction,</span><br><span class="line">                text: textFunction</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'properties.time'</span>: &#123;</span><br><span class="line">                displayName: <span class="string">'时间'</span>,</span><br><span class="line">                opacity: timeOpacityFunction,</span><br><span class="line">                fillOpacity: timeOpacityFunction,</span><br><span class="line">                displayText: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> moment.unix(value / <span class="number">1000</span>).format(<span class="string">'MM/DD/YY HH:mm'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        layerOptions: &#123;</span><br><span class="line">            numberOfSides: <span class="number">4</span>,</span><br><span class="line">            radius: <span class="number">10</span>,</span><br><span class="line">            weight: <span class="number">1</span>,</span><br><span class="line">            color: <span class="string">'#000'</span>,</span><br><span class="line">            opacity: <span class="number">0.2</span>,</span><br><span class="line">            stroke: <span class="literal">true</span>,</span><br><span class="line">            fillOpacity: <span class="number">0.7</span>,</span><br><span class="line">            dropShadow: <span class="literal">true</span>,</span><br><span class="line">            gradient: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        tooltipOptions: &#123;</span><br><span class="line">            iconSize: <span class="keyword">new</span> L.Point(<span class="number">90</span>, <span class="number">90</span>), <span class="comment">//hover框大小</span></span><br><span class="line">            iconAnchor: <span class="keyword">new</span> L.Point(<span class="number">-4</span>, <span class="number">76</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        onEachRecord: <span class="function"><span class="keyword">function</span>(<span class="params">layer, record, location</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> $html = $(L.HTMLUtils.buildTable(record));</span><br><span class="line"></span><br><span class="line">            layer.bindPopup($html.wrap(<span class="string">'&lt;div/&gt;'</span>).parent().html(), &#123;</span><br><span class="line">                minWidth: <span class="number">400</span>,</span><br><span class="line">                maxWidth: <span class="number">400</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the data layer to the map</span></span><br><span class="line">    map.addLayer(dataLayer);</span><br><span class="line"></span><br><span class="line">    lastLayer = dataLayer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.mapSetting();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lastLayer) &#123;</span><br><span class="line">    map.removeLayer(lastLayer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"earthquakesData:"</span>, earthquakesData);</span><br><span class="line">eqfeed_callback(earthquakesData)</span><br></pre></td></tr></table></figure></p><p><strong>收入水平图代码：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> incomeLevelTypes = [<span class="string">'OEC'</span>, <span class="string">'NOC'</span>, <span class="string">'UMC'</span>, <span class="string">'MIC'</span>, <span class="string">'LMC'</span>, <span class="string">'LIC'</span>, <span class="string">'HPC'</span>];</span><br><span class="line"><span class="keyword">let</span> valueArray = [&#123; <span class="string">"id"</span>: <span class="string">"HIC"</span>, <span class="string">"value"</span>: <span class="string">"高收入(HIC)"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"id"</span>: <span class="string">"HPC"</span>, <span class="string">"value"</span>: <span class="string">"收入严重不足(HIPC)"</span> &#125;, &#123; <span class="string">"id"</span>: <span class="string">"INX"</span>, <span class="string">"value"</span>: <span class="string">"未分类(INX)"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"id"</span>: <span class="string">"LIC"</span>, <span class="string">"value"</span>: <span class="string">"低收入(LIC)"</span> &#125;, &#123; <span class="string">"id"</span>: <span class="string">"LMC"</span>, <span class="string">"value"</span>: <span class="string">"中等偏下(LMC)"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"id"</span>: <span class="string">"LMY"</span>, <span class="string">"value"</span>: <span class="string">"中低等收入"</span> &#125;, &#123; <span class="string">"id"</span>: <span class="string">"MIC"</span>, <span class="string">"value"</span>: <span class="string">"中等收入(MIC)"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"id"</span>: <span class="string">"NOC"</span>, <span class="string">"value"</span>: <span class="string">"高收入：nonOECD(NOC)"</span> &#125;, &#123; <span class="string">"id"</span>: <span class="string">"OEC"</span>, <span class="string">"value"</span>: <span class="string">"高收入: OECD(OEC)"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"id"</span>: <span class="string">"UMC"</span>, <span class="string">"value"</span>: <span class="string">"中等偏上(UMC)"</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> getMap = <span class="function"><span class="keyword">function</span>(<span class="params">valueArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; valueArray.length; ++index) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = valueArray[index];</span><br><span class="line"></span><br><span class="line">        map[value[<span class="string">'id'</span>]] = value[<span class="string">'value'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> valueMap = getMap(valueArray);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> incomeLevelToText = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> valueMap[incomeLevelTypes[value]];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colorFunction1 = <span class="keyword">new</span> L.HSLLuminosityFunction(<span class="keyword">new</span> L.Point(<span class="number">0</span>, <span class="number">0.2</span>), <span class="keyword">new</span> L.Point(incomeLevelTypes.length - <span class="number">1</span>, <span class="number">0.75</span>), &#123; <span class="attr">outputHue</span>: <span class="number">0</span>, <span class="attr">outputLuminosity</span>: <span class="string">'100%'</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> fillColorFunction1 = <span class="keyword">new</span> L.HSLLuminosityFunction(<span class="keyword">new</span> L.Point(<span class="number">0</span>, <span class="number">0.5</span>), <span class="keyword">new</span> L.Point(incomeLevelTypes.length - <span class="number">1</span>, <span class="number">1</span>), &#123; <span class="attr">outputHue</span>: <span class="number">0</span>, <span class="attr">outputLuminosity</span>: <span class="string">'100%'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> styles = <span class="keyword">new</span> L.StylesBuilder(incomeLevelTypes, &#123;</span><br><span class="line">    displayName: incomeLevelToText,</span><br><span class="line">    color: colorFunction1,</span><br><span class="line">    fillColor: fillColorFunction1</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    recordsField: <span class="string">'1'</span>,</span><br><span class="line">    locationMode: L.LocationModes.COUNTRY,</span><br><span class="line">    codeField: <span class="string">'id'</span>,</span><br><span class="line">    displayOptions: &#123;</span><br><span class="line">        <span class="string">'incomeLevel.id'</span>: &#123;</span><br><span class="line">            displayName: <span class="string">'收入水平'</span>,</span><br><span class="line">            styles: styles.getStyles()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    layerOptions: &#123;</span><br><span class="line">        fillOpacity: <span class="number">0.7</span>,</span><br><span class="line">        opacity: <span class="number">1</span>,</span><br><span class="line">        weight: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltipOptions: &#123;</span><br><span class="line">        iconSize: <span class="keyword">new</span> L.Point(<span class="number">100</span>, <span class="number">65</span>),</span><br><span class="line">        iconAnchor: <span class="keyword">new</span> L.Point(<span class="number">-5</span>, <span class="number">65</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onEachRecord: <span class="function"><span class="keyword">function</span>(<span class="params">layer, record</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> $html = $(L.HTMLUtils.buildTable(record));</span><br><span class="line"></span><br><span class="line">        layer.bindPopup($html.wrap(<span class="string">'&lt;div/&gt;'</span>).parent().html(), &#123;</span><br><span class="line">            maxWidth: <span class="number">400</span>,</span><br><span class="line">            minWidth: <span class="number">400</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> incomeLayer = <span class="keyword">new</span> L.ChoroplethDataLayer(incomeLevels, options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> legendControl = <span class="keyword">new</span> L.Control.Legend();</span><br><span class="line"></span><br><span class="line">legendControl.addTo(map);</span><br><span class="line">map.addLayer(incomeLayer);</span><br></pre></td></tr></table></figure></p><h1 id="5-GeoJSON"><a href="#5-GeoJSON" class="headerlink" title="5.GeoJSON"></a>5.GeoJSON</h1><p>假设我们需要自己做个地图，然后加载到平台中。这个时候可以使用我们提供了编辑栏，编辑后会得到坐标，把坐标转成GeoJSON数据存到数据库中，下次加载的时候解析即可。<br>还可以使用GIS工具，做成GeoJSON的数据，然后使用下面的方法加载，详细说明的<a href="https://zrysmt.github.io/2017/05/04/%E4%BD%BF%E7%94%A8leaflet%E6%88%96%E8%80%85openlayers-3-%E8%B0%83%E7%94%A8MapServer%E6%9C%8D%E5%8A%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%AE%8C%E6%95%B4%E8%AF%B4%E6%98%8E/">传送门</a>在这，当然这包括MapServer的东西，我们将在第六部分有简要说明。<br><strong>示例图：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-12.jpg" alt=""><br>引入数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; json_china &#125; <span class="keyword">from</span> <span class="string">'../data/china.js'</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop_0</span>(<span class="params">feature, layer</span>) </span>&#123;<span class="comment">//部分有省略</span></span><br><span class="line">    <span class="keyword">let</span> popupContent = <span class="string">'&lt;table&gt;\</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;\</span></span><br><span class="line"><span class="string">                        &lt;td colspan="2"&gt;面积：'</span> + (feature.properties[<span class="string">'AREA'</span>] !== <span class="literal">null</span> ? Autolinker.link(<span class="built_in">String</span>(feature.properties[<span class="string">'AREA'</span>])) : <span class="string">''</span>) + <span class="string">'&lt;/td&gt;\</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;\</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;\</span></span><br><span class="line"><span class="string">                        &lt;td colspan="2"&gt;周长：'</span> + (feature.properties[<span class="string">'PERIMETER'</span>] !== <span class="literal">null</span> ? Autolinker.link(<span class="built_in">String</span>(feature.properties[<span class="string">'PERIMETER'</span>])) : <span class="string">''</span>) + <span class="string">'&lt;/td&gt;\</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;\</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;\</span></span><br><span class="line"><span class="string">                        &lt;td colspan="2"&gt;名称：'</span> + (feature.properties[<span class="string">'NAME'</span>] !== <span class="literal">null</span> ? Autolinker.link(<span class="built_in">String</span>(feature.properties[<span class="string">'NAME'</span>])) : <span class="string">''</span>) + <span class="string">'&lt;/td&gt;\</span></span><br><span class="line"><span class="string">                    &lt;/tr&gt;\</span></span><br><span class="line"><span class="string">                &lt;/table&gt;'</span>;</span><br><span class="line">    layer.bindPopup(popupContent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">style_0</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        pane: <span class="string">'pane_0'</span>,</span><br><span class="line">        opacity: <span class="number">1</span>,</span><br><span class="line">        color: <span class="string">'rgba(0,0,0,0.494117647059)'</span>,</span><br><span class="line">        dashArray: <span class="string">''</span>,</span><br><span class="line">        lineCap: <span class="string">'butt'</span>,</span><br><span class="line">        lineJoin: <span class="string">'miter'</span>,</span><br><span class="line">        weight: <span class="number">1.0</span>,</span><br><span class="line">        fillOpacity: <span class="number">1</span>,</span><br><span class="line">        fillColor: <span class="string">'rgba(64,98,210,0.494117647059)'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">map.createPane(<span class="string">'pane_0'</span>);</span><br><span class="line">map.getPane(<span class="string">'pane_0'</span>).style.zIndex = <span class="number">400</span>;</span><br><span class="line">map.getPane(<span class="string">'pane_0'</span>).style[<span class="string">'mix-blend-mode'</span>] = <span class="string">'normal'</span>;</span><br><span class="line"><span class="keyword">let</span> layer_0 = <span class="keyword">new</span> L.geoJson(json_china, &#123;</span><br><span class="line">    attribution: <span class="string">'&lt;a href=""&gt;&lt;/a&gt;'</span>,</span><br><span class="line">    pane: <span class="string">'pane_0'</span>,</span><br><span class="line">    onEachFeature: pop_0,</span><br><span class="line">    style: style_0</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="6-MapServer"><a href="#6-MapServer" class="headerlink" title="6.MapServer"></a>6.MapServer</h1><p>再进一步，如果我们想要自己的地图服务器，这个时候就需要使用到了MapServer,具体的说明见<a href="https://zrysmt.github.io/2017/05/04/%E4%BD%BF%E7%94%A8leaflet%E6%88%96%E8%80%85openlayers-3-%E8%B0%83%E7%94%A8MapServer%E6%9C%8D%E5%8A%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%AE%8C%E6%95%B4%E8%AF%B4%E6%98%8E/">传送门</a></p><p>有个示例在<code>test</code>文件夹下:<code>leaflet-mapserver.html</code>。注意这个是需要配置好服务器的，在这里直接预览是不能成功的。<br>示例得到我们的世界地图的地图服务器。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/leaflet/1-13.jpg" alt=""></p><p>其实leaflet和D3等开源库结合起来，能得到很多丰富多彩的可视化图，姑且留下点神秘，这里就不再探究两者结合的神奇魅力了。</p>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> WebGIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017阿里实习校招-前端技术视频面试体会</title>
      <link href="/2017/05/22/2017%E9%98%BF%E9%87%8C%E5%AE%9E%E4%B9%A0%E6%A0%A1%E6%8B%9B-%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%A7%86%E9%A2%91%E9%9D%A2%E8%AF%95%E4%BD%93%E4%BC%9A/"/>
      <url>/2017/05/22/2017%E9%98%BF%E9%87%8C%E5%AE%9E%E4%B9%A0%E6%A0%A1%E6%8B%9B-%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%A7%86%E9%A2%91%E9%9D%A2%E8%AF%95%E4%BD%93%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>快要秋招找工作了，预约的暑期实习面试，也是为了秋招攒点经验。约的时间是15:15 - 16:00，焦急又必须有耐心的等待后，终于在下午四点左右接通了视频，紧张ing。</p><p>首先面试官介绍了自己的花名，心里紧张没记下来，现在想想挺后悔的。但是谁让我紧张了呢？<br>然后是我的自我介绍，简单的介绍了一下我的基本情况，把技能和项目都介绍了介绍。<br>面试官态度挺好的，平易近人的感觉，慢慢的也就不紧张了，后面面试官一路45度仰天扣鼻子，也是让我乐了，心态更加轻松随意了。</p><p>面试的前端工程师，当然最重要的技术问题。上来就是让我共享屏幕，然后打开IDE写个排序，尼玛宝宝好怕，虽然简单，但是全部写下来运行太痛苦了。</p><h1 id="1-数组排序"><a href="#1-数组排序" class="headerlink" title="1.数组排序"></a>1.数组排序</h1><ul><li><p>原生实现 sort函数，倒是很快就写出来了，然后随时就让我用不是原生的方法实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">34</span>,<span class="number">20</span>,<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">arr,sortType</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span>    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sortType == <span class="string">"desc"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> num1 &lt; num2; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num1 &gt; num2; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快排 我记得模棱两可，没写出来啊，心痛啊。现在把正确的贴在这里。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> leftArr = [];</span><br><span class="line">    <span class="keyword">let</span> rightArr = [];</span><br><span class="line">    <span class="keyword">let</span> q = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>,l=arr.length; i&lt;l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;q) &#123;</span><br><span class="line">            rightArr.push(arr[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            leftArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [].concat(quickSort(leftArr),[q],quickSort(rightArr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还好冒泡还记得，又用冒泡写的，马马虎虎能运行了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>,l=arr.length;i&lt;l<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>;j&lt;l;j++) &#123; </span><br><span class="line">          <span class="keyword">if</span>(arr[i]&gt;arr[j]) &#123;</span><br><span class="line">                <span class="keyword">let</span> tem = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = tem;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2.ES6"></a>2.ES6</h1><p>提了下ES6，问了ES6的<strong>let，const与var</strong>的区别，特意说下let和const有块级作用域。var没有。然后又问了我都有什么作用域，我说ES5没有块级作用域，有全局作用域和函数作用域。然后面试官补充了一个对象作用域，这个我知道只是好像没经过总结过啊。</p><p>问我在项目中使用的ES6都有哪些？我说<strong>Promoise</strong>挺优雅的，然后让我写写，然后我就写了个XmlHttpServer，啊悲了个催了的，我的编辑器没有智能提示（论一个智能提醒的IDE有多重要），然后我手写的ajax请求，忘记了很多细节，怎么写啊，写了部分，面试官看不下去了吧（心伤），说他明白我的意思，你不用全部写下来，把过程大概写好就行了。然后我就写了怎么调用，我是理解了Promise，不知道这个问题面试官给打多少分，所以说坑都是自己挖的。</p><p>其实介绍了几次我使用了React+react router，估计阿里内部使用的是Weex，Kissy这样的自己的框架，面试官估计没有太接触React，所以一直没问我这方面的问题。</p><h1 id="3-项目"><a href="#3-项目" class="headerlink" title="3.项目"></a>3.项目</h1><p>一直不提我使用React写的项目，提起来我之前做的一个项目，那个项目我也没啥说的吧，我只能说我比较早做的，使用的都是老技术。运用的是Bootstrap，查询渲染数据，巴拉巴拉，感觉我说完的意思是我的这个项目不咋样，自己不相信自己了啊，怀疑了人生。</p><p>然后问我做了其他的有什么最深的体会。<br>所以我立刻就说了使用 React的项目（终于可以介绍了），然后我就说主要分了两个模块，一个是基础的显示模块，一个是地图模块，使用Openlayers api的组件化，还和github上的有个OpenLayer封装的做了个对比，我说有一个开源的使用React封装的Openlayers不方便，而且源码不全，我就自己封装了，面试官再次表现出了不太了解React，所以就没有继续追问下去。</p><h1 id="4-对可视化的理解"><a href="#4-对可视化的理解" class="headerlink" title="4.对可视化的理解"></a>4.对可视化的理解</h1><p>估计看了我的博客，我的博客最近写的是WebGL，就问了我对WebGL的理解。<br>理解，这怎么说啊，好难过，我也不知道怎么描述啊。而且我也只是刚看了一个星期的书，还有一个周的Threejs罢了，我就说性能好，但是WebGL书写比较麻烦，所以大家都用Three.js,我也看了部分的Three.js。然后又顺嘴提了下我后面的研究方向， 目前还没有太深的理解（是不是这句话不应该说啊，应该忽悠忽悠的啊），然后就又随口说了下cesium.js,与我们的专业还有点关系–webgis，然后我们会在此基础上扩展。</p><p>总之问我理解，我又给出的印象是我的理解不深，痛心了。<br>然后给了个更大的题目，对可视化的理解，这题目呢，怎么说啊。我只能说大数据可视化和canvas，然后举了举例子，ECharts，datav，mapv等，然后说我对这方面挺有兴趣的，忘了面试官说什么了，好像的意思也只是你对这感兴趣，有个方向，没有深耕下去。</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>这可以说是我第一次真正意义上的面试，第一次视频面试，还是阿里的。总之感觉是这次我没戏了，哪怕是个实习面试。看来是要多刷刷面试经验的。</p><p>离远方还是有很多路要走啊，还有两三个月时间，继续加油吧，一定要告诫自己不要气馁，坚持就是胜利。</p><p>简单体会，写至此处，感怀万千。，坚持就是胜利。  简单体会，写至此处，感怀万千。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebGL基础简明教程2-基础知识</title>
      <link href="/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B2-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>上一篇我们介绍了使用WebGL的基础，包括顶点着色器、片元着色器、初始化WebGL，初始化着色器以及变换、动画、颜色、纹理等，这一部分的内容我们就来进入三维的世界。和上一篇文章一样，我们的这篇只做个大概的介绍，详细的内容部分请参阅《WebGL编程指南》一书。</p><p>代码存储在我的<a href="https://github.com/zrysmt/data-viz/tree/master/webgl/demo" target="_blank" rel="noopener">GitHub</a>中。</p><blockquote><p><a href="https://github.com/zrysmt/data-viz/tree/master/webgl/demo" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/tree/master/webgl/demo</a></p></blockquote><p>首先我们来绘制一个三维的实例。<br>示例程序:<a href="https://zrysmt.github.io/demo/webgl-demo/demo/10-HelloCube.html">https://zrysmt.github.io/demo/webgl-demo/demo/10-HelloCube.html</a>.</p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-1.jpg" alt=""></p><p>实例的源码程序:<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/demo/HelloCube.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/demo/HelloCube.js</a><br>其实这里我们应该注意到示例和源码的结构对应，下面的一些我可能只给出一个url地址。</p><h1 id="1-视图、投影和索引矩阵"><a href="#1-视图、投影和索引矩阵" class="headerlink" title="1.视图、投影和索引矩阵"></a>1.视图、投影和索引矩阵</h1><h2 id="从main函数开始"><a href="#从main函数开始" class="headerlink" title="从main函数开始"></a>从main函数开始</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Retrieve &lt;canvas&gt; element</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'webgl'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the rendering context for WebGL</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the rendering context for WebGL'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize shaders</span></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to intialize shaders.'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the vertex coordinates and color</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to set the vertex information'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set clear color and enable hidden surface removal</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the storage location of u_MvpMatrix</span></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">'u_MvpMatrix'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_MvpMatrix) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of u_MvpMatrix'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the eye point and the viewing volume</span></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass the model view projection matrix to u_MvpMatrix</span></span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear color and depth buffer</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Draw the cube</span></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶点着色器和片元着色器"><a href="#顶点着色器和片元着色器" class="headerlink" title="顶点着色器和片元着色器"></a>顶点着色器和片元着色器</h2><p>和上一篇有一些的不同<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">'attribute vec4 a_Position;\n'</span> +</span><br><span class="line">    <span class="string">'attribute vec4 a_Color;\n'</span> +</span><br><span class="line">    <span class="string">'uniform mat4 u_MvpMatrix;\n'</span> +      <span class="comment">//模型矩阵，设置视图/投影</span></span><br><span class="line">    <span class="string">'varying vec4 v_Color;\n'</span> +          <span class="comment">//传值给片元着色器</span></span><br><span class="line">    <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">    <span class="string">'  gl_Position = u_MvpMatrix * a_Position;\n'</span> +</span><br><span class="line">    <span class="string">'  v_Color = a_Color;\n'</span> +</span><br><span class="line">    <span class="string">'&#125;\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">    <span class="string">'#ifdef GL_ES\n'</span> +</span><br><span class="line">    <span class="string">'precision mediump float;\n'</span> +    <span class="comment">//精度限定 中等精度</span></span><br><span class="line">    <span class="string">'#endif\n'</span> +</span><br><span class="line">    <span class="string">'varying vec4 v_Color;\n'</span> +</span><br><span class="line">    <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">    <span class="string">'  gl_FragColor = v_Color;\n'</span> +</span><br><span class="line">    <span class="string">'&#125;\n'</span>;</span><br></pre></td></tr></table></figure></p><p>关于<strong>attribute uniform varying</strong><br><strong>attribute:</strong>只能是全局的，只能出现在顶点着色器，标识逐顶点信息；<br><strong>uniform：</strong>只能是全局的，可以在顶点着色器和片元着色器上，如果两个地方均定义，那么这变量被两个着色器共享了；<br><strong>varying:</strong>只能是全局的，负责从顶点着色器向片元着色器传输数据。  </p><h2 id="视图矩阵-view-matrix"><a href="#视图矩阵-view-matrix" class="headerlink" title="视图矩阵(view matrix)"></a>视图矩阵(view matrix)</h2><p><strong>视点</strong>、<strong>观察点</strong>和<strong>上方向</strong>决定<strong>视图矩阵</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-2.jpg" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    mvpMatrix.setLookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-3.jpg" alt=""></p><h2 id="投影矩阵"><a href="#投影矩阵" class="headerlink" title="投影矩阵"></a>投影矩阵</h2><p>投影的作用就是使得距离近的看的比较大，距离远的看的比较小<br><a href="https://zrysmt.github.io/demo/webgl-demo/demo/8-PerspectiveView.html">示例</a><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-4.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-5.jpg" alt=""><br><strong>三角形与可视空间的位置</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-6.jpg" alt=""><br>其实投影矩阵的核心就是两种变换，1）按比例缩放；2）平移</p><h2 id="消除被遮挡的面"><a href="#消除被遮挡的面" class="headerlink" title="消除被遮挡的面"></a>消除被遮挡的面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.enable(gl.DEPTH_TEST);</span><br></pre></td></tr></table></figure><p>清除颜色和深度buffer<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Clear color and depth buffer </span></span><br><span class="line">gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br></pre></td></tr></table></figure></p><h2 id="重要的公式"><a href="#重要的公式" class="headerlink" title="重要的公式"></a>重要的公式</h2><p>我们总结下一个重要的公式，WebGL绘制物体的位置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;投影矩阵&gt; X &lt;视图矩阵&gt; X  &lt;模型矩阵&gt;  X  &lt;顶点坐标&gt;</span><br></pre></td></tr></table></figure></p><h2 id="绘制立方体"><a href="#绘制立方体" class="headerlink" title="绘制立方体"></a>绘制立方体</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="comment">// Vertex coordinates and color</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="comment">// v0 White</span></span><br><span class="line">        <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v1 Magenta</span></span><br><span class="line">        <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v2 Red</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v3 Yellow</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v4 Green</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="comment">// v5 Cyan</span></span><br><span class="line">        <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v6 Blue</span></span><br><span class="line">        <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span> <span class="comment">// v7 Black</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indices of the vertices</span></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="comment">// front</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="comment">// right</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="comment">// up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="comment">// left</span></span><br><span class="line">        <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="comment">// down</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span> <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> vertexColorBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!vertexColorBuffer || !indexBuffer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="comment">// 存入缓冲：颜色/位置</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line">    <span class="comment">// Assign the buffer object to a_Position and enable the assignment</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">'a_Position'</span>);</span><br><span class="line">    <span class="keyword">if</span> (a_Position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Position'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line">    <span class="comment">// Assign the buffer object to a_Color and enable the assignment</span></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">'a_Color'</span>);</span><br><span class="line">    <span class="keyword">if</span> (a_Color &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Color'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    <span class="comment">// 存入缓冲：索引</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>立方体的结构</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  v6----- v5</span><br><span class="line"> /|      <span class="regexp">/|</span></span><br><span class="line"><span class="regexp">v1------v0|</span></span><br><span class="line"><span class="regexp">| |     | |</span></span><br><span class="line"><span class="regexp">| |v7---|-|v4</span></span><br><span class="line"><span class="regexp">|/</span>      |<span class="regexp">/</span></span><br><span class="line"><span class="regexp">v2------v3</span></span><br></pre></td></tr></table></figure></p><p>首先顶点坐标和顶点坐标的颜色存储在<code>verticesColors</code>矩阵中。<br>而WebGL的绘制是按照三角形的形式一个一个绘制的，那么意味着一个立方体的一个面有两个三角形，一个立方体总共需要2<em>6 = 12个三角形，一个三角形需要3个顶点，那么一共需要绘制 3</em>12 = 36个顶点。我们知道一个立方体只需要8个顶点就可以了。为此我们在这里使用了<strong>索引矩阵</strong>（indices），索引矩阵也要写入缓存中。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-7.jpg" alt=""><br>这样我们就能完成绘制了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>注意这里的<code>n = indices.length</code>。</p><h1 id="2-光照"><a href="#2-光照" class="headerlink" title="2.光照"></a>2.光照</h1><p>我们主要关注下面三种形式的<strong>光照</strong>：</p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-8.jpg" alt=""></p><p>物理表面<strong>反射光线：</strong>分为漫反射和环境反射</p><h2 id="环境反射"><a href="#环境反射" class="headerlink" title="环境反射"></a>环境反射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;环境反射光颜色&gt; = &lt;入射光颜色&gt; X &lt;表面基底色&gt;</span><br></pre></td></tr></table></figure><h2 id="平行光下的漫反射"><a href="#平行光下的漫反射" class="headerlink" title="平行光下的漫反射"></a>平行光下的漫反射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; X &lt;表面基底色&gt; X cosθ</span><br></pre></td></tr></table></figure><p>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; X &lt;表面基底色&gt; X （&lt;光线方向&gt; · &lt;法线方向&gt;）</span><br></pre></td></tr></table></figure></p><p>我们只用漫反射的效果的时候<br><a href="https://zrysmt.github.io/demo/webgl-demo/demo/11-LightedCube.html">示例</a><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-9.png" alt=""><br>由于只考虑漫反射，右边的部分几乎是黑色了，这时候我们来考虑下环境光。<br><strong>环境反射下的表面的反射光颜色</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;表面的反射光颜色&gt; = &lt;漫反射颜色&gt; + &lt;环境反射光颜色&gt;</span><br></pre></td></tr></table></figure></p><p><a href="https://zrysmt.github.io/demo/webgl-demo/demo/13-LightedCube_ambient.html">示例</a><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-10.png" alt=""><br>我们来看下着色器源码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">'attribute vec4 a_Position;\n'</span> +</span><br><span class="line">  <span class="string">'attribute vec4 a_Color;\n'</span> +        <span class="comment">//表面颜色</span></span><br><span class="line">  <span class="string">'attribute vec4 a_Normal;\n'</span> +       <span class="comment">// 表面法向量</span></span><br><span class="line">  <span class="string">'uniform mat4 u_MvpMatrix;\n'</span> +</span><br><span class="line">  <span class="string">'uniform vec3 u_DiffuseLight;\n'</span> +   <span class="comment">// 漫反射光颜色</span></span><br><span class="line">  <span class="string">'uniform vec3 u_LightDirection;\n'</span> + <span class="comment">// 漫反射入射光方向 (in the world coordinate, normalized)归一化后</span></span><br><span class="line">  <span class="string">'uniform vec3 u_AmbientLight;\n'</span> +   <span class="comment">// 环境光颜色</span></span><br><span class="line">  <span class="string">'varying vec4 v_Color;\n'</span> +</span><br><span class="line">  <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">  <span class="string">'  gl_Position = u_MvpMatrix * a_Position;\n'</span> +</span><br><span class="line">     <span class="comment">// 归一化方向量</span></span><br><span class="line">  <span class="string">'  vec3 normal = normalize(a_Normal.xyz);\n'</span> +</span><br><span class="line">     <span class="comment">// &lt;归一化的光线方向&gt; 点乘 &lt;归一化法线向量&gt;</span></span><br><span class="line">  <span class="string">'  float nDotL = max(dot(u_LightDirection, normal), 0.0);\n'</span> +</span><br><span class="line">     <span class="comment">// 计算漫反射颜色</span></span><br><span class="line">  <span class="string">'  vec3 diffuse = u_DiffuseLight * a_Color.rgb * nDotL;\n'</span> +</span><br><span class="line">     <span class="comment">// 计算环境光颜色</span></span><br><span class="line">  <span class="string">'  vec3 ambient = u_AmbientLight * a_Color.rgb;\n'</span> +</span><br><span class="line">     <span class="comment">// 两者相加得到物体最终的颜色</span></span><br><span class="line">  <span class="string">'  v_Color = vec4(diffuse + ambient, a_Color.a);\n'</span> + </span><br><span class="line">  <span class="string">'&#125;\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">  <span class="string">'#ifdef GL_ES\n'</span> +</span><br><span class="line">  <span class="string">'precision mediump float;\n'</span> +</span><br><span class="line">  <span class="string">'#endif\n'</span> +</span><br><span class="line">  <span class="string">'varying vec4 v_Color;\n'</span> +</span><br><span class="line">  <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">  <span class="string">'  gl_FragColor = v_Color;\n'</span> +</span><br><span class="line">  <span class="string">'&#125;\n'</span>;</span><br></pre></td></tr></table></figure></p><p>对于变化后的物体，物体的法向量也会改变<br><a href="https://zrysmt.github.io/demo/webgl-demo/demo/14-LightedTranslatedRotatedCube.html">示例</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;变换后的法向量&gt; = &lt;法向量&gt; X &lt;变化矩阵的逆转置矩阵&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">normalMatrix.setInverseOf(modelMatrix); </span><br><span class="line">normalMatrix.transpose(); </span><br><span class="line">gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br></pre></td></tr></table></figure><p>在顶点着色器中变化原法向量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal))</span><br></pre></td></tr></table></figure></p><p> 最后我们来看下最终的<strong>漫反射光颜色</strong>的公式<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; X &lt;表面基底色&gt; X （&lt;光线方向&gt; ·（&lt;模型矩阵逆转置矩阵&gt; X &lt;法线方向&gt;））</span><br></pre></td></tr></table></figure></p><h2 id="点光源"><a href="#点光源" class="headerlink" title="点光源"></a>点光源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">光线方向 = 归一化（点光源方向 - 顶点坐标）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 顶点处的光线方向 = 点光源的光坐标 - 顶点坐标 </span><br><span class="line"> &apos; vec3 lightDirection = normalize(u_LightPosition - vec3(vertexPosition));\n&apos;</span><br></pre></td></tr></table></figure><h1 id="3-层次模型"><a href="#3-层次模型" class="headerlink" title="3.层次模型"></a>3.层次模型</h1><p>有的物体的运动会带动别的物体，如上臂的运动会带动下臂和手掌的运动。</p><p>示例:<a href="https://zrysmt.github.io/demo/webgl-demo/ch09/JointModel.html">https://zrysmt.github.io/demo/webgl-demo/ch09/JointModel.html</a><br>示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch09/JointModel.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch09/JointModel.js</a></p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/2-11.png" alt=""><br>下边的(Arm1)会带动上边的(Arm2)运动，而上边的运动不会带动下边的。</p><p>思路：共用一个变换的模型矩阵：<code>g_modelMatrix</code>,Arm1变化<code>g_modelMatrix</code>也会变化，那么Arm2也会使用这个模型。谁能控制谁，关键是谁先写上去，谁后写上去，先写上去的控制后写上去的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Arm1 </span></span><br><span class="line"><span class="keyword">var</span> arm1Length = <span class="number">10.0</span>; <span class="comment">// Length of arm1 </span></span><br><span class="line">g_modelMatrix.setTranslate(<span class="number">0.0</span>, <span class="number">-12.0</span>, <span class="number">0.0</span>); </span><br><span class="line">g_modelMatrix.rotate(g_arm1Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>); <span class="comment">// Rotate around the y-axis </span></span><br><span class="line">drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw |</span></span><br><span class="line"><span class="comment">// Arm2 </span></span><br><span class="line">g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>); 　　　<span class="comment">// Move to joint1 </span></span><br><span class="line">g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>); <span class="comment">// Rotate around the z-axis </span></span><br><span class="line">g_modelMatrix.scale(<span class="number">1.3</span>, <span class="number">1.0</span>, <span class="number">1.3</span>); <span class="comment">// Make it a little thicker </span></span><br><span class="line">drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br></pre></td></tr></table></figure></p><h1 id="4-几个高级功能的实例"><a href="#4-几个高级功能的实例" class="headerlink" title="4.几个高级功能的实例"></a>4.几个高级功能的实例</h1><ul><li><a href="https://zrysmt.github.io/demo/webgl-demo/ch10/RotateObject.html">鼠标控制物体的旋转</a></li><li><a href="https://zrysmt.github.io/demo/webgl-demo/ch10/PickObject.html">是否选中物体</a></li><li><a href="https://zrysmt.github.io/demo/webgl-demo/ch10/HUD.html">HUD，结合canvas绘制文本</a></li><li><a href="https://zrysmt.github.io/demo/webgl-demo/ch10/Fog.html">雾化</a></li><li><a href="https://zrysmt.github.io/demo/webgl-demo/ch10/Shadow.html">绘制阴影</a></li><li><a href="https://zrysmt.github.io/demo/webgl-demo/ch10/OBJViewer.html">加载三维obj文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebGL基础简明教程1-简介</title>
      <link href="/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B1-%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/05/17/WebGL%E5%9F%BA%E7%A1%80%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B1-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>我也是个初学WebGL的人，这部分的内容是我在看完《WebGL编程指南》一书后的精简教程。看完之后我对三维世界重建了一些观念，这篇文章是尽量在有限的内容中，一下介绍几个重要的基本的概念，后面我会分几篇再详细介绍几个重要的概念。</p><p>WebGL是利用HTML5的canvas绘制和渲染三维图形，再现代的浏览器中均支持。WebGL是从OpenGL ES中继承过来的。</p><p>代码存储在我的<a href="https://github.com/zrysmt/data-viz/tree/master/webgl/demo" target="_blank" rel="noopener">GitHub</a>中。</p><blockquote><p><a href="https://github.com/zrysmt/data-viz/tree/master/webgl/demo" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/tree/master/webgl/demo</a></p></blockquote><p>首先我们来绘制一个二维的实例，点击的时候绘制一个点。<br>示例程序:<a href="https://zrysmt.github.io/demo/webgl-demo/demo/0-simple.html">https://zrysmt.github.io/demo/webgl-demo/demo/0-simple.html</a>.</p><h1 id="1-WebGL二维：一次绘制一个点"><a href="#1-WebGL二维：一次绘制一个点" class="headerlink" title="1.WebGL二维：一次绘制一个点"></a>1.WebGL二维：一次绘制一个点</h1><h2 id="html片段"><a href="#html片段" class="headerlink" title="html片段"></a>html片段</h2><p>注意WebGL canvas的坐标（右，z轴垂直屏幕向外）和二维canvas（左）不一样。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-1.jpg" alt=""><br>html片段很简单，我们使用就是canvas元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"main()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"webgl"</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span></span><br><span class="line">        Please use a browser that supports "canvas"</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="WebGL执行流程"><a href="#WebGL执行流程" class="headerlink" title="WebGL执行流程"></a>WebGL执行流程</h2><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-2.jpg" alt=""></p><h2 id="从main函数开始"><a href="#从main函数开始" class="headerlink" title="从main函数开始"></a>从main函数开始</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'webgl'</span>);</span><br><span class="line">    <span class="comment">//初始化WebGL</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the rendering context for WebGL'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to intialize shaders.'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取a_Position的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">'a_Position'</span>);</span><br><span class="line">    <span class="keyword">if</span> (a_Position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Position'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册鼠标点击事件</span></span><br><span class="line">    canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        click(ev, gl, canvas, a_Position);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置&lt;canvas&gt;背景色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h2><p>用来描述顶点的特性（如位置、颜色等）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">'attribute vec4 a_Position;\n'</span> +</span><br><span class="line">  <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">  <span class="string">'  gl_Position = a_Position;\n'</span> +</span><br><span class="line">  <span class="string">'  gl_PointSize = 10.0;\n'</span> +</span><br><span class="line">  <span class="string">'&#125;\n'</span>;</span><br></pre></td></tr></table></figure></p><p>是一种类似C的语言。a_Position是一个attribute变量，vec4表示有四个浮点数组成的矢量。</p><h2 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h2><p>进行逐片处理的过程如光照<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">   <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">   <span class="string">'  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n'</span> +</span><br><span class="line">   <span class="string">'&#125;\n'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="使用顶点着色器和片元着色器"><a href="#使用顶点着色器和片元着色器" class="headerlink" title="使用顶点着色器和片元着色器"></a>使用顶点着色器和片元着色器</h2><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-3.jpg" alt=""></p><h2 id="初始化着色器"><a href="#初始化着色器" class="headerlink" title="初始化着色器"></a>初始化着色器</h2><p>这部分的代码也是通用的，流程如下,具体代码我们在我的github中查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 1.创建着色器对象(gl.createShader())</span><br><span class="line">* 2.向着色器对象中填充着色器程序的源代码(gl.shaderSource())</span><br><span class="line">* 3.编译着色器(gl.compileShader())</span><br><span class="line">* 4.创建程序对象(gl.createProgram())</span><br><span class="line">* 5.为程序对象分配着色器(gl.attachShader())</span><br><span class="line">* 6.连接程序对象(gl.linkProgram())</span><br><span class="line">* 7.使用程序对象(gl.useProgram())</span><br></pre></td></tr></table></figure></p><h2 id="注册鼠标点击事件"><a href="#注册鼠标点击事件" class="headerlink" title="注册鼠标点击事件"></a>注册鼠标点击事件</h2><p>注册鼠标事件，然后对坐标进行处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">       click(ev, gl, canvas, a_Position);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意要转化为WebGL的坐标。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">ev, gl, canvas, a_Position</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = ev.clientX; <span class="comment">// 鼠标的x坐标</span></span><br><span class="line">    <span class="keyword">var</span> y = ev.clientY; <span class="comment">// 鼠标的y坐标</span></span><br><span class="line">    <span class="keyword">var</span> rect = ev.target.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">    x = ((x - rect.left) - canvas.width / <span class="number">2</span>) / (canvas.width / <span class="number">2</span>); <span class="comment">//处理后相得canvas的x坐标</span></span><br><span class="line">    y = (canvas.height / <span class="number">2</span> - (y - rect.top)) / (canvas.height / <span class="number">2</span>); <span class="comment">//处理后相得canvas的y坐标</span></span><br><span class="line">    g_points.push(x);</span><br><span class="line">    g_points.push(y);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = g_points.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 将顶点位置传给attribute变量a_Position</span></span><br><span class="line">        gl.vertexAttrib3f(a_Position, g_points[i], g_points[i + <span class="number">1</span>], <span class="number">0.0</span>);</span><br><span class="line">        <span class="comment">// 绘制</span></span><br><span class="line">        gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-4.jpg" alt=""><br>指定第一个参数可以绘制线或三角形，具体的这几个有什么意义，可以查看<a href="https://github.com/zrysmt/data-viz/tree/master/webgl/demo" target="_blank" rel="noopener">github</a>中示例的源码。</p><h1 id="2-WebGL二维：绘制多个点"><a href="#2-WebGL二维：绘制多个点" class="headerlink" title="2.WebGL二维：绘制多个点"></a>2.WebGL二维：绘制多个点</h1><p>一次性的将全部的点传给顶点着色器，这个时候就需要用到了<strong>缓冲对象</strong>。<br>我们以绘制个三角形为例（一次性至少传入三个点），示例程序：<a href="https://zrysmt.github.io/demo/webgl-demo/ch03/HelloTriangle.html">https://zrysmt.github.io/demo/webgl-demo/ch03/HelloTriangle.html</a>。<br>效果如下所示：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-5.png" alt=""><br>对应的源码位置：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/HelloTriangle.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/HelloTriangle.js</a></p><h2 id="创建缓冲区对象"><a href="#创建缓冲区对象" class="headerlink" title="创建缓冲区对象"></a>创建缓冲区对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">0.5</span>,   <span class="number">-0.5</span>, <span class="number">-0.5</span>,   <span class="number">0.5</span>, <span class="number">-0.5</span></span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">3</span>; <span class="comment">// The number of vertices</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建缓冲区对象</span></span><br><span class="line">  <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">  <span class="keyword">if</span> (!vertexBuffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to create the buffer object'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line">  <span class="comment">// 写入数据</span></span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">'a_Position'</span>);</span><br><span class="line">  <span class="keyword">if</span> (a_Position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Position'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 缓冲区对象传给a_Position变量</span></span><br><span class="line">  gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启用</span></span><br><span class="line">  gl.enableVertexAttribArray(a_Position);</span><br><span class="line"> <span class="comment">//顶点个数</span></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-WebGL二维-变换与动画"><a href="#3-WebGL二维-变换与动画" class="headerlink" title="3.WebGL二维-变换与动画"></a>3.WebGL二维-变换与动画</h1><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>学过线性代数的都知道矢量的变化是可以通过矩阵（4 X 4的，可以容纳下三种变化）完成的。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-6.jpg" alt=""></p><p>我们来看顶点着色器代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">'attribute vec4 a_Position;\n'</span> +</span><br><span class="line">  <span class="string">'uniform mat4 u_xformMatrix;\n'</span> +</span><br><span class="line">  <span class="string">'void main() &#123;\n'</span> +</span><br><span class="line">  <span class="string">'  gl_Position = u_xformMatrix * a_Position;\n'</span> +</span><br><span class="line">  <span class="string">'&#125;\n'</span>;</span><br></pre></td></tr></table></figure></p><p>u_xformMatrix就是变化的矩阵。<br>旋转示例：<a href="https://zrysmt.github.io/demo/webgl-demo/ch03/RotatedTriangle_Matrix.html">https://zrysmt.github.io/demo/webgl-demo/ch03/RotatedTriangle_Matrix.html</a><br>旋转示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/RotatedTriangle_Matrix.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/RotatedTriangle_Matrix.js</a><br>缩放示例：<a href="https://zrysmt.github.io/demo/webgl-demo/ch03/ScaledTriangle_Matrix.html">https://zrysmt.github.io/demo/webgl-demo/ch03/ScaledTriangle_Matrix.html</a><br>缩放示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/ScaledTriangle_Matrix.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/ScaledTriangle_Matrix.js</a><br>平移示例：<a href="https://zrysmt.github.io/demo/webgl-demo/ch03/TranslatedTriangle.html">https://zrysmt.github.io/demo/webgl-demo/ch03/TranslatedTriangle.html</a><br>平移示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/TranslatedTriangle.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch03/TranslatedTriangle.js</a></p><p><strong>注意：</strong>以后关于矩阵的运算我们使用源码提供的库。旋转使用<code>setRotate</code>,<code>rotate</code>;平移使用<code>setTranslate</code>，<code>translate</code>;缩放使用<code>setScale</code>,<code>scale</code>.<br>这部分的使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formatMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    formatMatrix.setRotate(ANGLE,<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//绕z轴旋转ANGLE度数</span></span><br><span class="line">    formatMatrix.translate(Tx,Ty,Tz);   <span class="comment">//x,y,z轴上平移</span></span><br></pre></td></tr></table></figure></p><p>第一个都要是带z的方法，后面的都不带即可。</p><blockquote><p><a href="https://github.com/zrysmt/data-viz/blob/master/webgl/lib/cuon-matrix.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/lib/cuon-matrix.js</a></p></blockquote><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画的原理是使用HTML5 requestAnimationFrame()方法重绘WebGL图形。<br>示例：<a href="https://zrysmt.github.io/demo/webgl-demo/ch04/RotatingTriangle_withButtons.html">https://zrysmt.github.io/demo/webgl-demo/ch04/RotatingTriangle_withButtons.html</a><br>示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch04/RotatingTriangle_withButtons.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch04/RotatingTriangle_withButtons.js</a></p><h1 id="4-WebGL二维-颜色与纹理"><a href="#4-WebGL二维-颜色与纹理" class="headerlink" title="4.WebGL二维-颜色与纹理"></a>4.WebGL二维-颜色与纹理</h1><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>示例：<a href="https://zrysmt.github.io/demo/webgl-demo/ch05/ColoredTriangle.html">https://zrysmt.github.io/demo/webgl-demo/ch05/ColoredTriangle.html</a><br>示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch05/ColoredTriangle.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch05/ColoredTriangle.js</a></p><p><strong>大概流程</strong>是这样的：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webgl/1-7.jpg" alt=""><br>顶点坐标==&gt;图形装配==&gt;光栅化==&gt;执行片元着色器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var verticesColors = new Float32Array([</span><br><span class="line">  //  坐标x,坐标y，颜色r，g，b</span><br><span class="line">   0.0,  0.5,  1.0,  0.0,  0.0, </span><br><span class="line">  -0.5, -0.5,  0.0,  1.0,  0.0, </span><br><span class="line">   0.5, -0.5,  0.0,  0.0,  1.0, </span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p><p>initVertexBuffers函数对整个矩阵的处理,位置和颜色分别分配给a_Position和a_Color<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, FSIZE * 5, 0);</span><br><span class="line">gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 5, FSIZE * 2);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="comment">// Vertex coordinates and color</span></span><br><span class="line">     <span class="number">0.0</span>,  <span class="number">0.5</span>,  <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="number">0.0</span>, </span><br><span class="line">    <span class="number">-0.5</span>, <span class="number">-0.5</span>,  <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.0</span>, </span><br><span class="line">     <span class="number">0.5</span>, <span class="number">-0.5</span>,  <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="number">1.0</span>, </span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">var</span> vertexColorBuffer = gl.createBuffer();  </span><br><span class="line">  <span class="keyword">if</span> (!vertexColorBuffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to create the buffer object'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bind the buffer object to target</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line">  <span class="comment">//Get the storage location of a_Position, assign and enable buffer</span></span><br><span class="line">  <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">'a_Position'</span>);</span><br><span class="line">  <span class="keyword">if</span> (a_Position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Position'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  gl.enableVertexAttribArray(a_Position);  <span class="comment">// Enable the assignment of the buffer object</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the storage location of a_Position, assign buffer and enable</span></span><br><span class="line">  <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">'a_Color'</span>);</span><br><span class="line">  <span class="keyword">if</span>(a_Color &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to get the storage location of a_Color'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">5</span>, FSIZE * <span class="number">2</span>);</span><br><span class="line">  gl.enableVertexAttribArray(a_Color);  <span class="comment">// Enable the assignment of the buffer object</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Unbind the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h2><p>示例：<a href="https://zrysmt.github.io/demo/webgl-demo/ch05/TexturedQuad.html">https://zrysmt.github.io/demo/webgl-demo/ch05/TexturedQuad.html</a><br>示例源码：<a href="https://github.com/zrysmt/data-viz/blob/master/webgl/ch05/TexturedQuad.js" target="_blank" rel="noopener">https://github.com/zrysmt/data-viz/blob/master/webgl/ch05/TexturedQuad.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();  <span class="comment">// Create the image object</span></span><br><span class="line">  <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Failed to create the image object'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Register the event handler to be called on loading an image</span></span><br><span class="line">  image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; loadTexture(gl, n, texture, u_Sampler, image); &#125;;</span><br><span class="line">  <span class="comment">// Tell the browser to load an image</span></span><br><span class="line">  image.src = <span class="string">'../resources/sky.jpg'</span>;</span><br></pre></td></tr></table></figure><p>逻辑函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadTexture</span>(<span class="params">gl, n, texture, u_Sampler, image</span>) </span>&#123;</span><br><span class="line">  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>); <span class="comment">// Flip the image's y axis</span></span><br><span class="line">  <span class="comment">// Enable texture unit0</span></span><br><span class="line">  gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">  <span class="comment">// Bind the texture object to the target</span></span><br><span class="line">  gl.bindTexture(gl.TEXTURE_2D, texture);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the texture parameters</span></span><br><span class="line">  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">  <span class="comment">// Set the texture image</span></span><br><span class="line">  gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Set the texture unit 0 to the sampler</span></span><br><span class="line">  gl.uniform1i(u_Sampler, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT);   <span class="comment">// Clear &lt;canvas&gt;</span></span><br><span class="line"></span><br><span class="line">  gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n); <span class="comment">// Draw the rectangle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三维单独写一篇介绍。</p><p><strong>参考阅读：</strong></p><ul><li><a href="">WebGL权威指南</a></li><li><a href="http://blog.csdn.net/lh1162810317/article/details/50827948" target="_blank" rel="noopener">webgl开源三维引擎的选择</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API" target="_blank" rel="noopener">MDN-WebGl API</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial" target="_blank" rel="noopener">MDN-WebGL 中文教程</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用leaflet或者openlayers 3 调用MapServer服务最佳实践完整说明</title>
      <link href="/2017/05/04/%E4%BD%BF%E7%94%A8leaflet%E6%88%96%E8%80%85openlayers-3-%E8%B0%83%E7%94%A8MapServer%E6%9C%8D%E5%8A%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%AE%8C%E6%95%B4%E8%AF%B4%E6%98%8E/"/>
      <url>/2017/05/04/%E4%BD%BF%E7%94%A8leaflet%E6%88%96%E8%80%85openlayers-3-%E8%B0%83%E7%94%A8MapServer%E6%9C%8D%E5%8A%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%AE%8C%E6%95%B4%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>最近尝试了很多次，看到网上的很多教程都是版本比较老旧，会出现很多问题。经过数天的实践，现在可以调用成功，遂将步骤记录在此。<br>为避免以后使用的软件不兼容，首先给出基于window 10的软件版本：</p><ul><li>MapServer服务器  3.2.1 <a href="http://www.ms4w.com/release/ms4w-3.2.1-setup.exe" target="_blank" rel="noopener">ms4w-3.2.1-setup.exe</a></li></ul><blockquote><p><a href="http://www.ms4w.com/" target="_blank" rel="noopener">http://www.ms4w.com/</a></p></blockquote><ul><li>QGIS 2.18 <a href="http://www.qgis.org/en/site/forusers/download.html" target="_blank" rel="noopener">osgeo4w-setup-x86_64.exe</a></li></ul><blockquote><p><a href="http://www.qgis.org/en/site/forusers/download.html" target="_blank" rel="noopener">http://www.qgis.org/en/site/forusers/download.html</a></p></blockquote><hr><p>所有配置和示例我都放在了github仓库中<a href="https://github.com/zrysmt/mapserver-leaflet-openlayers" target="_blank" rel="noopener">mapserver-leaflet-openlayers</a>。</p><blockquote><p><a href="https://github.com/zrysmt/mapserver-leaflet-openlayers" target="_blank" rel="noopener">https://github.com/zrysmt/mapserver-leaflet-openlayers</a></p></blockquote><h1 id="1-安装说明"><a href="#1-安装说明" class="headerlink" title="1.安装说明"></a>1.安装说明</h1><h2 id="1-1-ms4w-3-2-1-setup-exe"><a href="#1-1-ms4w-3-2-1-setup-exe" class="headerlink" title="1.1 ms4w-3.2.1-setup.exe"></a>1.1 ms4w-3.2.1-setup.exe</h2><p>Windows平台MapServer （MS4W）安装<a href="http://mapserver.org/de/introduction.html" target="_blank" rel="noopener">Windows平台MapServer （MS4W）安装</a></p><blockquote><p><a href="http://blog.csdn.net/u010924834/article/details/53434322" target="_blank" rel="noopener">http://blog.csdn.net/u010924834/article/details/53434322</a><br><a href="http://mapserver.org/de/introduction.html" target="_blank" rel="noopener">http://mapserver.org/de/introduction.html</a></p></blockquote><p>MapServer的安装包（ms4w.zip,解压到根目录下）里内置了<strong>Apache</strong>，不过因为IIS占用了80的端口，所以需要设置下端口 （在\ms4w\Apache\conf\ httpd.conf中，将Listen 80改为Listen 8081）</p><h2 id="1-2-osgeo4w-setup-x86-64-exe"><a href="#1-2-osgeo4w-setup-x86-64-exe" class="headerlink" title="1.2 osgeo4w-setup-x86_64.exe"></a>1.2 osgeo4w-setup-x86_64.exe</h2><p>因为刚开始值安装了Destop桌面端，后来出了问题，无奈废了很大的劲又卸载了重新安装的。这里建议全部安装，选择<code>Advanced Install</code> 点击选择全部安装即可。</p><h2 id="1-3-QGIS几个重要的插件"><a href="#1-3-QGIS几个重要的插件" class="headerlink" title="1.3 QGIS几个重要的插件"></a>1.3 QGIS几个重要的插件</h2><p>安装插件<br>qGIS菜单栏plugin–&gt;Manager and Install Plugin<br><strong>1.qgis2web</strong><br>会导出一个完整的网页结构<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/1.png" alt=""><br>【Update perview】可以更换坐标系<br>【Export】导出即可</p><p>导出后会打开一个网页，我们需要的是data文件夹下的js，里面有geoJson数据</p><p><strong>2.RT Mapfile Export</strong><br>这是我们发布地图服务的重要的插件</p><p>使用插件的时候注意先设置好，打开<code>Manager and Install Plugin</code>对话框，注意在设置中勾选住实验性的插件一项，再搜索插件并进行安装。</p><h1 id="2-发布服务"><a href="#2-发布服务" class="headerlink" title="2.发布服务"></a>2.发布服务</h1><p>安装好<code>RT Mapfile Export</code>插件后，我们就可以使用QGIS导出Mapfile文件用来发布服务了。<br><strong>坐标系</strong><br>首先重要的一点是坐标系一定要选择好。如果不满足，可以使用QGIS工具<code>Reproject Layer</code>转换坐标系。目前常用的是EPSG：3857 墨卡托坐标系和EPSG：4326 WGS84坐标系，这里我们就以3857坐标系为例。</p><p><strong>MapFile</strong><br>在发布服务方面，MapServer有一个和mxd（ArcGIS）类似的map文件来描述地图的图层及样式，不同的是，在使用地图服务的时候，调用的url中需要知道map文件的位置，而ArcGIS则不需要</p><p>关于MapFile,这里就不单独介绍太多，Mapfile的作用如下图所示。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/2-1.png" alt=""><br>基本介绍：<br><a href="http://blog.csdn.net/qingyafan/article/details/46500127" target="_blank" rel="noopener">http://blog.csdn.net/qingyafan/article/details/46500127</a><br>MapServer 快速入门文档：<br><a href="http://live.osgeo.org/zh/quickstart/mapserver_quickstart.html" target="_blank" rel="noopener">http://live.osgeo.org/zh/quickstart/mapserver_quickstart.html</a></p><p><strong>发布过程</strong><br>因为我把发布的服务器端口改为8000了，所以<code>Online resource url</code>地址是<code>http://127.0.0.1:8000/cgi-bin/mapserv.exe</code><br>1.<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/2-2.png" alt=""><br>2.<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/2-3.png" alt=""><br>3.<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/2-4.png" alt=""><br>【确定】即可生成mapfile文件，在本文末尾会给出.<br>mapfile文件地址在<code>E:\ms4w\apps\worldmap</code>中。<br>我们在浏览器中输入地址<code>http://127.0.0.1:8000/cgi-bin/mapserv.exe?MAP=E:/ms4w/apps/worldmap/world3857.map&amp;LAYERS=World_region&amp;MODE=MAP</code><br><strong>注意:</strong>在使用类库调用该WMS服务的时候一定要去掉<code>&amp;MODE=MAP</code>,否则不能成功。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/2-5.png" alt=""></p><h1 id="3-使用leaflet或openlayers调用"><a href="#3-使用leaflet或openlayers调用" class="headerlink" title="3.使用leaflet或openlayers调用"></a>3.使用leaflet或openlayers调用</h1><p>leaflet示例如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>leaflet加载MapServer示例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel="stylesheet" href="../app/common/css/leaflet.css"&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/leaflet/1.0.3/leaflet.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 600px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/leaflet/1.0.3/leaflet-src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="../app/common/leaflet-plugin/leaflet-src.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = L.map(<span class="string">'map'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        crs: L.CRS.EPSG3857</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    map.setView([30, 104], 2);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// let map = L.map('map').setView([30, 104], 10); //默认墨卡托投影 ESPG：3857</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//http://127.0.0.1:8000/cgi-bin/mapserv.exe?MAP=E:/ms4w/apps/test/test.map&amp;LAYERS=ALL&amp;MODE=MAP</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//一定不要有&amp;MODE=MAP</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myDemo = L.tileLayer.wms(<span class="string">"http://127.0.0.1:8000/cgi-bin/mapserv.exe?MAP=E:/ms4w/apps/worldmap/world3857.map"</span>, &#123;</span></span><br><span class="line"><span class="javascript">        layers: <span class="string">'World_region'</span>,</span></span><br><span class="line"><span class="javascript">        format: <span class="string">'image/png'</span>,</span></span><br><span class="line"><span class="javascript">        transparent: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">        crs: L.CRS.EPSG3857,</span></span><br><span class="line"><span class="javascript">        attribution: <span class="string">"自定义地图"</span>,</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    myDemo.addTo(map);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>访问示例如下：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/3-1.png" alt=""><br>openlayers示例如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>openlayers 3加载MapServer示例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://openlayers.org/en/v4.1.1/css/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#map</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 600px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://openlayers.org/en/v4.1.1/build/ol.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> layers = [</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">        &#125;),</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">            source: <span class="keyword">new</span> ol.source.TileWMS(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">'http://127.0.0.1:8000/cgi-bin/mapserv.exe'</span>,</span></span><br><span class="line"><span class="undefined">                params: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="string">'layers'</span>: <span class="string">'World_region'</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">'MAP'</span>: <span class="string">"E:/ms4w/apps/worldmap/world3857.map"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">'TILED'</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                serverType: <span class="string">'mapserver'</span>,</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    ];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">        target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="undefined">        layers: layers,</span></span><br><span class="line"><span class="javascript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">            center: ol.proj.fromLonLat([104, 30]),</span></span><br><span class="line"><span class="undefined">            zoom: 2,</span></span><br><span class="line"><span class="javascript">            projection: <span class="string">'EPSG:3857'</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>访问示例如下：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/mapserver/3-2.png" alt=""></p><h1 id="4-附录：mapfile文件world3857-map"><a href="#4-附录：mapfile文件world3857-map" class="headerlink" title="4.附录：mapfile文件world3857.map"></a>4.附录：mapfile文件world3857.map</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">MAP</span><br><span class="line">  FONTSET &quot;E:/ms4w/apps/etc/fonts.txt&quot;</span><br><span class="line">  EXTENT -179.99942 -59.484295 180 83.627357</span><br><span class="line">  IMAGETYPE &quot;png&quot;</span><br><span class="line">  NAME &quot;QGIS--MAP&quot;</span><br><span class="line">  SHAPEPATH &quot;E:/ms4w/apps/data/worldmap3857&quot;</span><br><span class="line">  SIZE 800 800</span><br><span class="line">  STATUS ON</span><br><span class="line">  UNITS DD</span><br><span class="line"></span><br><span class="line">  OUTPUTFORMAT</span><br><span class="line">    NAME &quot;png&quot;</span><br><span class="line">    MIMETYPE &quot;image/png&quot;</span><br><span class="line">    DRIVER &quot;AGG/PNG&quot;</span><br><span class="line">    EXTENSION &quot;png&quot;</span><br><span class="line">    IMAGEMODE RGB</span><br><span class="line">    TRANSPARENT FALSE</span><br><span class="line">  END # OUTPUTFORMAT</span><br><span class="line"></span><br><span class="line">  PROJECTION</span><br><span class="line">    &quot;proj=longlat&quot;</span><br><span class="line">    &quot;datum=WGS84&quot;</span><br><span class="line">    &quot;no_defs&quot;</span><br><span class="line">    &quot;init=epsg:3857&quot;</span><br><span class="line">  END # PROJECTION</span><br><span class="line">  LEGEND</span><br><span class="line">    KEYSIZE 20 20</span><br><span class="line">    KEYSPACING 5 5</span><br><span class="line">    LABEL</span><br><span class="line">      SIZE MEDIUM</span><br><span class="line">      OFFSET 0 0</span><br><span class="line">      SHADOWSIZE 1 1</span><br><span class="line">      TYPE BITMAP</span><br><span class="line">    END # LABEL</span><br><span class="line">    STATUS OFF</span><br><span class="line">  END # LEGEND</span><br><span class="line"></span><br><span class="line">  QUERYMAP</span><br><span class="line">    SIZE -1 -1</span><br><span class="line">    STATUS OFF</span><br><span class="line">    STYLE HILITE</span><br><span class="line">  END # QUERYMAP</span><br><span class="line"></span><br><span class="line">  SCALEBAR</span><br><span class="line">    INTERVALS 4</span><br><span class="line">    LABEL</span><br><span class="line">      SIZE MEDIUM</span><br><span class="line">      OFFSET 0 0</span><br><span class="line">      SHADOWSIZE 1 1</span><br><span class="line">      TYPE BITMAP</span><br><span class="line">    END # LABEL</span><br><span class="line">    SIZE 200 3</span><br><span class="line">    STATUS OFF</span><br><span class="line">    UNITS MILES</span><br><span class="line">  END # SCALEBAR</span><br><span class="line"></span><br><span class="line">  WEB</span><br><span class="line">    FOOTER &quot;&quot;</span><br><span class="line">    HEADER &quot;&quot;</span><br><span class="line">    IMAGEPATH &quot;E:/ms4w/tmp/ms_tmp/&quot;</span><br><span class="line">    TEMPPATH &quot;E:/ms4w/tmp/&quot;</span><br><span class="line">    IMAGEURL &quot;/tmp/&quot;</span><br><span class="line">    METADATA</span><br><span class="line">      &quot;wms_onlineresource&quot; &quot;http://127.0.0.1:8000/cgi-bin/mapserv.exe?map=E:/ms4w/apps/test2/test2.map&quot;</span><br><span class="line">      &quot;wms_enable_request&quot; &quot;*&quot;</span><br><span class="line">      &quot;wms_srs&quot; &quot;EPSG:3857&quot;</span><br><span class="line">      &quot;wms_feature_info_mime_type&quot; &quot;text/html&quot;</span><br><span class="line">      &quot;wms_format&quot; &quot;image/png&quot;</span><br><span class="line">    END # METADATA</span><br><span class="line">    TEMPLATE &quot;E:/ms4w/apps/test2/test.map.html.tmpl&quot;</span><br><span class="line">  END # WEB</span><br><span class="line"></span><br><span class="line">  LAYER</span><br><span class="line">    DATA &quot;E:/ms4w/apps/data/worldmap3857/World_region.shp&quot;</span><br><span class="line">    EXTENT -20037443.7774846 -8285806.11600741 20037508.3427892 18422153.0437227</span><br><span class="line">    METADATA</span><br><span class="line">      &quot;ows_include_items&quot;    &quot;all&quot;</span><br><span class="line">      &quot;ows_extent&quot;    &quot;-20037443.7775 -8285806.11601 20037508.3428 18422153.0437&quot;</span><br><span class="line">      &quot;ows_srs&quot;    &quot;EPSG:3857&quot;</span><br><span class="line">      &quot;ows_title&quot;    &quot;World_region&quot;</span><br><span class="line">      &quot;wms_getfeatureinfo_formatlist&quot;    &quot;OGRGML&quot;</span><br><span class="line">      &quot;wms_bbox_extended&quot;    &quot;true&quot;</span><br><span class="line">      &quot;gml_include_items&quot;    &quot;all&quot;</span><br><span class="line">    END # METADATA</span><br><span class="line">    NAME &quot;World_region&quot;</span><br><span class="line">    PROJECTION</span><br><span class="line">      &quot;proj=merc&quot;</span><br><span class="line">      &quot;a=6378137&quot;</span><br><span class="line">      &quot;b=6378137&quot;</span><br><span class="line">      &quot;lat_ts=0.0&quot;</span><br><span class="line">      &quot;lon_0=0.0&quot;</span><br><span class="line">      &quot;x_0=0.0&quot;</span><br><span class="line">      &quot;y_0=0&quot;</span><br><span class="line">      &quot;k=1.0&quot;</span><br><span class="line">      &quot;units=m&quot;</span><br><span class="line">      &quot;nadgrids=@null&quot;</span><br><span class="line">      &quot;wktext&quot;</span><br><span class="line">      &quot;no_defs&quot;</span><br><span class="line">    END # PROJECTION</span><br><span class="line">    STATUS ON</span><br><span class="line">    TILEITEM &quot;location&quot;</span><br><span class="line">    TYPE POLYGON</span><br><span class="line">    UNITS METERS</span><br><span class="line">    CLASS</span><br><span class="line">      NAME &quot;Single symbol&quot;</span><br><span class="line">      STYLE</span><br><span class="line">        COLOR 209 143 80</span><br><span class="line">      END # STYLE</span><br><span class="line">      STYLE</span><br><span class="line">        OUTLINECOLOR 0 0 1</span><br><span class="line">      END # STYLE</span><br><span class="line">    END # CLASS</span><br><span class="line">  END # LAYER</span><br><span class="line"></span><br><span class="line">END # MAP</span><br></pre></td></tr></table></figure><p>所有配置和示例我都放在了github仓库中<a href="https://github.com/zrysmt/mapserver-leaflet-openlayers" target="_blank" rel="noopener">mapserver-leaflet-openlayers</a>。</p><blockquote><p><a href="https://github.com/zrysmt/mapserver-leaflet-openlayers" target="_blank" rel="noopener">https://github.com/zrysmt/mapserver-leaflet-openlayers</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> MapServer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>阿里巴巴校招2017前端笔试题目 -- 原生js/html5 实现一个路由</title>
      <link href="/2017/04/28/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%A0%A1%E6%8B%9B2017%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE-%E5%8E%9F%E7%94%9Fjs-html5-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1/"/>
      <url>/2017/04/28/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%A0%A1%E6%8B%9B2017%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE-%E5%8E%9F%E7%94%9Fjs-html5-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>阿里巴巴校招2017前端笔试题目：<br>1）路由有什么缺点？<br>2）原生js/html5 实现一个路由</p><p>缺点:</p><ul><li>使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存</li><li>单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置</li></ul><p>路由的概念：</p><ul><li>路由是根据不同的 url 地址展示不同的内容或页面</li><li>前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。</li></ul><p>我们直接来看两个例子，一个是hash结构的，这是在Html5 的history api出现之前的解决方案；一个是基于history api实现的。</p><ul><li>hash</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.1/</span><br><span class="line">http://10.0.0.1/#/about</span><br><span class="line">http://10.0.0.1/#/concat</span><br></pre></td></tr></table></figure><ul><li>history</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.0.1/</span><br><span class="line">http://10.0.0.1/about</span><br><span class="line">http://10.0.0.1/concat</span><br></pre></td></tr></table></figure><p>前端的路由和后端的路由在实现技术上不一样，但是原理都是一样的。</p><h1 id="1-hash"><a href="#1-hash" class="headerlink" title="1.hash"></a>1.hash</h1><p>关键是监控两个事件，一个是页面加载进来的时候触发<code>load</code>,一个是hash改变的时候触发<code>hashchange</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>turn white<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/blue"</span>&gt;</span>turn blue<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/green"</span>&gt;</span>turn green<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    class Router &#123;</span></span><br><span class="line"><span class="regexp">        constructor() &#123;</span></span><br><span class="line"><span class="regexp">            this.routes = &#123;&#125;;</span></span><br><span class="line"><span class="regexp">            this.curUrl = "";</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        route(path, callback) &#123;</span></span><br><span class="line"><span class="regexp">            this.routes[path] = callback || function() &#123;&#125;;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        refresh() &#123;</span></span><br><span class="line"><span class="regexp">            this.curUrl = location.hash.slice(1) || '/</span><span class="string">';</span></span><br><span class="line"><span class="string">            this.routes[this.curUrl]();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        init() &#123;</span></span><br><span class="line"><span class="string">            window.addEventListener('</span>load<span class="string">', this.refresh.bind(this), false);</span></span><br><span class="line"><span class="string">            window.addEventListener('</span>hashchange<span class="string">', this.refresh.bind(this), false);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var router = new Router();</span></span><br><span class="line"><span class="string">    router.init();</span></span><br><span class="line"><span class="string">    var content = document.querySelector('</span>body<span class="string">');</span></span><br><span class="line"><span class="string">    // change Page anything</span></span><br><span class="line"><span class="string">    function changeBgColor(color) &#123;</span></span><br><span class="line"><span class="string">        content.style.backgroundColor = color;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    router.route('</span>/<span class="string">', function() &#123;</span></span><br><span class="line"><span class="string">        changeBgColor('</span>white<span class="string">');</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    router.route('</span>/blue<span class="string">', function() &#123;</span></span><br><span class="line"><span class="string">        changeBgColor('</span>blue<span class="string">');</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    router.route('</span>/green<span class="string">', function() &#123;</span></span><br><span class="line"><span class="string">        changeBgColor('</span>green<span class="string">');</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="2-history-api"><a href="#2-history-api" class="headerlink" title="2.history api"></a>2.history api</h1><p>html5 增加了两个方法，分别是<code>pushState</code>，<code>replaceState</code>.</p><p>两个方法均有三个参数：一个状态对象、一个标题（现在会被忽略），一个可选的URL地址<br><strong>状态对象（state object）</strong> — 一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</p><p>任何可序列化的对象都可以被当做状态对象。因为FireFox浏览器会把状态对象保存到用户的硬盘，这样它们就能在用户重启浏览器之后被还原，我们强行限制状态对象的大小为640k。如果你向pushState()方法传递了一个超过该限额的状态对象，该方法会抛出异常。如果你需要存储很大的数据，建议使用sessionStorage或localStorage。</p><p>pushState 用于向 history 添加当前页面的记录，而 replaceState 和 pushState 的用法完全一样，唯一的区别就是它用于修改当前页面在 history 中的记录。</p><p><strong>两者的一个表现的区别是</strong>：在浏览器上点击后退键的时候，使用pushState的会正常按照点击的顺序依次返回，而使用replaceState的只是替换，不会返回，会直接返回到pushState的记录。</p><p><strong>index.html</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Simple History<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"push"</span> <span class="attr">href</span>=<span class="string">"?push-one"</span>&gt;</span>Push One<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"push"</span> <span class="attr">href</span>=<span class="string">"?push-two"</span>&gt;</span>Push Two<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"push"</span> <span class="attr">href</span>=<span class="string">"?push-three"</span>&gt;</span>Push Three<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"replace"</span> <span class="attr">href</span>=<span class="string">"?replace-one"</span>&gt;</span>Replace One<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"replace"</span> <span class="attr">href</span>=<span class="string">"?replace-two"</span>&gt;</span>Replace Two<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"replace"</span> <span class="attr">href</span>=<span class="string">"?replace-three"</span>&gt;</span>Replace Three<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"simple-history.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/1.7.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!SimpleHistory.supported) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        SimpleHistory.start(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"match"</span>, path);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.title = <span class="string">"Simple History - "</span> + path;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;li&gt;"</span>).text(<span class="string">"match: "</span> + path).appendTo(<span class="string">"#log"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"a:not([href^=http])"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (event.metaKey || event.shiftKey || event.ctrlKey) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            event.preventDefault();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> path = $(event.target).attr(<span class="string">"href"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($(event.target).is(<span class="string">".push"</span>)) &#123;</span></span><br><span class="line"><span class="undefined">                SimpleHistory.pushState(event.target.href);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                SimpleHistory.replaceState(event.target.href);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;())</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>simple-history.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> initial = location.href;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.SimpleHistory = &#123;</span><br><span class="line">        supported: !!(<span class="built_in">window</span>.history &amp;&amp; <span class="built_in">window</span>.history.pushState),</span><br><span class="line">        pushState: <span class="function"><span class="keyword">function</span>(<span class="params">fragment, state</span>) </span>&#123;</span><br><span class="line">            state = state || &#123;&#125;;</span><br><span class="line">            history.pushState(state, <span class="literal">null</span>, fragment);</span><br><span class="line">            <span class="keyword">this</span>.notify(state);</span><br><span class="line">        &#125;,</span><br><span class="line">        replaceState: <span class="function"><span class="keyword">function</span>(<span class="params">fragment, state</span>) </span>&#123;</span><br><span class="line">            state = state || &#123;&#125;;</span><br><span class="line">            history.replaceState(state, <span class="literal">null</span>, fragment);</span><br><span class="line">        &#125;,</span><br><span class="line">        notify: <span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(location.pathname,location.search);</span><br><span class="line">            <span class="keyword">this</span>.matcher(location.pathname + location.search, state);</span><br><span class="line">        &#125;,</span><br><span class="line">        start: <span class="function"><span class="keyword">function</span>(<span class="params">matcher</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.matcher = matcher;</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">"popstate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// workaround to always ignore first popstate event (Chrome)</span></span><br><span class="line">                <span class="comment">// a timeout isn't reliable enough</span></span><br><span class="line">                <span class="keyword">if</span> (initial &amp;&amp; initial === location.href) &#123;</span><br><span class="line">                    initial = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                SimpleHistory.notify(event.state || &#123;&#125;);</span><br><span class="line">            &#125;, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>));</span><br></pre></td></tr></table></figure></p><p><strong>参考阅读：</strong></p><ul><li><a href="http://blog.csdn.net/sunxinty/article/details/52586556" target="_blank" rel="noopener"> 原生JS实现一个简单的前端路由（路由实现的原理）</a></li><li><a href="http://blog.csdn.net/u013063153/article/details/52513872" target="_blank" rel="noopener">从 React Router 谈谈路由的那些事</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 路由 </tag>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>openlayers 3扩展，调用百度地图、高德地图、天地图服务</title>
      <link href="/2017/03/28/openlayers%203%E6%89%A9%E5%B1%95%EF%BC%8C%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E3%80%81%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E3%80%81%E5%A4%A9%E5%9C%B0%E5%9B%BE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2017/03/28/openlayers%203%E6%89%A9%E5%B1%95%EF%BC%8C%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E3%80%81%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E3%80%81%E5%A4%A9%E5%9C%B0%E5%9B%BE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>调用这三个商业地图服务，我们使用的都是切片（Tile）地图服务，关于切片地图的含义这里做简单的介绍：<br>切片地图就是指将显示的地图切成一块一块的(256 * 256)分别显示加载。openlayers 3中有这样图层加载类，<code>ol.layer.Tile</code>,对应的source类有<code>ol.source.TileImage</code>,<code>ol.source.XYZ</code>,这两者的关系通过源码可以看到<br><code>ol.inherits(ol.source.XYZ, ol.source.TileImage);</code>,<code>ol.source.TileImage</code>是父类。</p><p>对于天地图，我们访问<a href="http://map.tianditu.com/map/index.html" target="_blank" rel="noopener">天地图</a>地图主页服务，打开控制台-&gt;<code>Network</code>,我们可以看到请求的一些地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://t2.tianditu.com/DataServer?T=vec_w&amp;x=53&amp;y=24&amp;l=6&apos;</span><br></pre></td></tr></table></figure><p>其中重要的信息是x,y,z分别表示x坐标，y坐标和zoomLevel,</p><p>其实在openlayers 3源码中有Bing地图和OSM地图的扩展了，我们可以仿照它们进行一些扩展。</p><h2 id="1-扩展天地图"><a href="#1-扩展天地图" class="headerlink" title="1.扩展天地图"></a>1.扩展天地图</h2><p>源码使用模块化打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ol = <span class="built_in">require</span>(<span class="string">'openlayers'</span>);</span><br><span class="line"></span><br><span class="line">ol.source.TianMap = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = options ? options : &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> attributions;</span><br><span class="line">  <span class="keyword">if</span>(options.attributions !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">  attributions = option.attributions;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  attributions = [ol.source.BaiduMap.ATTRIBUTION];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url;</span><br><span class="line">    <span class="keyword">if</span>(options.mapType == <span class="string">"sat"</span>)&#123;</span><br><span class="line">    url = <span class="string">"http://t&#123;0-4&#125;.tianditu.com/DataServer?T=img_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.mapType == <span class="string">"satLabel"</span>)&#123;</span><br><span class="line">    url = <span class="string">"http://t&#123;0-4&#125;.tianditu.com/DataServer?T=cia_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(options.mapType == <span class="string">"label"</span>)&#123;</span><br><span class="line">    url = <span class="string">"http://t&#123;0-4&#125;.tianditu.com/DataServer?T=cva_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    url = <span class="string">"http://t&#123;0-4&#125;.tianditu.com/DataServer?T=vec_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ol.source.XYZ.call(<span class="keyword">this</span>, &#123;</span><br><span class="line">    attributions: attributions,</span><br><span class="line">      projection: ol.proj.get(<span class="string">'EPSG:3857'</span>),</span><br><span class="line">    cacheSize: options.cacheSize,</span><br><span class="line">    crossOrigin: <span class="string">'anonymous'</span>,</span><br><span class="line">    opaque: options.opaque !== <span class="literal">undefined</span> ? options.opaque : <span class="literal">true</span>,</span><br><span class="line">    maxZoom: options.maxZoom !== <span class="literal">undefined</span> ? options.maxZoom : <span class="number">19</span>,</span><br><span class="line">    reprojectionErrorThreshold: options.reprojectionErrorThreshold,</span><br><span class="line">    tileLoadFunction: options.tileLoadFunction,</span><br><span class="line">    url: url,</span><br><span class="line">    wrapX: options.wrapX</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">ol.inherits(ol.source.TianMap, ol.source.XYZ);</span><br><span class="line"></span><br><span class="line">ol.source.TianMap.ATTRIBUTION = <span class="keyword">new</span> ol.Attribution(&#123;</span><br><span class="line">  html: <span class="string">'&amp;copy; &lt;a class="ol-attribution-tianmap" '</span> +</span><br><span class="line">      <span class="string">'href="http://www.tianditu.cn/"&gt;'</span> +</span><br><span class="line">      <span class="string">'天地图&lt;/a&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = ol.source.TianMap;</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tianMapSat = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">    title: <span class="string">"天地图卫星"</span>,</span><br><span class="line">    source: <span class="keyword">new</span> ol.source.TianMap(&#123;<span class="attr">mapType</span>:<span class="string">"sat"</span>&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">map.addLayer(tianMapSat);</span><br></pre></td></tr></table></figure><h2 id="2-扩展百度地图"><a href="#2-扩展百度地图" class="headerlink" title="2. 扩展百度地图"></a>2. 扩展百度地图</h2><p>百度地图坐标进行了加偏，所以需要使用<code>projzh</code>转化<br>百度地图使用的是定制化的墨卡托投影和BD-09 datum,所以将WGS-84坐标转化为百度坐标需要两步<br>first transform from WGS-84 to BD-09 (which itself uses the GCJ-09 transform), and then do the forward transform to Baidu Mercator<br>第一步是将WGS-84 转化为 BD-09，然后转化为百度墨卡托<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baiduMercator.forward(bd09.fromWGS84(point))</span><br></pre></td></tr></table></figure></p><p>反过来的转化为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bd09.toWGS84(baiduMercator.inverse(point))</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="https://github.com/tschaub/projzh" target="_blank" rel="noopener">https://github.com/tschaub/projzh</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ol = <span class="built_in">require</span>(<span class="string">'openlayers'</span>);</span><br><span class="line"><span class="keyword">var</span> projzh = <span class="built_in">require</span>(<span class="string">'projzh'</span>);</span><br><span class="line"><span class="comment">/* projzh处理百度坐标的问题，算法基于proj4m project</span></span><br><span class="line"><span class="comment"> * https://www.versioneye.com/nodejs/projzh/0.5.0</span></span><br><span class="line"><span class="comment"> * https://github.com/tschaub/projzh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ol.source.BaiduMap = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = options ? options : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> attributions;</span><br><span class="line">  <span class="keyword">if</span>(options.attributions !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">  attributions = option.attributions;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  attributions = [ol.source.BaiduMap.ATTRIBUTION];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> extent = [<span class="number">72.004</span>, <span class="number">0.8293</span>, <span class="number">137.8347</span>, <span class="number">55.8271</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义百度坐标</span></span><br><span class="line">    <span class="comment">//地址：https://github.com/openlayers/openlayers/issues/3522</span></span><br><span class="line">    <span class="keyword">var</span> baiduMercator = <span class="keyword">new</span> ol.proj.Projection(&#123;</span><br><span class="line">        code: <span class="string">'baidu'</span>,</span><br><span class="line">        extent: ol.extent.applyTransform(extent, projzh.ll2bmerc),</span><br><span class="line">        units: <span class="string">'m'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    ol.proj.addProjection(baiduMercator);</span><br><span class="line">    ol.proj.addCoordinateTransforms(<span class="string">'EPSG:4326'</span>, baiduMercator, projzh.ll2bmerc, projzh.bmerc2ll);</span><br><span class="line">    ol.proj.addCoordinateTransforms(<span class="string">'EPSG:3857'</span>, baiduMercator, projzh.smerc2bmerc, projzh.bmerc2smerc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> resolutions = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">19</span>; i++)&#123;</span><br><span class="line">        resolutions[i] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">18</span>-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tilegrid  = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span><br><span class="line">        origin: [<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">        resolutions: resolutions,</span><br><span class="line">        extent: ol.extent.applyTransform(extent, projzh.ll2bmerc),</span><br><span class="line">        tileSize: [<span class="number">256</span>, <span class="number">256</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> satUrls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://shangetu'</span> + sub +</span><br><span class="line">            <span class="string">'.map.bdimg.com/it/u=x=&#123;x&#125;;y=&#123;y&#125;;z=&#123;z&#125;;v=009;type=sate&amp;fm=46&amp;udt=20150601'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> urls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://online'</span> + sub +</span><br><span class="line">            <span class="string">'.map.bdimg.com/onlinelabel/qt=tile&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;v=009&amp;styles=pl&amp;udt=20170301&amp;scaler=1&amp;p=1'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    ol.source.TileImage.call(<span class="keyword">this</span>, &#123;</span><br><span class="line">  crossOrigin: <span class="string">'anonymous'</span>,   <span class="comment">//跨域</span></span><br><span class="line">    cacheSize: options.cacheSize,</span><br><span class="line">        <span class="comment">// projection: ol.proj.get('EPSG:3857'),</span></span><br><span class="line">  projection:<span class="string">'baidu'</span>,</span><br><span class="line">  tileGrid: tilegrid,</span><br><span class="line">  tileUrlFunction: <span class="function"><span class="keyword">function</span>(<span class="params">tileCoord, pixelRatio, proj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tileCoord) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> z = tileCoord[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> x = tileCoord[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> y = tileCoord[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">var</span> hash = (x &lt;&lt; z) + y;</span><br><span class="line">            <span class="keyword">var</span> index = hash % urls.length;</span><br><span class="line">            index = index &lt; <span class="number">0</span> ? index + urls.length : index;</span><br><span class="line">            <span class="keyword">if</span>(options.mapType == <span class="string">"sat"</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> satUrls[index].replace(<span class="string">'&#123;x&#125;'</span>, x).replace(<span class="string">'&#123;y&#125;'</span>, y).replace(<span class="string">'&#123;z&#125;'</span>, z);</span><br><span class="line">  &#125;</span><br><span class="line">            <span class="keyword">return</span> urls[index].replace(<span class="string">'&#123;x&#125;'</span>, x).replace(<span class="string">'&#123;y&#125;'</span>, y).replace(<span class="string">'&#123;z&#125;'</span>, z);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    wrapX: options.wrapX !== <span class="literal">undefined</span> ? options.wrapX : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ol.inherits(ol.source.BaiduMap,ol.source.TileImage);</span><br><span class="line"></span><br><span class="line">ol.source.BaiduMap.ATTRIBUTION = <span class="keyword">new</span> ol.Attribution(&#123;</span><br><span class="line">  html: <span class="string">'&amp;copy; &lt;a class="ol-attribution-baidumap" '</span> +</span><br><span class="line">      <span class="string">'href="http://map.baidu.com/"&gt;'</span> +</span><br><span class="line">      <span class="string">'百度地图&lt;/a&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ol.source.BaiduMap;</span><br></pre></td></tr></table></figure><p>调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> baiduMapSat = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">    title: <span class="string">"百度地图卫星"</span>,</span><br><span class="line">    source: <span class="keyword">new</span> ol.source.BaiduMap(&#123;<span class="attr">mapType</span>:<span class="string">"sat"</span>&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">map.addLayer(baiduMapSat);</span><br></pre></td></tr></table></figure></p><h2 id="3-扩展高德地图"><a href="#3-扩展高德地图" class="headerlink" title="3. 扩展高德地图"></a>3. 扩展高德地图</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ol = <span class="built_in">require</span>(<span class="string">'openlayers'</span>);</span><br><span class="line"></span><br><span class="line">ol.source.AMap = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> options = options ? options : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> attributions;</span><br><span class="line">  <span class="keyword">if</span>(options.attributions !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">  attributions = option.attributions;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  attributions = [ol.source.AMap.ATTRIBUTION];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> url;</span><br><span class="line">  <span class="keyword">if</span>(options.mapType == <span class="string">"sat"</span>)&#123;</span><br><span class="line">  url =<span class="string">"http://webst0&#123;1-4&#125;.is.autonavi.com/appmaptile?style=6&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  url = <span class="string">"http://webrd0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    ol.source.XYZ.call(<span class="keyword">this</span>, &#123;</span><br><span class="line">  crossOrigin: <span class="string">'anonymous'</span>,   <span class="comment">//跨域</span></span><br><span class="line">    cacheSize: options.cacheSize,</span><br><span class="line">        projection: ol.proj.get(<span class="string">'EPSG:3857'</span>),</span><br><span class="line">        <span class="comment">// urls:urls,</span></span><br><span class="line">        url:url,</span><br><span class="line">    wrapX: options.wrapX !== <span class="literal">undefined</span> ? options.wrapX : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ol.inherits(ol.source.AMap,ol.source.XYZ);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ol.source.AMap.ATTRIBUTION = <span class="keyword">new</span> ol.Attribution(&#123;</span><br><span class="line">  html: <span class="string">'&amp;copy; &lt;a class="ol-attribution-amap" '</span> +</span><br><span class="line">      <span class="string">'href="http://ditu.amap.com/"&gt;'</span> +</span><br><span class="line">      <span class="string">'高德地图&lt;/a&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ol.source.AMap;</span><br></pre></td></tr></table></figure><p>调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aMapSat = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">    title: <span class="string">"高德地图卫星"</span>,</span><br><span class="line">    source: <span class="keyword">new</span> ol.source.AMap(&#123;<span class="attr">mapType</span>:<span class="string">"sat"</span>&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">map.addLayer(aMapSat);</span><br></pre></td></tr></table></figure></p><p>最后推荐一个<a href="https://github.com/zrysmt/openlayers3-react" target="_blank" rel="noopener">github仓库</a>,Openlayers 3 使用React 组件化+wepack+ES6实践,<br>包括扩展在其中的具体使用方法</p><blockquote><p><a href="https://github.com/zrysmt/openlayers3-react" target="_blank" rel="noopener">https://github.com/zrysmt/openlayers3-react</a></p></blockquote><h1 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h1><ul><li><a href="https://github.com/openlayers/openlayers" target="_blank" rel="noopener">openlayers github</a></li><li><a href="https://github.com/openlayers/openlayers/issues" target="_blank" rel="noopener">openlayers github Issues</a></li><li><a href="https://openlayers.org/en/latest/apidoc/" target="_blank" rel="noopener">openlayers 官方地址</a></li><li><a href="http://blog.csdn.net/future_todo/article/details/61206783" target="_blank" rel="noopener">Openlayers 3 使用React 组件化+wepack+ES6实践记录笔记</a></li><li><a href="http://blog.csdn.net/qingyafan/article/details/49403989" target="_blank" rel="noopener">OpenLayers 3 之 加载百度地图</a></li><li><a href="http://blog.csdn.net/qingyafan/article/details/49565245" target="_blank" rel="noopener">OpenLayers 3 之 加载天地图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>openlayers 3 使用React 组件化+wepack+ES6实践记录</title>
      <link href="/2017/03/10/openlayers%203%20%E4%BD%BF%E7%94%A8React%20%E7%BB%84%E4%BB%B6%E5%8C%96+wepack+ES6%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/03/10/openlayers%203%20%E4%BD%BF%E7%94%A8React%20%E7%BB%84%E4%BB%B6%E5%8C%96+wepack+ES6%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本博文不作深入研究内容，只用来记录使用React 组件化+wepack+ES6技术操作Openlayers 3 实践中遇到的问题，本博文作为开篇，所以只是简单的demo案例说明。后面还会有其他的一些博文分享我在项目中遇到的问题和总结的经验。</p><p>大约一年前我写过一个系列的Openlayers 3的简单的源码结构的分析，代码以及说明在我的<a href="https://github.com/zrysmt/openlayers-3" target="_blank" rel="noopener">github</a>中有，需要的同学出门右转。</p><blockquote><p>Openlayers 3的简单的源码结构的分析 <a href="https://github.com/zrysmt/openlayers-3" target="_blank" rel="noopener">https://github.com/zrysmt/openlayers-3</a> </p></blockquote><p>我在github上看到一些人将openlayers彻底组件化，属性通过props传入进来，例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;layer.Tile&gt;</span><br><span class="line">    &lt;source.OSM /&gt;</span><br><span class="line">  &lt;/layer.Tile&gt;</span><br></pre></td></tr></table></figure></p><p>这样做的好处是高度组件化，看起来很和谐。但是这样无形中增加了学习成本和时间成本，我们要看到ol3的API，然后再考虑到转化为组件化的书写的对应形式，导致了多走一步。<br>本博文的思想很简单，就是外壳用react组件封装，内部的源码实现使用ol3的API完全没有改变，这样就简单清晰而且避免多走一步。具体例子见下面给出的Demo。</p><p>我还将我写的一些组件，比如基础地图，工具栏和绘制栏用React写的组件单独从项目中拿出来，提供给使用和学习者一些方便，下面给出<a href="https://github.com/zrysmt/openlayers3-react" target="_blank" rel="noopener">地址</a>,欢迎fork，star，不定期更新，有错误请指出：</p><blockquote><p><a href="https://github.com/zrysmt/openlayers3-react" target="_blank" rel="noopener">https://github.com/zrysmt/openlayers3-react</a></p></blockquote><h1 id="1-一些问题总结"><a href="#1-一些问题总结" class="headerlink" title="1.一些问题总结"></a>1.一些问题总结</h1><p><strong>问题1：</strong>npm安装的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed at the closure-util@1.18.0 postinstall script &apos;node ./bin/closure-util.js update&apos;</span><br></pre></td></tr></table></figure></p><p>解决方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首先 npm i closure-util --save</span><br><span class="line">然后再安装 npm i openlayers --save</span><br></pre></td></tr></table></figure></p><p><strong>问题2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING in ./~/openlayers/dist/ol.js`</span><br><span class="line">`Critical dependencies:`</span><br><span class="line">`748:1160-1167  This seems to be a pre-built javascript file.  Though  this is possible, it&apos;s not recommended. Try to require the original source to get better results.`</span><br></pre></td></tr></table></figure><p>修改webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;// ...</span><br><span class="line">    noParse: [&apos;/node_modules/prebuiltlib/dist/build.js&apos;,]// ...&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-基本Demo"><a href="#2-基本Demo" class="headerlink" title="2.基本Demo"></a>2.基本Demo</h1><p><strong>olbasemap.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ol <span class="keyword">from</span> <span class="string">'openlayers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'openlayers/css/ol.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./olbasemap.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Olbasemap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">              target: <span class="string">'map'</span>,</span><br><span class="line">              layers: [</span><br><span class="line">                <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                   source: <span class="keyword">new</span> ol.source.OSM()</span><br><span class="line">                &#125;)</span><br><span class="line">              ],</span><br><span class="line">              view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">                center: ol.proj.fromLonLat([<span class="number">37.41</span>, <span class="number">8.82</span>]),</span><br><span class="line">                zoom: <span class="number">4</span>,</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div id=<span class="string">"map"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Olbasemap;</span><br></pre></td></tr></table></figure><p><strong>olbasemap.scss</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#map&#123;</span><br><span class="line">    width:<span class="number">100</span>%;</span><br><span class="line">    height:<span class="number">600</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-调用天地图"><a href="#3-调用天地图" class="headerlink" title="3.调用天地图"></a>3.调用天地图</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础地图模块</span></span><br><span class="line"><span class="comment"> * @Date 2017-3-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ol <span class="keyword">from</span> <span class="string">'openlayers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'../../../common/util.jsx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'openlayers/css/ol.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./olbasemap.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Olbasemap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        util.adaptHeight(<span class="string">'map'</span>,<span class="number">105</span>,<span class="number">300</span>);<span class="comment">//高度自适应</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> projection,attribution,coor,view;</span><br><span class="line"></span><br><span class="line">        attribution = <span class="keyword">new</span> ol.Attribution(&#123;</span><br><span class="line">            html: <span class="string">'© &lt;a href="http://www.chinaonmap.com/map/index.html"&gt;天地图&lt;/a&gt;'</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">            target: <span class="string">'map'</span>,</span><br><span class="line">            layers: [</span><br><span class="line">                <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                    source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">                        attributions: [attribution],</span><br><span class="line">                        url: <span class="string">"http://t2.tianditu.com/DataServer?T=vec_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                    source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">                        url: <span class="string">"http://t2.tianditu.com/DataServer?T=cva_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            ],</span><br><span class="line">            view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">              <span class="comment">// projection: 'EPSG:4326',//WGS84</span></span><br><span class="line">              center: ol.proj.fromLonLat([<span class="number">104</span>, <span class="number">30</span>]),</span><br><span class="line">              zoom: <span class="number">5</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">            controls: ol.control.defaults().extend([</span><br><span class="line">                <span class="keyword">new</span> ol.control.FullScreen(), <span class="comment">//全屏控件</span></span><br><span class="line">                <span class="keyword">new</span> ol.control.ScaleLine(), <span class="comment">//比例尺</span></span><br><span class="line">                <span class="keyword">new</span> ol.control.OverviewMap(), <span class="comment">//鹰眼控件</span></span><br><span class="line">                <span class="keyword">new</span> ol.control.Rotate(),</span><br><span class="line">                <span class="keyword">new</span> ol.control.MousePosition(),</span><br><span class="line">                <span class="keyword">new</span> ol.control.ZoomSlider(),</span><br><span class="line">             ]),</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div id=<span class="string">"map"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Olbasemap;</span><br></pre></td></tr></table></figure><p>此时有个问题，假设我们要把<code>map</code>变量传出去，供其他的组件使用，子类和父类之间的传值可以通过props和回调函数完成；现在我们做的组件其实是兄弟关系，怎么将<code>map</code>做成通用呢，经过考虑我们决定使用<strong>发布-订阅模式</strong>，涉及到各个组件的变量的都在组件内部定义，然后通过<strong>发布-订阅模式</strong>将一些事件集中管理起来。此外我们还组织将变量放到构造函数中。</p><p>于是我们可以这样修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础地图模块</span></span><br><span class="line"><span class="comment"> * @Date 2017-3-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ol <span class="keyword">from</span> <span class="string">'openlayers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'../../../common/util.jsx'</span>;</span><br><span class="line"><span class="keyword">import</span> Eventful <span class="keyword">from</span> <span class="string">'../../../common/Eventful.js'</span>;</span><br><span class="line"><span class="keyword">import</span> olConfig <span class="keyword">from</span> <span class="string">'./ol-config'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'openlayers/css/ol.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./olbasemap.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Olbasemap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">let</span> map,view,projection,attribution,coor,mousePositionControl;</span><br><span class="line"></span><br><span class="line">        attribution = <span class="keyword">new</span> ol.Attribution(&#123;</span><br><span class="line">            html: <span class="string">'© &lt;a href="http://www.chinaonmap.com/map/index.html"&gt;天地图&lt;/a&gt;'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        mousePositionControl = <span class="keyword">new</span> ol.control.MousePosition(&#123;</span><br><span class="line">            coordinateFormat: ol.coordinate.createStringXY(<span class="number">0</span>),</span><br><span class="line">            projection: <span class="string">'EPSG:3857'</span>,<span class="comment">//可以是4326 精度应该保留几个小数点</span></span><br><span class="line">            <span class="comment">// className: 'custom-mouse-position',</span></span><br><span class="line">            <span class="comment">// target: document.getElementById('mouse-position'),</span></span><br><span class="line">            undefinedHTML: <span class="string">'&amp;nbsp;'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.view = view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">            <span class="comment">// projection: 'EPSG:4326',//WGS84</span></span><br><span class="line">            center: ol.proj.fromLonLat(olConfig.initialView.center||[<span class="number">104</span>, <span class="number">30</span>]),</span><br><span class="line">            zoom: olConfig.initialView.zoom || <span class="number">5</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.map = map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">            target: <span class="string">'map'</span>,</span><br><span class="line">            layers: [</span><br><span class="line">                <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                    source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">                        attributions: [attribution],</span><br><span class="line">                        url: <span class="string">"http://t2.tianditu.com/DataServer?T=vec_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                    source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">                        url: <span class="string">"http://t2.tianditu.com/DataServer?T=cva_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            ],</span><br><span class="line">            view: view,</span><br><span class="line">            controls: ol.control.defaults().extend([</span><br><span class="line">                <span class="keyword">new</span> ol.control.FullScreen(), <span class="comment">//全屏控件</span></span><br><span class="line">                <span class="keyword">new</span> ol.control.ScaleLine(), <span class="comment">//比例尺</span></span><br><span class="line">                <span class="keyword">new</span> ol.control.OverviewMap(), <span class="comment">//鹰眼控件</span></span><br><span class="line">                <span class="keyword">new</span> ol.control.Rotate(),</span><br><span class="line">                <span class="keyword">new</span> ol.control.ZoomSlider(),</span><br><span class="line">                mousePositionControl</span><br><span class="line">             ]),</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Eventful.subscribe(<span class="string">'zoomtoall'</span>,()=&gt;<span class="keyword">this</span>.handleClickOfZoomtoall());<span class="comment">//订阅</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClickOfZoomtoall()&#123;</span><br><span class="line">        <span class="keyword">this</span>.view.animate(&#123;<span class="attr">zoom</span>:olConfig.initialView.zoom || <span class="number">5</span>,</span><br><span class="line">            center:ol.proj.fromLonLat(olConfig.initialView.center||[<span class="number">104</span>, <span class="number">30</span>])&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        util.adaptHeight(<span class="string">'map'</span>,<span class="number">105</span>,<span class="number">300</span>);<span class="comment">//高度自适应</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(__DEV__) <span class="built_in">console</span>.info(<span class="string">"componentDidMount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.map.setTarget(<span class="keyword">this</span>.refs.map);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount () &#123;</span><br><span class="line">        <span class="keyword">this</span>.map.setTarget(<span class="literal">undefined</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div id=<span class="string">"map"</span> ref=<span class="string">"map"</span> &gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Olbasemap;</span></span><br></pre></td></tr></table></figure></p><p>在兄弟模块中该调用的模块中调用下面的关键代码即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Eventful.dispatch(<span class="string">'zoomtoall'</span>）；</span><br></pre></td></tr></table></figure></p><p>最后列下来<strong>发布-订阅模式</strong>的代码<code>Eventful.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者(发布-订阅)模式</span></span><br><span class="line"><span class="comment"> * @Date 2017-3-14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> Eventful = &#123;</span><br><span class="line">    _events: &#123;&#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [dispatch 发布]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[String]&#125;    evtName [关键字名]</span></span><br><span class="line"><span class="comment">     * @param  &#123;...[Any]&#125; args    [传递的参数]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dispatch(evtName, ...args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._events[evtName]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>._events[evtName].forEach(</span><br><span class="line">            func =&gt; func.apply(<span class="built_in">Object</span>.create(<span class="literal">null</span>), args));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [subscribe 订阅]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[String]&#125;    evtName [关键字名]</span></span><br><span class="line"><span class="comment">     * @param  &#123;Function&#125; callback [回掉函数]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    subscribe(evtName, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._events[evtName]) &#123;</span><br><span class="line">            <span class="keyword">this</span>._events[evtName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._events[evtName].push(callback);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [unSubscribe 取消订阅]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[String]&#125;    evtName [关键字名]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    unSubscribe(evtName) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._events[evtName]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>._events[evtName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Eventful;</span><br></pre></td></tr></table></figure></p><p><strong>参考阅读</strong></p><ul><li><a href="http://blog.csdn.net/qingyafan/article/details/49565245" target="_blank" rel="noopener">OpenLayers 3 之 加载天地图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ECharts 3.0源码简要分析1-总体架构</title>
      <link href="/2017/03/09/ECharts%203.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%901-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>/2017/03/09/ECharts%203.0%E6%BA%90%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%901-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>百度的<a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">Echarts 3.0</a>作为前端领域可视化重要的开源库，是我们在日常工作生活中经常使用的，所以有必要一起来了解下Echarts的源码。我打算用一个系列介绍下Echarts 3.x的使用和源码，一些demo和没有在博客中介绍的源码请进我的<a href="https://github.com/zrysmt/echarts3/tree/master/echarts" target="_blank" rel="noopener">github仓库</a>。</p><blockquote><p><a href="https://github.com/zrysmt/echarts3/tree/master/echarts" target="_blank" rel="noopener">https://github.com/zrysmt/echarts3/tree/master/echarts</a></p></blockquote><p>本博文Echarts版本基于3.3.2。</p><p>Echarts的源码是在zrender的基础上封装的，所以要看明白echarts源码须要先了解zrender的源码，不过为了本博文的独立可读性，这里也会将用到的zrender源码简单说明。如果要了解zrender具体的源码，这里给出了zrender源码解读博客和源码注释仓库。</p><blockquote><p><a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">github仓库:<code>https://github.com/zrysmt/echarts3/tree/master/zrender</code></a></p><p><a href="http://blog.csdn.net/future_todo/article/details/54341386" target="_blank" rel="noopener">ECharts 3.0底层zrender 3.x源码分析1-总体架构</a><br><a href="http://blog.csdn.net/future_todo/article/details/54341426" target="_blank" rel="noopener">ECharts 3.0底层zrender 3.x源码分析2-Painter（V层）</a><br><a href="http://blog.csdn.net/future_todo/article/details/54341458" target="_blank" rel="noopener">ECharts 3.0底层zrender 3.x源码分析3-Handler（C层）</a></p></blockquote><h1 id="1-源码结构和打包"><a href="#1-源码结构和打包" class="headerlink" title="1.源码结构和打包"></a>1.源码结构和打包</h1><h2 id="1-1-源码打包"><a href="#1-1-源码打包" class="headerlink" title="1.1 源码打包"></a>1.1 源码打包</h2><p>源码使用webpack打包，查看文件<code>webpack.config.js</code>可知，将echarts源码编译成三个版本，分别为常用版本,精简版本，完整版本，分别对应webpack入口文件为<code>index.common.js</code>、<code>index.simple.js</code>、<code>index.js</code>。</p><blockquote><p>注：三个文件引用的都是<code>lib</code>文件下的文件，执行下面一步提示的命令<code>npm insall</code>后就可以得到<code>lib</code>文件夹，它里面的文件和<code>src</code>文件夹中的文件主要内容是相同的，不同之处在于：前者文件是通过类似CMD的模式打包的，后者文件是通过webpack进行打包的。我们在下面就分析<code>src</code>文件夹下的源码。注释也在其中。</p></blockquote><p>执行命令顺序为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install  <span class="comment">//安装所有依赖包</span></span><br><span class="line">webpack      <span class="comment">//打包</span></span><br><span class="line">webpack -p   <span class="comment">//打成压缩包（.min.js）</span></span><br></pre></td></tr></table></figure></p><p>最后生成的文件在<code>dist</code>文件夹下。</p><h2 id="1-2-源码结构"><a href="#1-2-源码结构" class="headerlink" title="1.2 源码结构"></a>1.2 源码结构</h2><p>首先我们要明白两个重要的概念components和charts：charts是指各种类型的图表，例如line，bar，pie等，在配置项中指的是series对应的配置；components组件是在配置项中除了serie的其余项，例如title，legend，toobox等。</p><p>源码的重要目录及说明如下(注：dist为编译后生成的文件夹)</p><ul><li>extension  （扩展中使用）</li><li>lib  （源码中没有，执行webpack编译后才存在）</li><li>map  （世界地图，中国地图及中国各个省份地图的js和json两种格式的文件）</li><li>src  （核心源码）</li><li>test （示例demo）</li><li>theme （主题）</li></ul><h1 id="2-渲染情况"><a href="#2-渲染情况" class="headerlink" title="2 渲染情况"></a>2 渲染情况</h1><p>完整的例子代码<a href="https://github.com/zrysmt/echarts3/blob/master/echarts/demo/bar.html" target="_blank" rel="noopener">戳我</a>。</p><p>最外层是id为main的div，是我们自己写的用来渲染echarts图表的。<br>echarts渲染了两个div，一个div用来渲染主要的图表的，div里面嵌套一个canvas标签，<br>第二个div是为了显示hover层信息的。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echarts/echarts1.jpg" alt=""></p><h1 id="3-入口echarts-js"><a href="#3-入口echarts-js" class="headerlink" title="3.入口echarts.js"></a>3.入口<code>echarts.js</code></h1><p>位置：<code>src/echarts.js</code>。</p><p>大体的结构是一个构造函数（ECharts），原型上（ECharts.prototype）多个方法，一个echarts对象（包括对象上的属性和方法）。</p><p>和zrender一样，使用<code>init</code>方法进行初始化。</p><h2 id="3-1-init方法"><a href="#3-1-init方法" class="headerlink" title="3.1 init方法"></a>3.1 <code>init</code>方法</h2><p>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">echarts.init = <span class="function"><span class="keyword">function</span>(<span class="params">dom, theme, opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;<span class="comment">//是否是debug模式</span></span><br><span class="line">        <span class="comment">//...     //错误判断这部分内容省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> chart = <span class="keyword">new</span> ECharts(dom, theme, opts);<span class="comment">//实例化ECharts</span></span><br><span class="line">    chart.id = <span class="string">'ec_'</span> + idBase++;<span class="comment">//chart实例的id号，唯一，逐一递增</span></span><br><span class="line">    instances[chart.id] = chart;<span class="comment">//唯一instance(实例)对象</span></span><br><span class="line"></span><br><span class="line">    dom.setAttribute &amp;&amp;</span><br><span class="line">        dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);<span class="comment">//为外层dom设置了一个属性，属性值等于chart.id</span></span><br><span class="line"></span><br><span class="line">    enableConnect(chart);<span class="comment">//按照顺序更新状态，一共三个状态</span></span><br><span class="line">        <span class="comment">/*var STATUS_PENDING = 0;</span></span><br><span class="line"><span class="comment">        var STATUS_UPDATING = 1;</span></span><br><span class="line"><span class="comment">        var STATUS_UPDATED = 2;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chart;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>if (__DEV__)</code>验证是否是debug模式，如果是就会有错误提示（错误判断这部分内容省略），否者就是生产模式，没有错误提示。</li><li>参数说明</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @param &#123;HTMLDomElement&#125; dom 实例容器，一般是一个具有高宽的div元素</span></span><br><span class="line"><span class="comment">* @param &#123;Object&#125; [theme] 主题（说明见下面）</span></span><br><span class="line"><span class="comment">* @param &#123;Object&#125; opts 配置属性，下面几个属性</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; [opts.devicePixelRatio] Use window.devicePixelRatio by default</span></span><br><span class="line"><span class="comment">* @param &#123;string&#125; [opts.renderer] Currently only 'canvas' is supported.</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; [opts.width] Use clientWidth of the input `dom` by default.</span></span><br><span class="line"><span class="comment">*                              Can be 'auto' (the same as null/undefined)</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; [opts.height] Use clientHeight of the input `dom` by default.</span></span><br><span class="line"><span class="comment">*                               Can be 'auto' (the same as null/undefined)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>主题theme</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*theme主题，可以在官网下载(http://echarts.baidu.com/download-theme.html),或者自己构建</span></span><br><span class="line"><span class="comment"> * 使用：</span></span><br><span class="line"><span class="comment"> * &lt;script src="theme/vintage.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment"> * &lt;script&gt;</span></span><br><span class="line"><span class="comment"> * // 第二个参数可以指定前面引入的主题</span></span><br><span class="line"><span class="comment"> * var chart = echarts.init(document.getElementById('main'), 'vintage');</span></span><br><span class="line"><span class="comment"> * &lt;/script&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>), <span class="literal">null</span>, &#123;</span><br><span class="line">   renderer: <span class="string">'canvas'</span>&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="3-2-构造函数"><a href="#3-2-构造函数" class="headerlink" title="3.2 构造函数"></a>3.2 构造函数</h2><p>构造函数里面是属性的初始化和zrender的初始化（<code>this._zr</code>）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ECharts</span>(<span class="params">dom, theme, opts</span>) </span>&#123;</span><br><span class="line">    opts = opts || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> theme === <span class="string">'string'</span>) &#123;</span><br><span class="line">        theme = themeStorage[theme];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.id;</span><br><span class="line">    <span class="keyword">this</span>.group;</span><br><span class="line">    <span class="keyword">this</span>._dom = dom;</span><br><span class="line">    <span class="keyword">var</span> zr = <span class="keyword">this</span>._zr = zrender.init(dom, &#123;</span><br><span class="line">        renderer: opts.renderer || <span class="string">'canvas'</span>,</span><br><span class="line">        devicePixelRatio: opts.devicePixelRatio,</span><br><span class="line">        width: opts.width,</span><br><span class="line">        height: opts.height</span><br><span class="line">    &#125;);<span class="comment">//构造函数第三个参数使用的zrender处理的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), <span class="number">17</span>);</span><br><span class="line">    <span class="keyword">this</span>._theme = zrUtil.clone(theme);</span><br><span class="line">    <span class="keyword">this</span>._chartsViews = [];<span class="comment">//存储所有的charts，为后面便利该变量渲染之</span></span><br><span class="line">    <span class="keyword">this</span>._chartsMap = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._componentsViews = [];<span class="comment">//存储配置项组件的属性，为后面便利该变量渲染之</span></span><br><span class="line">    <span class="keyword">this</span>._componentsMap = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._api = <span class="keyword">new</span> ExtensionAPI(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//this._api是有'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',</span></span><br><span class="line">    <span class="comment">//'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'方法的对象</span></span><br><span class="line">    <span class="keyword">this</span>._coordSysMgr = <span class="keyword">new</span> CoordinateSystemManager();</span><br><span class="line">    Eventful.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>._messageCenter = <span class="keyword">new</span> MessageCenter();</span><br><span class="line">    <span class="keyword">this</span>._initEvents();<span class="comment">//初始化鼠标事件</span></span><br><span class="line">    <span class="keyword">this</span>.resize = zrUtil.bind(<span class="keyword">this</span>.resize, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._pendingActions = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prioritySortFunc</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.prio - b.prio;</span><br><span class="line">    &#125;</span><br><span class="line">    timsort(visualFuncs, prioritySortFunc);</span><br><span class="line">    timsort(dataProcessorFuncs, prioritySortFunc);</span><br><span class="line">    zr.animation.on(<span class="string">'frame'</span>, <span class="keyword">this</span>._onframe, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-setOption"><a href="#3-3-setOption" class="headerlink" title="3.3 setOption"></a>3.3 <code>setOption</code></h2><p>首先我们来看下使用api的情况，我们在前面已经说过使用<code>init</code>方法初始化echarts了，接下来只需要配置option就可以得到渲染的图表。例子中有很多省略，完整的例子代码<a href="https://github.com/zrysmt/echarts3/blob/master/echarts/demo/bar.html" target="_blank" rel="noopener">戳我</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">chart.setOption(&#123;</span><br><span class="line">    backgroundColor: <span class="string">'#eee'</span>,</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'我是柱状图'</span>,</span><br><span class="line">        padding: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        inactiveColor: <span class="string">'#abc'</span>,</span><br><span class="line">        borderWidth: <span class="number">1</span>,</span><br><span class="line">        data: [&#123;<span class="attr">name</span>: <span class="string">'bar'</span>&#125;, <span class="string">'bar2'</span>, <span class="string">'\n'</span>, <span class="string">'bar3'</span>, <span class="string">'bar4'</span>],</span><br><span class="line">        align: <span class="string">'left'</span>,</span><br><span class="line">        tooltip: &#123;<span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        top: <span class="number">25</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">            magicType: &#123; <span class="attr">type</span>: [<span class="string">'line'</span>, <span class="string">'bar'</span>, <span class="string">'stack'</span>, <span class="string">'tiled'</span>]&#125;,</span><br><span class="line">            dataView: &#123;&#125;,</span><br><span class="line">            saveAsImage: &#123;<span class="attr">pixelRatio</span>: <span class="number">2</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        iconStyle: &#123;</span><br><span class="line">            emphasis: &#123;<span class="attr">textPosition</span>: <span class="string">'top'</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    xAxis: &#123; <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123; <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'bar'</span>,   <span class="attr">type</span>: <span class="string">'bar'</span>,   <span class="attr">stack</span>: <span class="string">'one'</span>,</span><br><span class="line">        itemStyle: itemStyle,  <span class="attr">data</span>: data1</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'bar2'</span>,  <span class="attr">type</span>: <span class="string">'bar'</span>,  <span class="attr">stack</span>: <span class="string">'one'</span>,</span><br><span class="line">        itemStyle: itemStyle,  <span class="attr">data</span>: data2</span><br><span class="line">    &#125;, &#123; <span class="comment">//... ...</span></span><br><span class="line">    &#125;, &#123; <span class="comment">//... ...</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>源码的主要部分列下来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; option 配置项</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; notMerge 可选，是否不跟之前设置的option进行合并，默认为false，即合并。</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; [lazyUpdate=false] Useful when setOption frequently.</span></span><br><span class="line"><span class="comment"> * //可选，在设置完option后是否不立即更新图表，默认为false，即立即更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">echartsProto.setOption = <span class="function"><span class="keyword">function</span>(<span class="params">option, notMerge, lazyUpdate</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._model || notMerge) &#123; <span class="comment">//不和之前的option合并</span></span><br><span class="line">        <span class="keyword">var</span> optionManager = <span class="keyword">new</span> OptionManager(<span class="keyword">this</span>._api); <span class="comment">//option配置管理</span></span><br><span class="line">        <span class="keyword">var</span> theme = <span class="keyword">this</span>._theme;</span><br><span class="line">        <span class="keyword">var</span> ecModel = <span class="keyword">this</span>._model = <span class="keyword">new</span> GlobalModel(<span class="literal">null</span>, <span class="literal">null</span>, theme, optionManager);</span><br><span class="line">        ecModel.init(<span class="literal">null</span>, <span class="literal">null</span>, theme, optionManager);</span><br><span class="line">        <span class="comment">//不合并的时候会重绘，option为最后一次使用setOption方法的参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.__lastOnlyGraphic = !!(option &amp;&amp; option.graphic); <span class="comment">//是否设置了graphic属性</span></span><br><span class="line">    <span class="comment">//graphic 是原生图形元素组件。可以支持的图形元素包括：image, text, circle, sector, </span></span><br><span class="line">    <span class="comment">//ring, polygon, polyline, rect, line, bezierCurve, arc, group,</span></span><br><span class="line">    <span class="comment">//http://echarts.baidu.com/option.html#graphic</span></span><br><span class="line">    zrUtil.each(option, <span class="function"><span class="keyword">function</span>(<span class="params">o, mainType</span>) </span>&#123;</span><br><span class="line">        mainType !== <span class="string">'graphic'</span> &amp;&amp; (<span class="keyword">this</span>.__lastOnlyGraphic = <span class="literal">false</span>);</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setOption之前先执行的函数列表optionPreprocessorFuncs</span></span><br><span class="line">    <span class="keyword">this</span>._model.setOption(option, optionPreprocessorFuncs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lazyUpdate) &#123; <span class="comment">//为true，不立刻更新</span></span><br><span class="line">        <span class="keyword">this</span>[OPTION_UPDATED] = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        updateMethods.prepareAndUpdate.call(<span class="keyword">this</span>); <span class="comment">//准备更新</span></span><br><span class="line">        <span class="comment">// Ensure zr refresh sychronously, and then pixel in canvas can be</span></span><br><span class="line">        <span class="comment">// fetched after `setOption`.</span></span><br><span class="line">        <span class="keyword">this</span>._zr.flush(); <span class="comment">//调用zrender中的方法，立即刷新</span></span><br><span class="line">        <span class="keyword">this</span>[OPTION_UPDATED] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>[IN_MAIN_PROCESS] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    flushPendingActions.call(<span class="keyword">this</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>说明： 这里<code>setOption</code>调用的顺序是这样的<code>echarts.setOption</code>==&gt;<code>GlobalModel.setOption(GlobalModel.js)</code>==&gt;<code>OptionManager.setOption(OptionMManager.js)</code></p><p>其中有两个关键的方法：<code>prepareAndUpdate</code>和<code>flush</code>,分别用来准备刷新和刷新，渲染图表，下面我们来一步一步看<code>prepareAndUpdate</code>方法。</p><h2 id="3-4-doRender方法"><a href="#3-4-doRender方法" class="headerlink" title="3.4 doRender方法"></a>3.4 <code>doRender</code>方法</h2><p>接着上面的<code>prepareAndUpdate</code>方法看准备渲染图表视图的执行顺序：<code>updateMethods.prepareAndUpdate</code>==&gt;<code>updateMethods.update</code>==&gt;<code>doRender</code>==&gt;<code>render</code>。<br>在<code>doRneder</code>函数中渲染所有components和charts,<code>render</code>方法分别对应在各个components和charts中有具体的实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doRender</span>(<span class="params">ecModel, payload</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> api = <span class="keyword">this</span>._api;</span><br><span class="line">    <span class="comment">// Render all components 渲染所有的配置组件,例如title,grid,toolbox,tooltip等</span></span><br><span class="line">    each(<span class="keyword">this</span>._componentsViews, <span class="function"><span class="keyword">function</span>(<span class="params">componentView</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> componentModel = componentView.__model;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"componentModel:"</span>, componentModel);</span><br><span class="line">        componentView.render(componentModel, ecModel, api, payload);</span><br><span class="line">        <span class="comment">//在componentModal文件夹下调用相应的render方法</span></span><br><span class="line">        updateZ(componentModel, componentView);</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    each(<span class="keyword">this</span>._chartsViews, <span class="function"><span class="keyword">function</span>(<span class="params">chart</span>) </span>&#123;</span><br><span class="line">        chart.__alive = <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Render all charts 渲染所有的charts</span></span><br><span class="line">    ecModel.eachSeries(<span class="function"><span class="keyword">function</span>(<span class="params">seriesModel, idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> chartView = <span class="keyword">this</span>._chartsMap[seriesModel.__viewId]; <span class="comment">//this._chartsMap</span></span><br><span class="line">        chartView.__alive = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        chartView.render(seriesModel, ecModel, api, payload);</span><br><span class="line">        chartView.group.silent = !!seriesModel.get(<span class="string">'silent'</span>);</span><br><span class="line">        </span><br><span class="line">        updateZ(seriesModel, chartView);</span><br><span class="line">        updateProgressiveAndBlend(seriesModel, chartView);</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If use hover layer 如果使用hover，更新hover层</span></span><br><span class="line">    updateHoverLayerStatus(<span class="keyword">this</span>._zr, ecModel);</span><br><span class="line"></span><br><span class="line">    each(<span class="keyword">this</span>._chartsViews, <span class="function"><span class="keyword">function</span>(<span class="params">chart</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!chart.__alive) &#123;</span><br><span class="line">            chart.remove(ecModel, api);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-关于option的处理"><a href="#4-关于option的处理" class="headerlink" title="4.关于option的处理"></a>4.关于option的处理</h1><p><code>3.3</code>部分已经说过使用<code>setOption</code>处理配置项options，这里介绍下源码里面是怎样管理配置项的。主要源码在echarts/model/Model（以下简称Model），echarts/model/Global（以下简称GlobalModel，继承Model），echarts/model/OptionManager（以下简称OptionManager）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._model.setOption(option, optionPreprocessorFuncs);</span><br></pre></td></tr></table></figure><p>注意这里面有个对象<code>this._model</code>用来存储配置项options的。</p><ul><li><p>Model模块是一些基本的方法，主要的方法就是<code>get</code>,<code>getModel</code>通过options的对象名获取对象值。还混合了lineStyle，areaStyle，textStyle,itemStyle方法用来管理与线，文本，项目有关的options属性。</p></li><li><p>GlobalModel继承Model，暴露Model的方法，再封装一些自己独有的方法。</p></li><li><p>OptionManager是用来管理options配置项的，有重要的<code>setOption</code>方法，<code>mergeOption</code>方法(私有方法，合并options），<code>parseRawOption</code>方法（私有方法，解析options）</p></li></ul><h1 id="5-component组件和charts图表"><a href="#5-component组件和charts图表" class="headerlink" title="5.component组件和charts图表"></a>5.component组件和charts图表</h1><p>component组件和charts图表均有<code>render</code>方法，这是我们来重点探究的方法。</p><h2 id="5-1-component组件"><a href="#5-1-component组件" class="headerlink" title="5.1 component组件"></a>5.1 component组件</h2><p>component组件和配置项的属性一一对应，对于复杂点的配置项，组件文件夹下的管理方式是按照MVC方式的，如legend文件夹下有基本的<code>LegendModel.js</code>(M),<code>LegendView</code>(V),<code>LegendAction</code>(C)，与其他的组件一样，还可能有其他的一些js文件。</p><p>先看一个比较简单的例子，如<code>title.js</code>,我们来分析下它的<code>render</code>方法。</p><ul><li>首先是使用<code>extendComponentModel</code>，相当于Model层，用来配置一些默认的配置项（有的复杂点的会把这些单独拆分开一个Model文件）。</li><li>然后是<code>extendComponentView</code>,相当于View层，<code>render</code>方法就在其中（有的复杂点的会把这些单独拆分开一个View文件）。</li></ul><p>在<code>render</code>方法中首先当然是获取到配置options对象的内容。通过titleModel.getModel（path）（每个组件都会有一个对应的Model名称）获取对应的属性path。<br>然后调用<code>new graphic.Text()</code>去调用zrender里面的方法，渲染到canvas上，具体的实现参考上面给出的zrender源码分析内容。</p><h2 id="5-2-charts图表"><a href="#5-2-charts图表" class="headerlink" title="5.2 charts图表"></a>5.2 charts图表</h2><p>在charts文件夹下是各种类型的图表，包含line，bar，pie，map等,每种类型的文件夹下都有下面的几个文件结尾的js文件。</p><ul><li><code>**Series.js</code> 继承<code>src/modal/series.js</code>中的基础方法，用来管理配置中的<code>series</code>属性，还提供一些默认的配置<code>defaultOption</code>;</li><li><code>**Veiw.js</code> 继承至<code>src/view/Chart.js</code>（这里面相当于接口，没有具体实现方法），主要方法是<code>render</code>,渲染视图<br><code>render</code>方法调用的是<code>zrender.js</code>中的内容，如<code>lineView.js</code>调用的是<code>new graphic.Rect</code>.</li></ul><h1 id="6-事件"><a href="#6-事件" class="headerlink" title="6.事件"></a>6.事件</h1><p>示例中的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chart.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关键源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRegisterEventWithLowercaseName</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">eventName, handler, context</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// Event name is all lowercase</span></span><br><span class="line">     eventName = eventName &amp;&amp; eventName.toLowerCase();</span><br><span class="line">     Eventful.prototype[method].call(<span class="keyword">this</span>, eventName, handler, context);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line">echartsProto.on = createRegisterEventWithLowercaseName(<span class="string">'on'</span>);</span><br><span class="line">echartsProto.off = createRegisterEventWithLowercaseName(<span class="string">'off'</span>);</span><br><span class="line">echartsProto.one = createRegisterEventWithLowercaseName(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure><p><code>Eventful</code>使用的是zrender中的（zrender/mixin/Eventful），是事件扩展，包括on,off,one,trigger等方法。</p><p>我们知道canvas API没有提供监听每个元素的机制，这就需要一些处理。处理的思路是：监听事件的作用坐标（如点击时候的坐标），判断在哪个绘制元素的范围中，如果在某个元素中，这个元素就监听该事件。具体的思路可以查看<a href="http://blog.csdn.net/vuturn/article/details/45822905" target="_blank" rel="noopener">HTML5 Canvas绘制的图形的事件处理</a>。</p><p>参考阅读：</p><ul><li><a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">echarts 3中文官网</a></li><li><a href="https://github.com/ecomfe/echarts" target="_blank" rel="noopener">echarts 3 github网址</a></li><li><a href="http://blog.csdn.net/future_todo/article/details/54341386" target="_blank" rel="noopener">ECharts 3.0底层zrender 3.x源码分析1-总体架构</a></li><li><a href="http://blog.csdn.net/future_todo/article/details/54341426" target="_blank" rel="noopener">ECharts 3.0底层zrender 3.x源码分析2-Painter（V层）</a></li><li><a href="http://blog.csdn.net/future_todo/article/details/54341458" target="_blank" rel="noopener">ECharts 3.0底层zrender 3.x源码分析3-Handler（C层）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> ECharts </tag>
            
            <tag> zrender </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ECharts 3.0底层zrender 3.x源码分析2-Painter（V层）</title>
      <link href="/2017/01/11/ECharts%203.0%E5%BA%95%E5%B1%82zrender%203.x%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902-Painter%EF%BC%88V%E5%B1%82%EF%BC%89/"/>
      <url>/2017/01/11/ECharts%203.0%E5%BA%95%E5%B1%82zrender%203.x%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902-Painter%EF%BC%88V%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>上一篇介绍了zrender的总体结构，这一篇我们就详细介绍View层–Painter(Painter.js)。</p><p>一些demo和没有在博客中介绍的源码请进我的<a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">github仓库</a>。</p><blockquote><p><a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">https://github.com/zrysmt/echarts3/tree/master/zrender</a></p></blockquote><p>Painter利用canvas负责真正的绘图操作。</p><ul><li>1.负责canvas及其周边DOM元素的创建与处理</li><li>2.负责调用各个Shape（预定义好的）进行绘制</li><li>3.提供基本的操作方法，渲染(render)、刷新(refresh)、尺寸变化(resize)、擦除(clear)等</li></ul><h1 id="1-渲染结构分析"><a href="#1-渲染结构分析" class="headerlink" title="1.渲染结构分析"></a>1.渲染结构分析</h1><p>两个例子都是渲染到div上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width:1000px;height:600px;margin:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>zrender 3.x版本渲染结果（demo/demo1/demo3-chart.html）<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echarts/zrender2-1.jpg" alt=""><br>我们可以看到渲染结果都会新建一层div（从下面的分析我们可以得到这个div就是<code>_domRoot</code>），里面嵌套canvas。如果有使用addHover（有hover层,data-zr-dom-id=”zr_100000”）的话，hover层会单独列一个canvas画布。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sector.on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    zr.addHover(<span class="keyword">this</span>, &#123;</span><br><span class="line">        stroke: <span class="string">'yellow'</span>,</span><br><span class="line">        lineWidth: <span class="number">10</span>,</span><br><span class="line">        opacity: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    zr.refresh();</span><br><span class="line">&#125;);</span><br><span class="line">sector.on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    zr.removeHover(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 1000px; height: 600px; margin: 0px; -webkit-tap-highlight-color: transparent; user-select: none;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; overflow: hidden; width: 1000px; height: 600px; padding: 0px; margin: 0px; border-width: 0px; cursor: default;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"1000"</span> <span class="attr">height</span>=<span class="string">"600"</span> <span class="attr">data-zr-dom-id</span>=<span class="string">"zr_0"</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0px; top: 0px; width: 1000px; height: 600px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"1000"</span> <span class="attr">height</span>=<span class="string">"600"</span> <span class="attr">data-zr-dom-id</span>=<span class="string">"zr_100000"</span> <span class="attr">style</span>=<span class="string">"position: absolute; left: 0px; top: 0px; width: 1000px; height: 600px; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 0px; margin: 0px; border-width: 0px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Painter = <span class="function"><span class="keyword">function</span> (<span class="params">root, storage, opts</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// In node environment using node-canvas</span></span><br><span class="line">        <span class="keyword">var</span> singleCanvas = !root.nodeName <span class="comment">// In node ?</span></span><br><span class="line">            || root.nodeName.toUpperCase() === <span class="string">'CANVAS'</span>;</span><br><span class="line">        <span class="keyword">this</span>._opts = opts = util.extend(&#123;&#125;, opts || &#123;&#125;);</span><br><span class="line">        <span class="keyword">this</span>.dpr = opts.devicePixelRatio || config.devicePixelRatio;</span><br><span class="line">        <span class="keyword">this</span>._singleCanvas = singleCanvas;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 绘图容器</span></span><br><span class="line"><span class="comment">         * @type &#123;HTMLElement&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">        <span class="keyword">var</span> rootStyle = root.style;</span><br><span class="line">        <span class="keyword">if</span> (rootStyle) &#123;</span><br><span class="line">            rootStyle[<span class="string">'-webkit-tap-highlight-color'</span>] = <span class="string">'transparent'</span>;</span><br><span class="line">            rootStyle[<span class="string">'-webkit-user-select'</span>] =</span><br><span class="line">            rootStyle[<span class="string">'user-select'</span>] =</span><br><span class="line">            rootStyle[<span class="string">'-webkit-touch-callout'</span>] = <span class="string">'none'</span>;</span><br><span class="line">            root.innerHTML = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @type &#123;module:zrender/Storage&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 存储图层画布，这个变量很重要</span></span><br><span class="line"><span class="comment">         * @type &#123;Array.&lt;number&gt;&#125;</span></span><br><span class="line"><span class="comment">         * @private</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> zlevelList = <span class="keyword">this</span>._zlevelList = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 图层</span></span><br><span class="line"><span class="comment">         * @type &#123;Object.&lt;string, module:zrender/Layer&gt;&#125;</span></span><br><span class="line"><span class="comment">         * @private</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> layers = <span class="keyword">this</span>._layers = &#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>._layerConfig = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!singleCanvas) &#123;<span class="comment">//没有画布，就使用div</span></span><br><span class="line">            <span class="keyword">this</span>._width = <span class="keyword">this</span>._getSize(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>._height = <span class="keyword">this</span>._getSize(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> domRoot = <span class="keyword">this</span>._domRoot = createRoot(</span><br><span class="line">                <span class="keyword">this</span>._width, <span class="keyword">this</span>._height</span><br><span class="line">            );</span><br><span class="line">            root.appendChild(domRoot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//已经有块画布</span></span><br><span class="line">            <span class="comment">// Use canvas width and height directly</span></span><br><span class="line">            <span class="keyword">var</span> width = root.width;</span><br><span class="line">            <span class="keyword">var</span> height = root.height;</span><br><span class="line">            <span class="keyword">this</span>._width = width;</span><br><span class="line">            <span class="keyword">this</span>._height = height;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create layer if only one given canvas</span></span><br><span class="line">            <span class="comment">// dpr设置为1，是因为canvas已经定了宽和高</span></span><br><span class="line">            <span class="keyword">var</span> mainLayer = <span class="keyword">new</span> Layer(root, <span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">            mainLayer.initContext();</span><br><span class="line">            <span class="comment">// FIXME Use canvas width and height</span></span><br><span class="line">            <span class="comment">// mainLayer.resize(width, height);</span></span><br><span class="line">            layers[<span class="number">0</span>] = mainLayer;</span><br><span class="line">            zlevelList.push(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.pathToImage = <span class="keyword">this</span>._createPathToImage();</span><br><span class="line">        <span class="comment">// Layers for progressive rendering</span></span><br><span class="line">        <span class="keyword">this</span>._progressiveLayers = [];</span><br><span class="line">        <span class="keyword">this</span>._hoverlayer;</span><br><span class="line">        <span class="keyword">this</span>._hoverElements = [];</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h1 id="3-Painter-prototype"><a href="#3-Painter-prototype" class="headerlink" title="3.Painter.prototype"></a>3.Painter.prototype</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Painter.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Painter,</span><br><span class="line">    isSingleCanvas: function() &#123;&#125;,</span><br><span class="line">    getViewportRoot: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params">paintAll</span>) </span>&#123;&#125;,</span><br><span class="line">    addHover: <span class="function"><span class="keyword">function</span>(<span class="params">el, hoverStyle</span>) </span>&#123;&#125;,</span><br><span class="line">    removeHover: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;&#125;,</span><br><span class="line">    clearHover: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;&#125;,</span><br><span class="line">    refreshHover: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    _startProgessive: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    _clearProgressive: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    _paintList: <span class="function"><span class="keyword">function</span>(<span class="params">list, paintAll</span>) </span>&#123;&#125;,</span><br><span class="line">    _doPaintList: <span class="function"><span class="keyword">function</span>(<span class="params">list, paintAll</span>) </span>&#123;&#125;,</span><br><span class="line">    _doPaintEl: <span class="function"><span class="keyword">function</span>(<span class="params">el, currentLayer, forcePaint, scope</span>) </span>&#123;&#125;,</span><br><span class="line">    getLayer: <span class="function"><span class="keyword">function</span>(<span class="params">zlevel</span>) </span>&#123;&#125;,</span><br><span class="line">    insertLayer: <span class="function"><span class="keyword">function</span>(<span class="params">zlevel, layer</span>) </span>&#123;&#125;,</span><br><span class="line">    eachLayer: <span class="function"><span class="keyword">function</span>(<span class="params">cb, context</span>) </span>&#123;&#125;,</span><br><span class="line">    eachBuildinLayer: <span class="function"><span class="keyword">function</span>(<span class="params">cb, context</span>) </span>&#123;&#125;,</span><br><span class="line">    eachOtherLayer: <span class="function"><span class="keyword">function</span>(<span class="params">cb, context</span>) </span>&#123;&#125;,</span><br><span class="line">    getLayers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    _updateLayerStatus: <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;&#125;,</span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    _clearLayer: <span class="function"><span class="keyword">function</span>(<span class="params">layer</span>) </span>&#123;&#125;,</span><br><span class="line">    configLayer: <span class="function"><span class="keyword">function</span>(<span class="params">zlevel, config</span>) </span>&#123;&#125;,</span><br><span class="line">    delLayer: <span class="function"><span class="keyword">function</span>(<span class="params">zlevel</span>) </span>&#123;&#125;,</span><br><span class="line">    resize: <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;&#125;,</span><br><span class="line">    clearLayer: <span class="function"><span class="keyword">function</span>(<span class="params">zlevel</span>) </span>&#123;&#125;,</span><br><span class="line">    dispose: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    getRenderedCanvas: <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;&#125;,</span><br><span class="line">    getWidth: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    getHeight: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    _getSize: <span class="function"><span class="keyword">function</span>(<span class="params">whIdx</span>) </span>&#123;&#125;,</span><br><span class="line">    _pathToImage: <span class="function"><span class="keyword">function</span>(<span class="params">id, path, width, height, dpr</span>) </span>&#123;&#125;,</span><br><span class="line">    _createPathToImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们再来回顾下整个渲染的过程：</strong><br><code>add</code>（zrender.js）–&gt;<code>addRoot</code>(Storage.js) –&gt; <code>addToMap</code>(Storage.js) –&gt;<br><code>dirty</code>[标记为脏的，下一帧渲染] (path.js) –&gt; <code>refresh</code>(Painter.js)–&gt;<code>_paintList</code>[遍历_displayList] (Painter.js)–&gt;<br><code>_doPaintEl</code>[渲染单个元素] Painter.js) –&gt;<code>brush</code>(Path.js)–&gt;<code>buildPath</code> (各个类型的shape)</p><ul><li><code>refresh</code>刷新，刷新去绘制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 刷新</span></span><br><span class="line"><span class="comment">* @param &#123;boolean&#125; [paintAll=false] 强制绘制所有displayable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">refresh: <span class="function"><span class="keyword">function</span>(<span class="params">paintAll</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">this</span>.storage.getDisplayList(<span class="literal">true</span>); <span class="comment">//要绘制的图形</span></span><br><span class="line">    <span class="keyword">var</span> zlevelList = <span class="keyword">this</span>._zlevelList;</span><br><span class="line">    <span class="keyword">this</span>._paintList(list, paintAll); <span class="comment">//去绘制</span></span><br><span class="line">    <span class="comment">// Paint custum layers 绘制layer层</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; zlevelList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> z = zlevelList[i];</span><br><span class="line">        <span class="keyword">var</span> layer = <span class="keyword">this</span>._layers[z];</span><br><span class="line">        <span class="keyword">if</span> (!layer.isBuildin &amp;&amp; layer.refresh) &#123;</span><br><span class="line">            layer.refresh();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.refreshHover(); <span class="comment">//刷新hover层</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._progressiveLayers.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>._startProgessive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_paintList</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_paintList: <span class="function"><span class="keyword">function</span>(<span class="params">list, paintAll</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paintAll == <span class="literal">null</span>) &#123;</span><br><span class="line">        paintAll = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._updateLayerStatus(list);</span><br><span class="line">    <span class="keyword">this</span>._clearProgressive();</span><br><span class="line">    <span class="keyword">this</span>.eachBuildinLayer(preProcessLayer);</span><br><span class="line">    <span class="keyword">this</span>._doPaintList(list, paintAll); <span class="comment">//全部标注为脏的渲染【dirty(false)】</span></span><br><span class="line">    <span class="keyword">this</span>.eachBuildinLayer(postProcessLayer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_doPaintList</code></li></ul><p>注意这里已经遍历了（遍历的是_displayList数组），所以后面的只针对单个元素绘制即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//... ...</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = list.length; i &lt; l; i++) &#123;</span><br><span class="line">   <span class="comment">//... ...</span></span><br><span class="line">   <span class="keyword">this</span>._doPaintEl(el, currentLayer, paintAll, scope);<span class="comment">//绘制每个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>_doPaintEl</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//... ...</span></span><br><span class="line">el.brush(ctx, scope.prevEl || <span class="literal">null</span>);<span class="comment">//在Path.js中的方法brush</span></span><br></pre></td></tr></table></figure><h1 id="4-分析Painter对象"><a href="#4-分析Painter对象" class="headerlink" title="4.分析Painter对象"></a>4.分析Painter对象</h1><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echarts/zrender2-2.jpg" alt=""></p><p>这一系列的操作是：</p><ul><li>创建canvas外层包裹着_domRoot(div)</li><li>canvas要绘制的东西都存储在storage中的_displayList数组中</li><li>遍历<code>_displayList</code></li><li>最后调用buildPath的canvas绘制。</li></ul><h1 id="5-Hover图层"><a href="#5-Hover图层" class="headerlink" title="5.Hover图层"></a>5.Hover图层</h1><p>如第1部分所见，如果增加了hover层（addHOver方法），那么会增加一层canvas，现在就来看这一层canvas是如何作用的。<br><code>addHover</code>(zrender.js)–&gt;</p><ul><li><code>addHover</code>(zrender.js)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addHover: <span class="function"><span class="keyword">function</span>(<span class="params">el, style</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.painter.addHover) &#123;</span><br><span class="line">        <span class="keyword">this</span>.painter.addHover(el, style);</span><br><span class="line">        <span class="keyword">this</span>.refreshHover();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addHover</code>(Painter.js)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">addHover: <span class="function"><span class="keyword">function</span>(<span class="params">el, hoverStyle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (el.__hoverMir) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> elMirror = <span class="keyword">new</span> el.constructor(&#123;</span><br><span class="line">        style: el.style,</span><br><span class="line">        shape: el.shape</span><br><span class="line">    &#125;);</span><br><span class="line">    elMirror.__from = el;</span><br><span class="line">    el.__hoverMir = elMirror;</span><br><span class="line">    elMirror.setStyle(hoverStyle);</span><br><span class="line">    <span class="keyword">this</span>._hoverElements.push(elMirror);</span><br><span class="line">    <span class="comment">//存放到this._hoverElements(数组)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在第三部分已经看到<code>refresh</code>方法中的<code>refreshHover</code>，渲染canvas时候，会渲染两个canvas，一个是主canvas，一个是hover层canvas，第二个canvas就是使用<code>refreshHover</code>方法。</p><ul><li><code>refreshHover</code>(Painter.js)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">refreshHover: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hoverElements = <span class="keyword">this</span>._hoverElements;</span><br><span class="line">    <span class="keyword">var</span> len = hoverElements.length;</span><br><span class="line">    <span class="keyword">var</span> hoverLayer = <span class="keyword">this</span>._hoverlayer;</span><br><span class="line">    hoverLayer &amp;&amp; hoverLayer.clear();</span><br><span class="line">    <span class="keyword">if</span> (!len) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timsort(hoverElements, <span class="keyword">this</span>.storage.displayableSortFunc);</span><br><span class="line">    <span class="keyword">if</span> (!hoverLayer) &#123;<span class="comment">//不存在则会新创建一层canvas</span></span><br><span class="line">        hoverLayer = <span class="keyword">this</span>._hoverlayer = <span class="keyword">this</span>.getLayer(<span class="number">1e5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scope = &#123;&#125;;</span><br><span class="line">    hoverLayer.ctx.save();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len;) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = hoverElements[i];</span><br><span class="line">        <span class="keyword">var</span> originalEl = el.__from;</span><br><span class="line">        <span class="keyword">if</span> (!(originalEl &amp;&amp; originalEl.__zr)) &#123;</span><br><span class="line">            hoverElements.splice(i, <span class="number">1</span>);</span><br><span class="line">            originalEl.__hoverMir = <span class="literal">null</span>;</span><br><span class="line">            len--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (!originalEl.invisible) &#123;</span><br><span class="line">            el.transform = originalEl.transform;</span><br><span class="line">            el.invTransform = originalEl.invTransform;</span><br><span class="line">            el.__clipPaths = originalEl.__clipPaths;</span><br><span class="line">            <span class="comment">// el.</span></span><br><span class="line">            <span class="keyword">this</span>._doPaintEl(el, hoverLayer, <span class="literal">true</span>, scope);<span class="comment">//同第3部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hoverLayer.ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考阅读：</strong></p><ul><li><a href="- [canvas-mdn教程]（https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">canvas-mdn教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_animations" target="_blank" rel="noopener">canvas基本的动画-mdn</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> ECharts </tag>
            
            <tag> zrender </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ECharts 3.0底层zrender 3.x源码分析3-Handler（C层）</title>
      <link href="/2017/01/11/ECharts%203.0%E5%BA%95%E5%B1%82zrender%203.x%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903-Handler%EF%BC%88C%E5%B1%82%EF%BC%89/"/>
      <url>/2017/01/11/ECharts%203.0%E5%BA%95%E5%B1%82zrender%203.x%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903-Handler%EF%BC%88C%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这一篇，介绍下Handler处理机制。</p><p>Handler负责事件处理,包括’click’, ‘dblclick’, ‘mousewheel’, ‘mouseout’,        ‘mouseup’, ‘mousedown’, ‘mousemove’, ‘contextmenu’等。我们知道canvas API没有提供监听每个元素的机制，这就需要一些处理。处理的思路是：监听事件的作用坐标（如点击时候的坐标），判断在哪个绘制元素的范围中，如果在某个元素中，这个元素就监听该事件。</p><p>一些demo和没有在博客中介绍的源码请进我的<a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">github仓库</a>。</p><blockquote><p><a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">https://github.com/zrysmt/echarts3/tree/master/zrender</a></p></blockquote><h1 id="1-Handle-js整体"><a href="#1-Handle-js整体" class="headerlink" title="1.Handle.js整体"></a>1.Handle.js整体</h1><p>同样Handle.js文件的结构是一个构造函数，一个prototype扩展原型，一些混入模式。</p><p>我们首先看在入口（zrender.js）中的调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handerProxy = !env.node ? <span class="keyword">new</span> HandlerProxy(painter.getViewportRoot()) : <span class="literal">null</span>;<span class="comment">//env.node默认为false</span></span><br><span class="line"><span class="comment">//HandlerProxy 是移动端的一些处理事件</span></span><br><span class="line"><span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(storage, painter, handerProxy, painter.root);</span><br></pre></td></tr></table></figure></p><p><strong>构造函数：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Handler = <span class="function"><span class="keyword">function</span>(<span class="params">storage, painter, proxy, painterRoot</span>) </span>&#123;</span><br><span class="line">        Eventful.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">        <span class="keyword">this</span>.painter = painter;</span><br><span class="line">        <span class="keyword">this</span>.painterRoot = painterRoot;</span><br><span class="line">        proxy = proxy || <span class="keyword">new</span> EmptyProxy();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Proxy of event. can be Dom, WebGLSurface, etc.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.proxy = proxy;</span><br><span class="line">        <span class="comment">// Attach handler</span></span><br><span class="line">        proxy.handler = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>._hovered;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @private</span></span><br><span class="line"><span class="comment">         * @type &#123;Date&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>._lastTouchMoment;</span><br><span class="line">        <span class="keyword">this</span>._lastX;<span class="comment">//坐标位置x</span></span><br><span class="line">        <span class="keyword">this</span>._lastY;<span class="comment">//坐标位置y</span></span><br><span class="line"></span><br><span class="line">        Draggable.call(<span class="keyword">this</span>);</span><br><span class="line">        util.each(handlerNames, <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            proxy.on &amp;&amp; proxy.on(name, <span class="keyword">this</span>[name], <span class="keyword">this</span>);</span><br><span class="line">        &#125;, <span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>构造函数中保留的有坐标信息。</p><p>prototype中的一个重要的方法<code>dispatchToElement</code>,针对目标图形元素触发事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件分发代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; targetEl 目标图形元素</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; eventName 事件名称</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; event 事件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dispatchToElement: <span class="function"><span class="keyword">function</span>(<span class="params">targetEl, eventName, event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> eventHandler = <span class="string">'on'</span> + eventName;</span><br><span class="line">    <span class="keyword">var</span> eventPacket = makeEventPacket(eventName, targetEl, event);</span><br><span class="line">    <span class="keyword">var</span> el = targetEl;</span><br><span class="line">    <span class="keyword">while</span> (el) &#123;</span><br><span class="line">        el[eventHandler] &amp;&amp; (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));</span><br><span class="line">        el.trigger(eventName, eventPacket);<span class="comment">//触发</span></span><br><span class="line">        el = el.parent;</span><br><span class="line">        <span class="keyword">if</span> (eventPacket.cancelBubble) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!eventPacket.cancelBubble) &#123;</span><br><span class="line">        <span class="comment">// 冒泡到顶级 zrender 对象</span></span><br><span class="line">        <span class="keyword">this</span>.trigger(eventName, eventPacket);</span><br><span class="line">        <span class="comment">// 分发事件到用户自定义层</span></span><br><span class="line">        <span class="comment">// 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在</span></span><br><span class="line">        <span class="keyword">this</span>.painter &amp;&amp; <span class="keyword">this</span>.painter.eachOtherLayer(<span class="function"><span class="keyword">function</span>(<span class="params">layer</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span>(layer[eventHandler]) == <span class="string">'function'</span>) &#123;</span><br><span class="line">                layer[eventHandler].call(layer, eventPacket);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (layer.trigger) &#123;</span><br><span class="line">                layer.trigger(eventName, eventPacket);<span class="comment">//触发</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>混入Eventful(发布订阅模式事件)、Draggable（拖动事件）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">util.mixin(Handler, Eventful);</span><br><span class="line">util.mixin(Handler, Draggable);</span><br></pre></td></tr></table></figure></p><h1 id="2-canvas上元素的监听事件"><a href="#2-canvas上元素的监听事件" class="headerlink" title="2.canvas上元素的监听事件"></a>2.canvas上元素的监听事件</h1><p>对于一些事件的处理（Handler.js）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">util.each([<span class="string">'click'</span>, <span class="string">'mousedown'</span>, <span class="string">'mouseup'</span>, <span class="string">'mousewheel'</span>, <span class="string">'dblclick'</span>, <span class="string">'contextmenu'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">       Handler.prototype[name] = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">           <span class="comment">// Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover</span></span><br><span class="line">           <span class="keyword">var</span> hovered = <span class="keyword">this</span>.findHover(event.zrX, event.zrY, <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (name === <span class="string">'mousedown'</span>) &#123;</span><br><span class="line">               <span class="keyword">this</span>._downel = hovered;</span><br><span class="line">               <span class="comment">// In case click triggered before mouseup</span></span><br><span class="line">               <span class="keyword">this</span>._upel = hovered;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">'mosueup'</span>) &#123;</span><br><span class="line">               <span class="keyword">this</span>._upel = hovered;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">'click'</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>._downel !== <span class="keyword">this</span>._upel) &#123;</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="built_in">console</span>.info(<span class="string">"hovered:"</span>,hovered);</span><br><span class="line">           <span class="built_in">console</span>.info(<span class="keyword">this</span>);</span><br><span class="line">           <span class="keyword">this</span>.dispatchToElement(hovered, name, event);</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p><p>我们在其中打印了this，通过demo/demo1/demo3-chartHasHover.html的例子我们可以发现，点击的时候都会打印this，而且打印3次。</p><p>通过打印的hovered，我们可以看出来hovered就是我们点击的对象。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echarts/zrender3-1.jpg" alt=""></p><p><code>findHover</code>调用的是<code>isHover</code>函数，在<code>isHover</code>函数中通过<code>displayable</code>（Displayable.js）的<code>contain</code>或者<code>rectContain</code>判断点在哪个元素中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHover</span>(<span class="params">displayable, x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (displayable[displayable.rectHover ? <span class="string">'rectContain'</span> : <span class="string">'contain'</span>](x, y)) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = displayable;</span><br><span class="line">        <span class="keyword">while</span> (el) &#123;</span><br><span class="line">            <span class="comment">// If ancestor is silent or clipped by ancestor</span></span><br><span class="line">            <span class="keyword">if</span> (el.silent || (el.clipPath &amp;&amp; !el.clipPath.contain(x, y))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            el = el.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Displayable.js的<code>contain</code>或者<code>rectContain</code>方法都是调用<code>rectContain</code>方法，判断x,y是否在图形的包围盒上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rectContain: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coord = <span class="keyword">this</span>.transformCoordToLocal(x, y);</span><br><span class="line">    <span class="keyword">var</span> rect = <span class="keyword">this</span>.getBoundingRect();<span class="comment">//@module zrender/core/BoundingRect</span></span><br><span class="line">    <span class="keyword">return</span> rect.contain(coord[<span class="number">0</span>], coord[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>zrender/core/BoundingRect的<code>contain</code>方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contain: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rect = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= rect.x &amp;&amp; x &lt;= (rect.x + rect.width) &amp;&amp; </span><br><span class="line">    y &gt;= rect.y &amp;&amp; y &lt;= (rect.y + rect.height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们再来看看，在painter.js中，其实已经为每个元素生成了它的包围盒上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmpRect = <span class="keyword">new</span> BoundingRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> viewRect = <span class="keyword">new</span> BoundingRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDisplayableCulled</span>(<span class="params">el, width, height</span>) </span>&#123;</span><br><span class="line">    tmpRect.copy(el.getBoundingRect());</span><br><span class="line">    <span class="keyword">if</span> (el.transform) &#123;</span><br><span class="line">        tmpRect.applyTransform(el.transform);</span><br><span class="line">    &#125;</span><br><span class="line">    viewRect.width = width;</span><br><span class="line">    viewRect.height = height;</span><br><span class="line">    <span class="keyword">return</span> !tmpRect.intersect(viewRect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在绘制每个元素的时候,在<code>_doPaintEl</code>方法中调用了<code>isDisplayableCulled</code>。</p><p><strong>参考阅读：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">canvas-mdn教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_animations" target="_blank" rel="noopener">canvas基本的动画-mdn</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> ECharts </tag>
            
            <tag> zrender </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ECharts 3.0底层zrender 3.x源码分析1-总体架构</title>
      <link href="/2017/01/11/ECharts%203.0%E5%BA%95%E5%B1%82zrender%203.x%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>/2017/01/11/ECharts%203.0%E5%BA%95%E5%B1%82zrender%203.x%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>zrender是一个轻量级的Canvas类库，作为百度<a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">Echarts 3.0</a>的底层基础。截至目前查看的zrender源码和文档，包括官网文档都还停留在2.x时代，我打算用一个系列介绍下zrender 3.x的使用和源码，一些demo和没有在博客中介绍的源码请进我的<a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">github仓库</a>。</p><blockquote><p><a href="https://github.com/zrysmt/echarts3/tree/master/zrender" target="_blank" rel="noopener">https://github.com/zrysmt/echarts3/tree/master/zrender</a></p></blockquote><p>基于版本 3.2.2。</p><h1 id="1-总体架构"><a href="#1-总体架构" class="headerlink" title="1.总体架构"></a>1.总体架构</h1><p>官网上的一张图和解释。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echarts/zrender1.jpg" alt=""><br><strong>MVC结构</strong>分别在Stroage.js,Painter.js,Handler.js文件下，我们稍后会详细解释，现在我们大概来看下它们分别的作用。</p><ul><li>Stroage(M) : shape数据CURD管理</li><li>Painter(V) : canvase元素生命周期管理，视图渲染，绘画，更新控制</li><li>Handler(C) : 事件交互处理，实现完整dom事件模拟封装</li><li>shape : 图形实体，分而治之的图形策略，可定义扩展</li><li>tool : 绘画扩展相关实用方法，工具及脚手架</li><li>animation : 动画扩展，提供promise式的动画接口和常用缓动函数</li></ul><p><strong>源码结构</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echarts/zrender2.jpg" alt=""><br>目录的介绍</p><ul><li>animation 动画有关；</li><li>contain 包含判断；</li><li>container Group.js 元素组的概念；</li><li>core 核心代码，包含一些工具（util.js）、事件（event.js）、唯一ID(guid.js)、矩阵运算有关（matrix.js）等；</li><li>dom HandleProxy.js dom事件有关；</li><li>graphic 图形有关，shape文件夹下就是各个图形的js文件；</li><li>mixin 混入模式要混入的函数;</li><li>tool 工具函数，包括颜色工具(color.js)，path工具(path.js)和转换工具（transformPath.js）;</li><li>vml IE中的画笔，[vml解释进入](<a href="http://www.g168.net/txt/vml/]" target="_blank" rel="noopener">http://www.g168.net/txt/vml/]</a></li><li>全局的文件 <ul><li>config.js    配置文件</li><li>Element.js   元素文件作为zrender最基本的元素</li><li>Handle.js    C层，控制层</li><li>Layer.js     图层管理</li><li>Painter.js   V层，视图层</li><li>Storage.js   M层，数据管理层</li><li>zrender.js   <strong>入口</strong></li></ul></li></ul><h1 id="2-入口（zrender-js）"><a href="#2-入口（zrender-js）" class="headerlink" title="2.入口（zrender.js）"></a>2.入口（zrender.js）</h1><h2 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h2><p>类似于jquery的无new化处理，init调用即可<br>调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zr = zrender.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br></pre></td></tr></table></figure></p><p>源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instances = &#123;&#125;;    <span class="comment">// ZRender实例map索引</span></span><br><span class="line"><span class="keyword">var</span> zrender = &#123;&#125;;</span><br><span class="line">zrender.init = <span class="function"><span class="keyword">function</span>(<span class="params">dom, opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> zr = <span class="keyword">new</span> ZRender(guid(), dom, opts);</span><br><span class="line">    instances[zr.id] = zr;</span><br><span class="line">    <span class="keyword">return</span> zr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="2-2-构造函数"><a href="#2-2-构造函数" class="headerlink" title="2.2 构造函数"></a>2.2 构造函数</h2><p>我们可以在构造函数中，看到MVC的管理机制。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ZRender = <span class="function"><span class="keyword">function</span>(<span class="params">id, dom, opts</span>) </span>&#123;</span><br><span class="line">    opts = opts || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.dom = dom;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> storage = <span class="keyword">new</span> Storage();</span><br><span class="line">    <span class="keyword">var</span> rendererType = opts.renderer;</span><br><span class="line">    <span class="keyword">if</span> (useVML) &#123;<span class="comment">//IE中使用VML渲染</span></span><br><span class="line">        <span class="keyword">if</span> (!painterCtors.vml) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You need to require \'zrender/vml/vml\' to support IE8'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rendererType = <span class="string">'vml'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!rendererType || !painterCtors[rendererType]) &#123;</span><br><span class="line">        rendererType = <span class="string">'canvas'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> painter = <span class="keyword">new</span> painterCtors[rendererType](dom, storage, opts);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.storage = storage;<span class="comment">//M</span></span><br><span class="line">    <span class="keyword">this</span>.painter = painter;<span class="comment">//V</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> handerProxy = !env.node ? <span class="keyword">new</span> HandlerProxy(painter.getViewportRoot()) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(storage, painter, handerProxy, painter.root);<span class="comment">//C</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//这里是我增加的为了调试使用的</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @type &#123;module:zrender/animation/Animation&#125;</span></span><br><span class="line"><span class="comment">     * 动画控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.animation = <span class="keyword">new</span> Animation(&#123;</span><br><span class="line">        stage: &#123;</span><br><span class="line">            update: zrUtil.bind(<span class="keyword">this</span>.flush, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.animation.start();</span><br><span class="line">    <span class="keyword">this</span>._needsRefresh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 storage.delFromMap, 每次删除元素之前删除动画</span></span><br><span class="line">    <span class="keyword">var</span> oldDelFromMap = storage.delFromMap;</span><br><span class="line">    <span class="keyword">var</span> oldAddToMap = storage.addToMap;</span><br><span class="line">    storage.delFromMap = <span class="function"><span class="keyword">function</span>(<span class="params">elId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> el = storage.get(elId);</span><br><span class="line">        oldDelFromMap.call(storage, elId);</span><br><span class="line">        el &amp;&amp; el.removeSelfFromZr(self);</span><br><span class="line">    &#125;;</span><br><span class="line">    storage.addToMap = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        oldAddToMap.call(storage, el);</span><br><span class="line">        el.addSelfToZr(self);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="2-3-ZRender-prototype"><a href="#2-3-ZRender-prototype" class="headerlink" title="2.3 ZRender.prototype"></a>2.3 ZRender.prototype</h2><p>具体的方法及其注释可以在我的github中查看，这里只将方法名放在这里。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">ZRender.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: ZRender,</span><br><span class="line">        /**</span><br><span class="line">         * 获取实例唯一标识</span><br><span class="line">         * @return &#123;string&#125;</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        getId: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>**</span><br><span class="line">         * 添加元素后就会渲染</span><br><span class="line">         * @param  &#123;<span class="attr">module</span>:zrender/Element&#125; el</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        add: function (el) &#123;</span></span><br><span class="line"><span class="regexp">            this.storage.addRoot(el);</span></span><br><span class="line"><span class="regexp">            this._needsRefresh = true;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        /</span>**</span><br><span class="line">         * 删除元素</span><br><span class="line">         * @param  &#123;<span class="attr">module</span>:zrender/Element&#125; el</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        remove: function (el) &#123; &#125;,</span></span><br><span class="line"><span class="regexp">        configLayer: function (zLevel, config) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Repaint the canvas immediately*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        refreshImmediately: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Mark and repaint the canvas <span class="keyword">in</span> the next frame <span class="keyword">of</span> browser*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        refresh: function() &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        flush: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>**Add element to hover layer *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        addHover: function (el, style) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Add element <span class="keyword">from</span> hover layer</span><br><span class="line">         * @param  &#123;<span class="attr">module</span>:zrender/Element&#125; el</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        removeHover: function (el) &#123;&#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span>** Clear all hover elements <span class="keyword">in</span> hover layer*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        clearHover: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Refresh hover <span class="keyword">in</span> next frame*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        refreshHover: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>**Refresh hover immediately*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        refreshHoverImmediately: function () &#123;     ;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        resize: function(opts) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        clearAnimation: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Get container width *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        getWidth: function() &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        getHeight: function() &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Converting a path to image *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        pathToImage: function(e, width, height) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>**</span><br><span class="line">         * <span class="built_in">Set</span> <span class="keyword">default</span> cursor</span><br><span class="line">         * @param &#123;string&#125; [cursorStyle=<span class="string">'default'</span>] 例如 crosshair</span><br><span class="line">         *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        setCursorStyle: function (cursorStyle) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>**发布订阅模式 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        on: function(eventName, eventHandler, context) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        off: function(eventName, eventHandler) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        trigger: function (eventName, event) &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Clear all objects and the canvas *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        clear: function () &#123;&#125;,</span></span><br><span class="line"><span class="regexp">        /</span>** Dispose self *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        dispose: function () &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br></pre></td></tr></table></figure></p><p>源码的方法，我们以<code>add</code>举例子，它其实调用的是<code>this.storage.addRoot</code>方法,使用MVC机制处理。<br>使用示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> circle1 = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">    shape: &#123;</span><br><span class="line">        cx: <span class="number">100</span>,</span><br><span class="line">        cy: <span class="number">100</span>,</span><br><span class="line">        r: <span class="number">30</span></span><br><span class="line">    &#125;,</span><br><span class="line">    style: &#123;</span><br><span class="line">        fill: <span class="string">'blue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    draggable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">zr.add(circle1);</span><br><span class="line">circle1.on(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    zr.addHover(<span class="keyword">this</span>, &#123;</span><br><span class="line">        stroke: <span class="string">'yellow'</span>,</span><br><span class="line">        lineWidth: <span class="number">10</span>,</span><br><span class="line">        opacity: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">    zr.refresh();</span><br><span class="line">&#125;);</span><br><span class="line">circle1.on(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    zr.removeHover(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>注意：这里有<code>addHover</code>方法，所以会渲染两个canvas。如果没有addHover，就只会渲染一个canvas。</p><h1 id="3-MVC简单概述"><a href="#3-MVC简单概述" class="headerlink" title="3.MVC简单概述"></a>3.MVC简单概述</h1><p>MVC对应三个文件的结构很简单，其实就是一个构造函数，一个prototype原型扩展。</p><h2 id="3-1-M–数据管理层-Storage-js）"><a href="#3-1-M–数据管理层-Storage-js）" class="headerlink" title="3.1 M–数据管理层(Storage.js）"></a>3.1 M–数据管理层(Storage.js）</h2><p>我们看构造函数，将元素存储在this._elements(对象)、this._roots（数组）和this._displayList（数组）中，然后负责在其中进行增（addRoot，addToMap）删(delRoot,delFromMap)改（updateDisplayList）查（get，getDisplayList）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Storage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 所有常规形状，id索引的map</span></span><br><span class="line">     <span class="keyword">this</span>._elements = &#123;&#125;;</span><br><span class="line">     <span class="comment">//和this._elements存放的元素一样，只不过是数组</span></span><br><span class="line">     <span class="keyword">this</span>._roots = [];</span><br><span class="line">     <span class="comment">//和this.roots一样</span></span><br><span class="line">     <span class="keyword">this</span>._displayList = [];</span><br><span class="line">     <span class="comment">//this._displayList的长度</span></span><br><span class="line">     <span class="keyword">this</span>._displayListLen = <span class="number">0</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="3-2-C–控制层（Handle-js）"><a href="#3-2-C–控制层（Handle-js）" class="headerlink" title="3.2 C–控制层（Handle.js）"></a>3.2 C–控制层（Handle.js）</h2><p>Handler负责事件处理,包括’click’, ‘dblclick’, ‘mousewheel’, ‘mouseout’,        ‘mouseup’, ‘mousedown’, ‘mousemove’, ‘contextmenu’等。我们知道canvas API没有提供监听每个元素的机制，这就需要一些处理。处理的思路是：监听事件的作用坐标（如点击时候的坐标），判断在哪个绘制元素的范围中，如果在某个元素中，这个元素就监听该事件。具体的思路可以查看参考阅读给的链接文章。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handler.prototype = &#123;</span><br><span class="line">    mousemove：<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;&#125;<span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br><span class="line">util.mixin(Handler, Eventful);<span class="comment">//混入，下面我们会解释到</span></span><br><span class="line">util.mixin(Handler, Draggable);</span><br></pre></td></tr></table></figure><h2 id="3-3-V–视图层（Painter-js）"><a href="#3-3-V–视图层（Painter-js）" class="headerlink" title="3.3 V–视图层（Painter.js）"></a>3.3 V–视图层（Painter.js）</h2><p>Painter负责真正的绘图操作，这里是比较繁重的部分</p><ul><li>1.负责canvas及其周边DOM元素的创建与处理</li><li>2.负责调用各个Shape（预定义好的）进行绘制</li><li>3.提供基本的操作方法，渲染(render)、刷新(refresh)、尺寸变化(resize)、擦除(clear)等</li></ul><p>Painter是调用canvas API实现的绘制,包括颜色，渐变色，变换，矩阵变化，绘制图片、文本等。IE8使用<a href="https://code.google.com/p/explorercanvas/" target="_blank" rel="noopener">excanvas</a>兼容。</p><h1 id="4-设计模式总结"><a href="#4-设计模式总结" class="headerlink" title="4.设计模式总结"></a>4.设计模式总结</h1><p>设计模式的总结，我在一篇<a href="http://blog.csdn.net/future_todo/article/details/53992141" target="_blank" rel="noopener">博客</a>中有写,要想看这方面的知识，可以在这里看。</p><h2 id="4-1-AMD模式"><a href="#4-1-AMD模式" class="headerlink" title="4.1 AMD模式"></a>4.1 AMD模式</h2><p>AMD即是“异步模块定义”的意思，所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。源码的结构是这样的</p><ul><li>定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ZRender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure><p>我们的Demo使用的是百度封装好的AMD模式esl.js(或者使用requirejs也可以),引入方式和使用示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../libs/esl.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'zrender'</span>, <span class="string">'zrender/graphic/shape/Circle'</span>, <span class="string">'zrender/graphic/shape/Polygon'</span>],</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">zrender, Circle, Polygon</span>) </span>&#123; <span class="comment">//... ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-2-继承"><a href="#4-2-继承" class="headerlink" title="4.2 继承"></a>4.2 继承</h2><p>在core-&gt;util.js，主要的思想就是将子类的prototype指向父类的prototype；子类的构造函数指向自己。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">clazz, baseClazz</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clazzPrototype = clazz.prototype;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = baseClazz.prototype;</span><br><span class="line">    clazz.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> clazzPrototype) &#123;<span class="comment">//属性也继承了</span></span><br><span class="line">        clazz.prototype[prop] = clazzPrototype[prop];</span><br><span class="line">    &#125;</span><br><span class="line">    clazz.prototype.constructor = clazz;</span><br><span class="line">    clazz.superClass = baseClazz;<span class="comment">//superClass是个自己定义的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外不要忘了，在构造函数中应该重写父类的属性。例如：Displayable的父类是Element:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Displayable</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">     Element.call(<span class="keyword">this</span>, opts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现继承：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrUtil.inherits(Displayable, Element);</span><br></pre></td></tr></table></figure></p><h2 id="4-3-混入模式"><a href="#4-3-混入模式" class="headerlink" title="4.3 混入模式"></a>4.3 混入模式</h2><p>简而言之，混入就是将一个对象的方法复制给另外一个对象。实现在util.js中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">target, source, overlay</span>) </span>&#123;</span><br><span class="line">   target = <span class="string">'prototype'</span> <span class="keyword">in</span> target ? target.prototype : target;</span><br><span class="line">   source = <span class="string">'prototype'</span> <span class="keyword">in</span> source ? source.prototype : source;</span><br><span class="line">   defaults(target, source, overlay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaults</span>(<span class="params">target, source, overlay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key) &amp;&amp; (overlay ? source[key] != <span class="literal">null</span> : target[key] == <span class="literal">null</span>)) &#123;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrUtil.mixin(Displayable, RectText);</span><br></pre></td></tr></table></figure></p><h2 id="4-4-jquery的extend模式"><a href="#4-4-jquery的extend模式" class="headerlink" title="4.4 jquery的extend模式"></a>4.4 jquery的extend模式</h2><p>实现很简单，类似混入模式,将source对象的方法复制给target对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">         <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">             target[key] = source[key];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> target;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-5-发布订阅模式"><a href="#4-5-发布订阅模式" class="headerlink" title="4.5 发布订阅模式"></a>4.5 发布订阅模式</h2><p>逻辑在mixin文件夹中的Eventful.js，为Handle(handle.js)混入方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">util.mixin(Handler, Eventful);</span><br></pre></td></tr></table></figure></p><p>包括一下几种方法</p><ul><li><code>one</code>一次绑定事件</li><li><code>on</code> 绑定事件</li><li><code>isSilent</code>是否绑定了事件</li><li><code>off</code>解绑事件</li><li><code>trigger</code>事件分发，触发事件</li><li><code>triggerWithContext</code>带有context的事件分发</li></ul><h1 id="5-逻辑关系"><a href="#5-逻辑关系" class="headerlink" title="5.逻辑关系"></a>5.逻辑关系</h1><ul><li>步进关系</li></ul><p>说明：–&gt;为扩展或混入，==&gt;为继承自父类，（）内部为所在位置, [ ]为扩展或者混入的方式。</p><p><code>Element</code>[Animatable Transformable Eventful] (Element.js) ==&gt;<br><code>Displayable</code>[ReactText] (Displayable.js) ==&gt;<br><code>Path</code>[Sub] (Path.js) ==&gt;<br><code>Sub</code>(Path.js) –&gt;<br><code>各类型的shape</code></p><p>底层对象是封装过的Element。</p><ul><li>绘制的逻辑</li></ul><p><code>add</code>（zrender.js）–&gt;<code>addRoot</code>(Storage.js) –&gt; <code>addToMap</code>(Storage.js) –&gt;<br><code>dirty</code>[标记为脏的，下一帧渲染] (path.js) –&gt; <code>refresh</code>(Painter.js)–&gt;<code>_paintList</code>[遍历_displayList] (Painter.js)–&gt;<br><code>_doPaintEl</code>[渲染单个元素] Painter.js) –&gt;<code>brush</code>(Path.js)–&gt;<code>buildPath</code> (各个类型的shape)</p><p><strong>参考阅读：</strong></p><ul><li><a href="http://ecomfe.github.io/zrender/" target="_blank" rel="noopener">zrender官方网站</a></li><li><a href="http://www.g168.net/txt/vml/],相当于IE里面的画笔，能实现你所想要的图形，而且结合脚本，可以让图形产生动态的效" target="_blank" rel="noopener">vml解释</a></li><li><a href="http://www.cnblogs.com/hhstuhacker/category/603743.html" target="_blank" rel="noopener">ZRender源码分析系列</a></li><li><a href="https://github.com/lonelyclick/nts/tree/master/zrender/src" target="_blank" rel="noopener">ZRender源码分析系列源码注释</a></li><li><a href="http://blog.csdn.net/vuturn/article/details/45822905" target="_blank" rel="noopener">HTML5 Canvas绘制的图形的事件处理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> ECharts </tag>
            
            <tag> zrender </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript设计模式【下】</title>
      <link href="/2017/01/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%8B%E3%80%91/"/>
      <url>/2017/01/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%8B%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>参考《javascript设计模式》[美]Addy Osmani一书，下面介绍使用javascript经常会使用的主要设计模式。本博文是使用ES5语法的【下】篇，还有一个【上】篇，ES6语法会单独写个博客。<br>主要是以下几个设计模式：</p><ul><li>Constructor Pattern 构造模式</li><li>Module Pattern 模块化模式</li><li>Revealing Module Pattern 揭露模块化模式 </li><li>Singleton Pattern 单例模式</li><li>Observer Pattern  观察者模式</li><li>Mediator Pattern 中介者模式</li><li>Prototype Pattern 原型模式</li><li>Command Pattern 命令行模式</li><li>Facade Pattern 外观模式</li><li>Factory Pattern 工厂模式</li><li>Mixin Pattern 混入模式</li><li>Decorator Pattern 装饰者模式</li><li>Flyweight Pattern 享元模式</li></ul><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>上，包含有ES5和ES6语法实现的内容。<br><a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">https://github.com/zrysmt/javascript-design-pattern</a></p></blockquote><h1 id="6-Facade-Pattern-外观模式"><a href="#6-Facade-Pattern-外观模式" class="headerlink" title="6.Facade Pattern 外观模式"></a>6.Facade Pattern 外观模式</h1><p>外观模式也是只暴露一个很简单的方法，然后该方法在内部执行，调用内部的其他方法，jquery使用了很多这种模式，如$().css、$.ajax()等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _private = &#123;</span><br><span class="line">        i: <span class="number">5</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"current value:"</span> + <span class="keyword">this</span>.i);</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.i = val;</span><br><span class="line">        &#125;,</span><br><span class="line">        run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"running"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"jumping"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        facade: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">            _private.set(args.val);</span><br><span class="line">            _private.get();</span><br><span class="line">            <span class="keyword">if</span> (args.run) &#123;</span><br><span class="line">                _private.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// Outputs: "current value: 10" and "running"</span></span><br><span class="line"><span class="built_in">module</span>.facade(&#123; <span class="attr">run</span>: <span class="literal">true</span>, <span class="attr">val</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="7-Factory-Pattern-工厂模式"><a href="#7-Factory-Pattern-工厂模式" class="headerlink" title="7.Factory Pattern 工厂模式"></a>7.Factory Pattern 工厂模式</h1><p>怎么解释呢？工厂模式就是创建一个大型的制作工厂，然后其它的对象从这个工厂中产生。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VehicleFactory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// Our default vehicleClass is Car 默认的是Car制造工厂</span></span><br><span class="line">VehicleFactory.prototype.vehicleClass = Car;</span><br><span class="line"></span><br><span class="line">VehicleFactory.prototype.createVehicle = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options.vehicleType === <span class="string">"car"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vehicleClass = Car;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.vehicleClass = Truck;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>.vehicleClass(options);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>两个具体的工厂里面的制作空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// some defaults</span></span><br><span class="line">    <span class="keyword">this</span>.doors = options.doors || <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">this</span>.state = options.state || <span class="string">"brand new"</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = options.color || <span class="string">"silver"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A constructor for defining new trucks</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Truck</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = options.state || <span class="string">"used"</span>;</span><br><span class="line">    <span class="keyword">this</span>.wheelSize = options.wheelSize || <span class="string">"large"</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = options.color || <span class="string">"blue"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carFactory = <span class="keyword">new</span> VehicleFactory();</span><br><span class="line"><span class="keyword">var</span> car = carFactory.createVehicle(&#123;</span><br><span class="line">    vehicleType: <span class="string">"car"</span>,</span><br><span class="line">    color: <span class="string">"yellow"</span>,</span><br><span class="line">    doors: <span class="number">6</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car <span class="keyword">instanceof</span> Car);<span class="comment">// Outputs: true</span></span><br></pre></td></tr></table></figure></p><h1 id="8-Mixin-Pattern-混入模式"><a href="#8-Mixin-Pattern-混入模式" class="headerlink" title="8.Mixin Pattern 混入模式"></a>8.Mixin Pattern 混入模式</h1><p>简单解释下，混入就是将一个对象的方法复制给另外一个对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = settings.model || <span class="string">"no model provided"</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = settings.color || <span class="string">"no colour provided"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mixin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Mixin.prototype = &#123;</span><br><span class="line">    driveForward: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"drive forward"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    driveBackward: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"drive backward"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    driveSideways: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"drive sideways"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">augment</span>(<span class="params">receivingClass, givingClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">            receivingClass.prototype[<span class="built_in">arguments</span>[i]] = givingClass.prototype[<span class="built_in">arguments</span>[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> methodName <span class="keyword">in</span> givingClass.prototype) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Object</span>.hasOwnProperty(receivingClass.prototype, methodName)) &#123;</span><br><span class="line">                receivingClass.prototype[methodName] = givingClass.prototype[methodName];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只混入两个方法，Mixin的方法复制给Car</span></span><br><span class="line">augment(Car, Mixin, <span class="string">"driveForward"</span>, <span class="string">"driveBackward"</span>);</span><br><span class="line"><span class="comment">// Create a new Car</span></span><br><span class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> Car(&#123;</span><br><span class="line">    model: <span class="string">"Ford Escort"</span>,</span><br><span class="line">    color: <span class="string">"blue"</span></span><br><span class="line">&#125;);</span><br><span class="line">myCar.driveForward();</span><br><span class="line">myCar.driveBackward();</span><br></pre></td></tr></table></figure></p><h1 id="9-Decorator-Pattern-装饰者模式"><a href="#9-Decorator-Pattern-装饰者模式" class="headerlink" title="9.Decorator Pattern 装饰者模式"></a>9.Decorator Pattern 装饰者模式</h1><p>装饰模式是只针对一个基本的对象，添加一些修饰。如下面的是对MacBook，加内存（Memory函数装饰）增加75美元，雕刻（Engraving函数装饰）增加200美元，买保险（Insurance函数装饰）增加250美元。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MacBook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">997</span>; &#125;;</span><br><span class="line">    <span class="keyword">this</span>.screenSize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">11.6</span>; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Memory</span>(<span class="params">macbook</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="number">75</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engraving</span>(<span class="params">macbook</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="number">200</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insurance</span>(<span class="params">macbook</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="number">250</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mb = <span class="keyword">new</span> MacBook();</span><br><span class="line">Memory(mb);</span><br><span class="line">Engraving(mb);</span><br><span class="line">Insurance(mb);</span><br></pre></td></tr></table></figure></p><h1 id="10-Flyweight-Pattern-享元模式"><a href="#10-Flyweight-Pattern-享元模式" class="headerlink" title="10.Flyweight Pattern 享元模式"></a>10.Flyweight Pattern 享元模式</h1><p>享元模式我感觉就是共享一些数据或者方法，有一个工厂可以管理</p><ul><li>Flyweight<br>享元对象（类似于接口），提供的可以共享的属性/方法；</li><li>Concrete Flyweight<br>具体享元对象，实现接口，具体实现享元对象的方法；</li><li>Flyweight Factory<br>享元工厂对象，创建并管理flyweight对象</li></ul><p>实现接口的方法，由于js没有，这里我们就模拟下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在js模拟存虚拟的继承，类似java中的implements</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.implementsFor = <span class="function"><span class="keyword">function</span>(<span class="params">parentClassOrObject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parentClassOrObject.constructor === <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype = <span class="keyword">new</span> parentClassOrObject();</span><br><span class="line">        <span class="keyword">this</span>.prototype.consturctor = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.prototype.parent = parentClassOrObject.prototype;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//纯虚拟继承</span></span><br><span class="line">        <span class="keyword">this</span>.prototype = parentClassOrObject;</span><br><span class="line">        <span class="keyword">this</span>.prototype.constructor = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.prototype.parent = parentClassOrObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>享元对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Flyweight object 享元对象</span></span><br><span class="line"><span class="keyword">var</span> CoffeeOrder = &#123;</span><br><span class="line">    <span class="comment">// Interfaces 接口</span></span><br><span class="line">    serveCoffee: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;&#125;,</span><br><span class="line">    getFlavor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>具体享元对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implements CoffeeOrder</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeFlavor</span>(<span class="params">newFlavor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flavor = newFlavor;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getFlavor === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getFlavor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> flavor;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.serveCoffee === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.serveCoffee = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Serving Coffee flavor "</span> + flavor + <span class="string">" to table number "</span> + context.getTable());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Implement interface for CoffeeOrder 实现接口</span></span><br><span class="line">CoffeeFlavor.implementsFor(CoffeeOrder);</span><br></pre></td></tr></table></figure><ul><li>辅助器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeOrderContext</span>(<span class="params">tableNumber</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getTable: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tableNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>享元工厂对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并管理flyweight对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeFlavorFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flavors = &#123;&#125;,</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCoffeeFlavor: <span class="function"><span class="keyword">function</span>(<span class="params">flavorName</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//这是个单例模式</span></span><br><span class="line">            <span class="keyword">var</span> flavor = flavors[flavorName];</span><br><span class="line">            <span class="keyword">if</span> (flavor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                flavor = <span class="keyword">new</span> CoffeeFlavor(flavorName);<span class="comment">//创建flyweight对象</span></span><br><span class="line">                flavors[flavorName] = flavor;</span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flavor;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        getTotalCoffeeFlavorsMade: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">testFlyweight()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFlyweight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The flavors ordered. 已订购的flavors</span></span><br><span class="line">    <span class="keyword">var</span> flavors = <span class="keyword">new</span> CoffeeFlavor(),</span><br><span class="line">        <span class="comment">// The tables for the orders. </span></span><br><span class="line">        tables = <span class="keyword">new</span> CoffeeOrderContext(),</span><br><span class="line">        <span class="comment">// Number of orders made 订单数量</span></span><br><span class="line">        ordersMade = <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// The CoffeeFlavorFactory instance</span></span><br><span class="line">        flavorFactory;</span><br><span class="line">    <span class="comment">//flavorIn 订单物的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">takeOrders</span>(<span class="params">flavorIn, table</span>) </span>&#123;</span><br><span class="line">        flavors[ordersMade] = flavorFactory.getCoffeeFlavor(flavorIn);</span><br><span class="line">        <span class="comment">//flavorFactory管理者创建好后(管理者也做了处理)返回给CoffeeFlavor</span></span><br><span class="line">        tables[ordersMade++] = <span class="keyword">new</span> CoffeeOrderContext(table);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flavorFactory = <span class="keyword">new</span> CoffeeFlavorFactory();</span><br><span class="line"></span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">2</span>);</span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">2</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">1</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">1</span>);</span><br><span class="line">    takeOrders(<span class="string">"Xpresso"</span>, <span class="number">1</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">897</span>);</span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">97</span>);</span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">97</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">3</span>);</span><br><span class="line">    takeOrders(<span class="string">"Xpresso"</span>, <span class="number">3</span>);</span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">3</span>);</span><br><span class="line">    takeOrders(<span class="string">"Xpresso"</span>, <span class="number">96</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">552</span>);</span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">121</span>);</span><br><span class="line">    takeOrders(<span class="string">"Xpresso"</span>, <span class="number">121</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ordersMade; ++i) &#123;</span><br><span class="line">        flavors[i].serveCoffee(tables[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"total CoffeeFlavor objects made: "</span> + flavorFactory.getTotalCoffeeFlavorsMade());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>上，包含有ES5和ES6语法实现的内容。<br><a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">https://github.com/zrysmt/javascript-design-pattern</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript设计模式【上】</title>
      <link href="/2017/01/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%8A%E3%80%91/"/>
      <url>/2017/01/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%8A%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>参考《javascript设计模式》[美]Addy Osmani一书，下面介绍使用javascript经常会使用的主要设计模式。本博文是使用ES5语法的【上】篇，还有一个【下】篇，ES6语法会单独写个博客。<br>主要是以下几个设计模式：</p><ul><li>Constructor Pattern 构造模式</li><li>Module Pattern 模块化模式</li><li>Revealing Module Pattern 揭露模块化模式 </li><li>Singleton Pattern 单例模式</li><li>Observer Pattern  观察者模式</li><li>Mediator Pattern 中介者模式</li><li>Prototype Pattern 原型模式</li><li>Command Pattern 命令行模式</li><li>Facade Pattern 外观模式</li><li>Factory Pattern 工厂模式</li><li>Mixin Pattern 混入模式</li><li>Decorator Pattern 装饰者模式</li><li>Flyweight Pattern 享元模式</li></ul><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>上，包含有ES5和ES6语法实现的内容。<br><a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">https://github.com/zrysmt/javascript-design-pattern</a></p></blockquote><h1 id="1-Module-Pattern-模块化模式"><a href="#1-Module-Pattern-模块化模式" class="headerlink" title="1.Module Pattern 模块化模式"></a>1.Module Pattern 模块化模式</h1><p>模块化很好理解，目前很多提供模块化的库如require.js(AMD),sea.js(CMD),现在我们就看看怎样自己编写的代码能够支持模块化。</p><h2 id="1-1-对象字面量表示法"><a href="#1-1-对象字面量表示法" class="headerlink" title="1.1 对象字面量表示法"></a>1.1 对象字面量表示法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = &#123;</span><br><span class="line">    myProperty: <span class="string">"someValue"</span>,</span><br><span class="line">    myConfig: &#123;</span><br><span class="line">        useCaching: <span class="literal">true</span>,</span><br><span class="line">        language: <span class="string">"en"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// a very basic method</span></span><br><span class="line">    myMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Where in the world is Paul Irish today?"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Outputs: Where in the world is Paul Irish today?</span></span><br><span class="line">myModule.myMethod();</span><br></pre></td></tr></table></figure><h2 id="1-2-Module-模块-模式"><a href="#1-2-Module-模块-模式" class="headerlink" title="1.2 Module(模块)模式"></a>1.2 Module(模块)模式</h2><ul><li>私有–IIFE模拟</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testModule = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        incrementCounter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> counter++;</span><br><span class="line">        &#125;,</span><br><span class="line">        resetCounter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"counter value prior to reset: "</span> + counter);</span><br><span class="line">            counter = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"></span><br><span class="line">testModule.incrementCounter();</span><br><span class="line">testModule.resetCounter(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><ul><li>Module(模块)模式变化–混入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params">jQ, _</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        jQ(<span class="string">".container"</span>).html(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(_.min([<span class="number">10</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">1000</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            privateMethod1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;(jQuery, _));</span><br><span class="line"></span><br><span class="line">myModule.publicMethod();</span><br></pre></td></tr></table></figure><ul><li>Module(模块)模式变化–引出<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Module object</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = &#123;&#125;,</span><br><span class="line">        privateVariable = <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">module</span>.publicProperty = <span class="string">"Foobar"</span>;</span><br><span class="line">    <span class="built_in">module</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(privateVariable);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-Revealing-Module-Pattern-揭露模块化模式"><a href="#2-Revealing-Module-Pattern-揭露模块化模式" class="headerlink" title="2.Revealing Module Pattern 揭露模块化模式"></a>2.Revealing Module Pattern 揭露模块化模式</h1><p>其实简单说就是将要暴露的接口返回（return）出去<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myRevealingModule = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> privateVar = <span class="string">"Ben Cherry"</span>,</span><br><span class="line">        publicVar = <span class="string">"Hey there!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Name:"</span> + privateVar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicSetName</span>(<span class="params">strName</span>) </span>&#123;</span><br><span class="line">        privateVar = strName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">publicGetName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        privateFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setName: publicSetName,</span><br><span class="line">        greeting: publicVar,</span><br><span class="line">        getName: publicGetName</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line">myRevealingModule.setName(<span class="string">"Paul Kinlan"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="3-Singleton-Pattern-单例模式"><a href="#3-Singleton-Pattern-单例模式" class="headerlink" title="3.Singleton Pattern 单例模式"></a>3.Singleton Pattern 单例模式</h1><p>确保实例化或者说是创建对象的时候只实例化/创建一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySingleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Instance stores a reference to the Singleton</span></span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Private methods and variables</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"I am private"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> privateVariable = <span class="string">"Im also private"</span>;</span><br><span class="line">        <span class="keyword">var</span> privateRandomNumber = <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// Public methods and variables</span></span><br><span class="line">            publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"The public can see me!"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            publicProperty: <span class="string">"I am also public"</span>,</span><br><span class="line">            getRandomNumber: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> privateRandomNumber;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">                instance = init();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="keyword">var</span> singleA = mySingleton.getInstance();</span><br><span class="line"><span class="keyword">var</span> singleB = mySingleton.getInstance();</span><br><span class="line"><span class="built_in">console</span>.log( singleA.getRandomNumber() === singleB.getRandomNumber() ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>静态方法<br>静态方法的解释不太容易说清楚，但可以从它的特点和用处来说明：<br>1）静态方法不会被继承<br>2）静态方法不用实例化（不用new）能够用直接调用（[类名/对象名].[静态方法名]）<br>ES6在方法前加上<code>static</code>关键字即可，使用ES6实现的见另外一篇博客，或者直接在github中查看我的源代码。使用ES5语法实现见下面：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SingletonTester = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Singleton</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        options = options || &#123;&#125;;</span><br><span class="line">        <span class="comment">// set some properties for our singleton</span></span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"SingletonTester"</span>;</span><br><span class="line">        <span class="keyword">this</span>.pointX = options.pointX || <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">this</span>.pointY = options.pointY || <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">var</span> _static = &#123;</span><br><span class="line">        name: <span class="string">"SingletonTester"</span>,</span><br><span class="line">        getInstance: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton(options);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _static;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singletonTest = SingletonTester.getInstance(&#123;</span><br><span class="line">    pointX: <span class="number">5</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(singletonTest.pointX);<span class="comment">// Outputs: 5</span></span><br></pre></td></tr></table></figure><h1 id="3-Observer-Pattern-观察者模式"><a href="#3-Observer-Pattern-观察者模式" class="headerlink" title="3.Observer Pattern  观察者模式"></a>3.Observer Pattern  观察者模式</h1><p>观察者一共有四个组件：</p><ul><li>Subject: maintains a list of observers, facilitates adding or removing observers<br>目标对象（类似接口，不具体实现，只有方法名）</li><li>Observer: provides a update interface for objects that need to be notified of a Subject’s changes of state<br>观察者对象 主要是update方法（类似接口，不具体实现，只有方法名）</li><li>ConcreteSubject: broadcasts notifications to observers on changes of state, stores the state of ConcreteObservers<br>具体目标对象，继承（实现）目标对象（实现接口）</li><li>ConcreteObserver: stores a reference to the ConcreteSubject, implements an update interface for the Observer to ensure state is consistent with the Subject’s<br>具体观察者，继承（实现）观察者（实现接口）</li></ul><p>具体观察者模式的代码请移步到我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>中，这里就不单独列出来了。<br>其实我们现在用的最多的是它的变体-发布-订阅模式<br>简单解释下该模式，比如我们订阅了某些微信公众号，然后就等着别人发布信息，我们就能立刻接受到信息了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pubsub = &#123;&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> topics = &#123;&#125;,<span class="comment">//存放所有订阅者</span></span><br><span class="line">        subUid = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//发布</span></span><br><span class="line">    q.publish = <span class="function"><span class="keyword">function</span>(<span class="params">topic, args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!topics[topic]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> subscribers = topics[topic],</span><br><span class="line">            len = subscribers ? subscribers.length : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">            subscribers[len].func(topic, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    q.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params">topic, func</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!topics[topic]) &#123;</span><br><span class="line">            topics[topic] = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> token = (++subUid).toString();</span><br><span class="line">        topics[topic].push(&#123;</span><br><span class="line">            token: token,</span><br><span class="line">            func: func</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//取消订阅</span></span><br><span class="line">    q.unsubscribe = <span class="function"><span class="keyword">function</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> m <span class="keyword">in</span> topics) &#123;</span><br><span class="line">            <span class="keyword">if</span> (topics[m]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = topics[m].length; i &lt; j; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (topics[m][i].token === token) &#123;</span><br><span class="line">                        topics[m].splice(i, <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">return</span> token;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;(pubsub));</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> messageLogger = <span class="function"><span class="keyword">function</span>(<span class="params">topics, data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Logging: "</span> + topics + <span class="string">": "</span> + data);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> subscription = pubsub.subscribe(<span class="string">"inbox/newMessage"</span>, messageLogger);</span><br><span class="line">pubsub.publish(<span class="string">"inbox/newMessage"</span>, <span class="string">"hello world!"</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">pubsub.publish(<span class="string">"inbox/newMessage"</span>, [<span class="string">"test"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">pubsub.publish(<span class="string">"inbox/newMessage"</span>, &#123;</span><br><span class="line">    sender: <span class="string">"hello@google.com"</span>,</span><br><span class="line">    body: <span class="string">"Hey again!"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="4-Mediator-Pattern-中介者模式"><a href="#4-Mediator-Pattern-中介者模式" class="headerlink" title="4.Mediator Pattern 中介者模式"></a>4.Mediator Pattern 中介者模式</h1><p>该模式和发布订阅模式非常像，这里就不再重复了。</p><h1 id="5-Command-Pattern-命令行模式"><a href="#5-Command-Pattern-命令行模式" class="headerlink" title="5.Command Pattern 命令行模式"></a>5.Command Pattern 命令行模式</h1><p>命令行模式就是类似控制台输入命令的方式。说白点就是我们只使用一个方法，第一个参数是我们实际调用的方法，后面的参数是作为该调用方法的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> CarManager = &#123;</span><br><span class="line">        requestInfo: <span class="function"><span class="keyword">function</span>(<span class="params">model, id</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"The information for "</span> + model + <span class="string">" with ID "</span> + id + <span class="string">" is foobar"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        buyVehicle: <span class="function"><span class="keyword">function</span>(<span class="params">model, id</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"You have successfully purchased Item "</span> + id + <span class="string">", a "</span> + model;</span><br><span class="line">        &#125;,</span><br><span class="line">        arrangeViewing: <span class="function"><span class="keyword">function</span>(<span class="params">model, id</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"You have successfully booked a viewing of "</span> + model + <span class="string">" ( "</span> + id + <span class="string">") "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    CarManager.execute = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CarManager[name] &amp;&amp; CarManager[name].apply(CarManager, [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(CarManager.execute(<span class="string">"arrangeViewing"</span>, <span class="string">"Ferrari"</span>, <span class="string">"14523"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(CarManager.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Mondeo"</span>, <span class="string">"54323"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(CarManager.execute(<span class="string">"buyVehicle"</span>, <span class="string">"Ford Escort"</span>, <span class="string">"34232"</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>上，包含有ES5和ES6语法实现的内容。<br><a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">https://github.com/zrysmt/javascript-design-pattern</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript设计模式 使用ES6语法</title>
      <link href="/2017/01/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E4%BD%BF%E7%94%A8ES6%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/01/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E4%BD%BF%E7%94%A8ES6%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>参考《javascript设计模式》[美]Addy Osmani一书，下面介绍使用javascript经常会使用的主要设计模式。本博文为ES6语法的博客，还有使用ES5语法的【上】【下】两篇。<br>主要是以下几个设计模式：</p><ul><li>Constructor Pattern 构造模式</li><li>Module Pattern 模块化模式</li><li>Revealing Module Pattern 揭露模块化模式 </li><li>Singleton Pattern 单例模式</li><li>Observer Pattern  观察者模式</li><li>Mediator Pattern 中介者模式</li><li>Prototype Pattern 原型模式</li><li>Command Pattern 命令行模式</li><li>Facade Pattern 外观模式</li><li>Factory Pattern 工厂模式</li><li>Mixin Pattern 混入模式</li><li>Decorator Pattern 装饰者模式</li><li>Flyweight Pattern 享元模式</li></ul><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>上，包含有ES5和ES6语法实现的内容。<br><a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">https://github.com/zrysmt/javascript-design-pattern</a></p></blockquote><h1 id="1-Module-Pattern-模块化模式"><a href="#1-Module-Pattern-模块化模式" class="headerlink" title="1.Module Pattern 模块化模式"></a>1.Module Pattern 模块化模式</h1><p>模块化很好理解，目前很多提供模块化的库如require.js(AMD),sea.js(CMD),现在我们就看看怎样自己编写的代码能够支持模块化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> privateName = <span class="built_in">Symbol</span>(<span class="string">'privateName'</span>);<span class="comment">//利用Symbol做成私有的变量</span></span><br><span class="line"><span class="comment">//直接用class类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</span><br><span class="line">    set container(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    get container() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">'ES6 module'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [privateName]()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"hi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Module;</span><br></pre></td></tr></table></figure><h1 id="2-Singleton-Pattern-单例模式"><a href="#2-Singleton-Pattern-单例模式" class="headerlink" title="2.Singleton Pattern 单例模式"></a>2.Singleton Pattern 单例模式</h1><p>确保实例化或者说是创建对象的时候只实例化/创建一次。</p><ul><li>一般的单例模式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mySingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) instance = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    publicMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"The public can see me!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> singleton1 = <span class="keyword">new</span> mySingleton();</span><br></pre></td></tr></table></figure><ul><li>静态方法和单例模式</li></ul><p>静态方法的解释不太容易说清楚，但可以从它的特点和用处来说明：<br>1）静态方法不会被继承<br>2）静态方法不用实例化（不用new）能够用直接调用（[类名/对象名].[静态方法名]）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mySingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mySingleton.instance) &#123;</span><br><span class="line">            mySingleton.instance = <span class="keyword">new</span> mySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mySingleton.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    publicMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"The public can see me!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cache = mySingleton.getInstance();</span><br></pre></td></tr></table></figure><h1 id="3-Observer-Pattern-观察者模式"><a href="#3-Observer-Pattern-观察者模式" class="headerlink" title="3.Observer Pattern  观察者模式"></a>3.Observer Pattern  观察者模式</h1><p>观察者一共有四个组件：</p><ul><li>Subject: maintains a list of observers, facilitates adding or removing observers<br>目标对象（类似接口，不具体实现，只有方法名）</li><li>Observer: provides a update interface for objects that need to be notified of a Subject’s changes of state<br>观察者对象 主要是update方法（类似接口，不具体实现，只有方法名）</li><li>ConcreteSubject: broadcasts notifications to observers on changes of state, stores the state of ConcreteObservers<br>具体目标对象，继承（实现）目标对象（实现接口）</li><li>ConcreteObserver: stores a reference to the ConcreteSubject, implements an update interface for the Observer to ensure state is consistent with the Subject’s<br>具体观察者，继承（实现）观察者（实现接口）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Subject 目标*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    addObserver() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This method must be overwritten!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    removeObserver() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This method must be overwritten!"</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This method must be overwritten!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This method must be overwritten!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=============================================================</span></span><br><span class="line"><span class="comment">//具体的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlCheckbox</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.observers = [];</span><br><span class="line">    &#125;</span><br><span class="line">    addObserver(observer)&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    notify(context) &#123;</span><br><span class="line">        <span class="keyword">let</span> observerCount = <span class="keyword">this</span>.observers.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; observerCount; i++) &#123;</span><br><span class="line">           <span class="keyword">this</span>.observers[i].update(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddedCheckboxs</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(subject)&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(subject);</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="comment">// this.subject.addObserver(this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    update(context)&#123;</span><br><span class="line">        <span class="keyword">this</span>.checked = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main test</span></span><br><span class="line"><span class="keyword">let</span> addBtn = <span class="built_in">document</span>.getElementById(<span class="string">"addNewObserver"</span>),</span><br><span class="line">    container = <span class="built_in">document</span>.getElementById(<span class="string">"observersContainer"</span>),</span><br><span class="line">    controlCheckboxDom = <span class="built_in">document</span>.getElementById(<span class="string">"mainCheckbox"</span>);</span><br><span class="line"><span class="keyword">let</span> controlCheckbox = <span class="keyword">new</span> ControlCheckbox();</span><br><span class="line">controlCheckboxDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    controlCheckbox.notify(controlCheckboxDom.checked);<span class="comment">//通知了变化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> check = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">    check.type = <span class="string">"checkbox"</span>;</span><br><span class="line">    <span class="comment">//新增的每一个都应该实现观察者</span></span><br><span class="line">    <span class="built_in">console</span>.info(controlCheckbox.observers);<span class="comment">//查看是否添加上</span></span><br><span class="line">    check.update = AddedCheckboxs.prototype.update;</span><br><span class="line">    controlCheckbox.addObserver(check);<span class="comment">//添加到观察者列表上去</span></span><br><span class="line">    container.appendChild(check);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实我们现在用的最多的是它的变体-发布-订阅模式<br>简单解释下该模式，比如我们订阅了某些微信公众号，然后就等着别人发布信息，我们就能立刻接受到信息了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布-订阅模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pubsub</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.subUid = <span class="number">0</span>; <span class="comment">//订阅的id值</span></span><br><span class="line">        <span class="keyword">this</span>.topics = &#123;&#125;;<span class="comment">//存放所有订阅者</span></span><br><span class="line">    &#125;</span><br><span class="line">    publish(topic, args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> subscribers = <span class="keyword">this</span>.topics[topic],</span><br><span class="line">            len = subscribers ? subscribers.length : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">            subscribers[len].func(topic, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    subscribe(topic, func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.topics[topic] = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> token = (++<span class="keyword">this</span>.subUid).toString();</span><br><span class="line">        <span class="keyword">this</span>.topics[topic].push(&#123;</span><br><span class="line">            token: token,</span><br><span class="line">            func: func</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    unsubscribe(token) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m <span class="keyword">in</span> <span class="keyword">this</span>.topics) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.topics[m]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="keyword">this</span>.topics[m].length; i &lt; j; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.topics[m][i].token === token) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.topics[m].splice(i, <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">return</span> token;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//usage</span></span><br><span class="line"><span class="keyword">let</span> messageLogger = <span class="function"><span class="keyword">function</span>(<span class="params">topics, data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Logging: "</span> + topics + <span class="string">": "</span> + data);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> pubsub = <span class="keyword">new</span> Pubsub();</span><br><span class="line"><span class="keyword">let</span> subscription = pubsub.subscribe(<span class="string">"inbox/newMessage"</span>, messageLogger);</span><br><span class="line"></span><br><span class="line">pubsub.publish(<span class="string">"inbox/newMessage"</span>, <span class="string">"hello world!"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="4-Mediator-Pattern-中介者模式"><a href="#4-Mediator-Pattern-中介者模式" class="headerlink" title="4.Mediator Pattern 中介者模式"></a>4.Mediator Pattern 中介者模式</h1><p>该模式和发布订阅模式非常像，这里就不再重复了</p><h1 id="5-Command-Pattern-命令行模式"><a href="#5-Command-Pattern-命令行模式" class="headerlink" title="5.Command Pattern 命令行模式"></a>5.Command Pattern 命令行模式</h1><p>命令行模式就是类似控制台输入命令的方式。说白点就是我们只使用一个方法，第一个参数是我们实际调用的方法，后面的参数是作为该调用方法的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarManager</span> </span>&#123;</span><br><span class="line">    requestInfo(model, id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The information for "</span> + model + <span class="string">" with ID "</span> + id + <span class="string">" is foobar"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    buyVehicle(model, id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"You have successfully purchased Item "</span> + id + <span class="string">", a "</span> + model;</span><br><span class="line">    &#125;</span><br><span class="line">    arrangeViewing(model, id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"You have successfully booked a viewing of "</span> + model + <span class="string">" ( "</span> + id + <span class="string">") "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    execute(name) &#123;</span><br><span class="line">        <span class="keyword">let</span> carManager = <span class="keyword">new</span> CarManager();</span><br><span class="line">        <span class="keyword">return</span> carManager[name] &amp;&amp; carManager[name].apply(carManager, [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> carManager = <span class="keyword">new</span> CarManager();</span><br><span class="line"><span class="built_in">console</span>.log(carManager.execute(<span class="string">"arrangeViewing"</span>, <span class="string">"Ferrari"</span>, <span class="string">"14523"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(carManager.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Mondeo"</span>, <span class="string">"54323"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(carManager.execute(<span class="string">"requestInfo"</span>, <span class="string">"Ford Escort"</span>, <span class="string">"34232"</span>));</span><br></pre></td></tr></table></figure><h1 id="6-Facade-Pattern-外观模式"><a href="#6-Facade-Pattern-外观模式" class="headerlink" title="6.Facade Pattern 外观模式"></a>6.Facade Pattern 外观模式</h1><p>外观模式也是只暴露一个很简单的方法，然后该方法在内部执行，调用内部的其他方法，jquery使用了很多这种模式，如$().css、$.ajax()等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰者模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    _get() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"current value:"</span> + <span class="keyword">this</span>.i);</span><br><span class="line">    &#125;</span><br><span class="line">    _set(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.i = val;</span><br><span class="line">    &#125;</span><br><span class="line">    _run() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"running"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _jump() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"jumping"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    facade(args) &#123;</span><br><span class="line">        <span class="keyword">this</span>._set(args.val);</span><br><span class="line">        <span class="keyword">this</span>._get();</span><br><span class="line">        <span class="keyword">if</span> (args._run) &#123;</span><br><span class="line">            <span class="keyword">this</span>._run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fa = <span class="keyword">new</span> Facade();</span><br><span class="line">fa.facade(&#123; <span class="attr">run</span>: <span class="literal">true</span>, <span class="attr">val</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure><h1 id="7-Factory-Pattern-工厂模式"><a href="#7-Factory-Pattern-工厂模式" class="headerlink" title="7.Factory Pattern 工厂模式"></a>7.Factory Pattern 工厂模式</h1><p>怎么解释呢？工厂模式就是创建一个大型的制作工厂，然后其它的对象从这个工厂中产生。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VehicleFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.vehicleClass = Car;</span><br><span class="line">    &#125;</span><br><span class="line">    createVehicle(options) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.vehicleType === <span class="string">"car"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.vehicleClass = Car;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.vehicleClass = Truck;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>.vehicleClass(options);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="comment">// some defaults</span></span><br><span class="line">        options = options || <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>.doors = options.doors || <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">this</span>.state = options.state || <span class="string">"brand new"</span>;</span><br><span class="line">        <span class="keyword">this</span>.color = options.color || <span class="string">"silver"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Truck</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = options.state || <span class="string">"used"</span>;</span><br><span class="line">        <span class="keyword">this</span>.wheelSize = options.wheelSize || <span class="string">"large"</span>;</span><br><span class="line">        <span class="keyword">this</span>.color = options.color || <span class="string">"blue"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//usage </span></span><br><span class="line"><span class="keyword">let</span> carFactory = <span class="keyword">new</span> VehicleFactory();</span><br><span class="line"><span class="keyword">let</span> car = carFactory.createVehicle(&#123;</span><br><span class="line">    vehicleType: <span class="string">"car"</span>,</span><br><span class="line">    color: <span class="string">"yellow"</span>,</span><br><span class="line">    doors: <span class="number">6</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="8-Mixin-Pattern-混入模式"><a href="#8-Mixin-Pattern-混入模式" class="headerlink" title="8.Mixin Pattern 混入模式"></a>8.Mixin Pattern 混入模式</h1><p>简单解释下，混入就是将一个对象的方法复制给另外一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://es6.ruanyifeng.com/#docs/class#Mixin模式的实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params">...mixins</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Mix</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">    copyProperties(Mix, mixin);</span><br><span class="line">    copyProperties(Mix.prototype, mixin.prototype);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Mix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyProperties</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Reflect</span>.ownKeys(source)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key !== <span class="string">"constructor"</span> &amp;&amp; key !== <span class="string">"prototype"</span> &amp;&amp; key !== <span class="string">"name"</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">let</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(source, key);</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(target, key, desc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用-继承即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistributedEdit</span> <span class="keyword">extends</span> <span class="title">mix</span>(<span class="title">Loggable</span>, <span class="title">Serializable</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-Decorator-Pattern-装饰者模式"><a href="#9-Decorator-Pattern-装饰者模式" class="headerlink" title="9.Decorator Pattern 装饰者模式"></a>9.Decorator Pattern 装饰者模式</h1><p>装饰模式是只针对一个基本的对象，添加一些修饰。如下面的是对MacBook，加内存（Memory函数装饰）增加75美元，雕刻（Engraving函数装饰）增加200美元，买保险（Insurance函数装饰）增加250美元。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacBook</span> </span>&#123;</span><br><span class="line">    cost() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">997</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    screenSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11.6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Memory</span>(<span class="params">macbook</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="number">75</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engraving</span>(<span class="params">macbook</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="number">200</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Decorator 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insurance</span>(<span class="params">macbook</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> v = macbook.cost();</span><br><span class="line">    macbook.cost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v + <span class="number">250</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mb = <span class="keyword">new</span> MacBook();</span><br><span class="line">Memory(mb);</span><br><span class="line">Engraving(mb);</span><br><span class="line">Insurance(mb);</span><br><span class="line"><span class="built_in">console</span>.log(mb.cost());<span class="comment">// Outputs: 1522</span></span><br><span class="line"><span class="built_in">console</span>.log(mb.screenSize());<span class="comment">// Outputs: 11.6</span></span><br></pre></td></tr></table></figure></p><h1 id="10-Flyweight-Pattern-享元模式"><a href="#10-Flyweight-Pattern-享元模式" class="headerlink" title="10.Flyweight Pattern 享元模式"></a>10.Flyweight Pattern 享元模式</h1><p>享元模式我感觉就是共享一些数据或者方法，有一个工厂可以管理</p><ul><li>Flyweight<br>享元对象（类似于接口），提供的可以共享的属性/方法；</li><li>Concrete Flyweight<br>具体享元对象，实现接口，具体实现享元对象的方法；</li><li>Flyweight Factory<br>享元工厂对象，创建并管理flyweight对象</li></ul><p>实现接口的方法，由于js没有，我们需要模拟。<br>这部分没有必要完全使用ES6语法，请参考我的上一篇博客。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在js模拟存虚拟的继承，类似java中的implements</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.implementsFor = <span class="function"><span class="keyword">function</span>(<span class="params">parentClassOrObject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parentClassOrObject.constructor === <span class="built_in">Function</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype = <span class="keyword">new</span> parentClassOrObject();</span><br><span class="line">        <span class="keyword">this</span>.prototype.consturctor = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.prototype.parent = parentClassOrObject.prototype;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//纯虚拟继承</span></span><br><span class="line">        <span class="keyword">this</span>.prototype = parentClassOrObject;</span><br><span class="line">        <span class="keyword">this</span>.prototype.constructor = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.prototype.parent = parentClassOrObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flyweight object 享元对象</span></span><br><span class="line"><span class="keyword">var</span> CoffeeOrder = &#123;</span><br><span class="line">    <span class="comment">// Interfaces 接口</span></span><br><span class="line">    serveCoffee: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;&#125;,</span><br><span class="line">    getFlavor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ConcreteFlyweight object that creates ConcreteFlyweight 具体享元对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeFlavor</span>(<span class="params">newFlavor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flavor = newFlavor;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getFlavor === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getFlavor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> flavor;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.serveCoffee === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.serveCoffee = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Serving Coffee flavor "</span> + flavor + <span class="string">" to table number "</span> + context.getTable());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Implement interface for CoffeeOrder 实现接口</span></span><br><span class="line">CoffeeFlavor.implementsFor(CoffeeOrder);</span><br><span class="line"><span class="comment">// tableNumber 订单数 辅助器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeOrderContext</span>(<span class="params">tableNumber</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getTable: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tableNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//享元工厂对象</span></span><br><span class="line"><span class="comment">//创建并管理flyweight对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoffeeFlavorFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flavors = &#123;&#125;,</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCoffeeFlavor: <span class="function"><span class="keyword">function</span>(<span class="params">flavorName</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//这是个单例模式</span></span><br><span class="line">            <span class="keyword">var</span> flavor = flavors[flavorName];</span><br><span class="line">            <span class="keyword">if</span> (flavor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                flavor = <span class="keyword">new</span> CoffeeFlavor(flavorName);<span class="comment">//创建flyweight对象</span></span><br><span class="line">                flavors[flavorName] = flavor;</span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flavor;</span><br><span class="line">        &#125;,</span><br><span class="line">        getTotalCoffeeFlavorsMade: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample usage: 测试</span></span><br><span class="line">testFlyweight()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFlyweight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The flavors ordered. 已订购的flavors</span></span><br><span class="line">    <span class="keyword">var</span> flavors = <span class="keyword">new</span> CoffeeFlavor(),</span><br><span class="line">        <span class="comment">// The tables for the orders. </span></span><br><span class="line">        tables = <span class="keyword">new</span> CoffeeOrderContext(),</span><br><span class="line">        <span class="comment">// Number of orders made 订单数量</span></span><br><span class="line">        ordersMade = <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// The CoffeeFlavorFactory instance</span></span><br><span class="line">        flavorFactory;</span><br><span class="line">    <span class="comment">//flavorIn 订单物的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">takeOrders</span>(<span class="params">flavorIn, table</span>) </span>&#123;</span><br><span class="line">        flavors[ordersMade] = flavorFactory.getCoffeeFlavor(flavorIn);</span><br><span class="line">        <span class="comment">//flavorFactory管理者创建好后(管理者也做了处理)返回给CoffeeFlavor</span></span><br><span class="line">        tables[ordersMade++] = <span class="keyword">new</span> CoffeeOrderContext(table);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flavorFactory = <span class="keyword">new</span> CoffeeFlavorFactory();</span><br><span class="line"></span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">2</span>);</span><br><span class="line">    takeOrders(<span class="string">"Cappuccino"</span>, <span class="number">2</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">1</span>);</span><br><span class="line">    takeOrders(<span class="string">"Frappe"</span>, <span class="number">1</span>);</span><br><span class="line">    takeOrders(<span class="string">"Xpresso"</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ordersMade; ++i) &#123;</span><br><span class="line">        flavors[i].serveCoffee(tables[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"total CoffeeFlavor objects made: "</span> + flavorFactory.getTotalCoffeeFlavorsMade());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">github</a>上，包含有ES5和ES6语法实现的内容。<br><a href="https://github.com/zrysmt/javascript-design-pattern" target="_blank" rel="noopener">https://github.com/zrysmt/javascript-design-pattern</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码1</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%811/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%811/</url>
      
        <content type="html"><![CDATA[<p>我在之前写了《一步一步DIY jQuery库》系列文章，然后发现再往下进行研究jQuery库的时候，由于jQuery库做了很多兼容IE6-8的内容，使其看起来比较繁琐，这也造成了jQuery源码的不宜读性。所幸作为移动端的jQuery库替代品-<a href="http://zeptojs.com/" target="_blank" rel="noopener">Zepto</a>,是一个轻量级的<strong>针对现代高级浏览器的JavaScript库， </strong>它与jquery有着类似的api。<strong>Zepto</strong>的设计目的是<strong>提供 jQuery 的类似的API</strong>，但并不是100%覆盖 jQuery。</p><p>接下来我们会用一系列博客一边研究Zepto源码，一边DIY一个Zepto库。</p><p>基于Zepto 1.2.0版本。</p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，第一篇博客对应文件夹v0.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><h1 id="1-下载源码并且编译"><a href="#1-下载源码并且编译" class="headerlink" title="1.下载源码并且编译"></a>1.下载源码并且编译</h1><p>在github中：<a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">https://github.com/madrobby/zepto</a>clone下源码，使用下面的命令在命令行编译：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dist</span><br></pre></td></tr></table></figure></p><p>生成源码文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`dist/zepto.js`</span><br><span class="line">`dist/zepto.min.js`</span><br></pre></td></tr></table></figure></p><h1 id="2-整体结构"><a href="#2-整体结构" class="headerlink" title="2.整体结构"></a>2.整体结构</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">window</span>.Zepto = Zepto;</span><br><span class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto);</span><br></pre></td></tr></table></figure><p><strong>Zepto</strong>没有提供<code>noConflict</code>命名冲突处理机制，<code>$</code>被占用后，就只能用<code>Zepto</code>。</p><h1 id="3-无new化处理结构"><a href="#3-无new化处理结构" class="headerlink" title="3.无new化处理结构"></a>3.无new化处理结构</h1><p>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>));<span class="comment">//生成dom（&lt;p&gt;&lt;/p&gt;）</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> zepto.init(selector, context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是调用<code>zepto.init</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//... ...</span></span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用<code>zepto.Z</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>[i] = dom[i];</span><br><span class="line">        <span class="keyword">this</span>.length = len;<span class="comment">//NodeList对象一定要有length属性</span></span><br><span class="line">        <span class="keyword">this</span>.selector = selector || <span class="string">''</span>;<span class="comment">//选择符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector);<span class="comment">//在这里使用new实例化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-传参-形如-39-lt-p-gt-lt-p-gt-39"><a href="#4-传参-形如-39-lt-p-gt-lt-p-gt-39" class="headerlink" title="4.传参 形如$(&#39;&lt;p&gt;&lt;/p&gt;&#39;)"></a>4.传参 形如<code>$(&#39;&lt;p&gt;&lt;/p&gt;&#39;)</code></h1><h2 id="4-1-定义要使用的变量"><a href="#4-1-定义要使用的变量" class="headerlink" title="4.1 定义要使用的变量"></a>4.1 定义要使用的变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyArray = [],</span><br><span class="line">    concat = emptyArray.concat,</span><br><span class="line">    filter = emptyArray.filter,</span><br><span class="line">    slice = emptyArray.slice,</span><br><span class="line">    fragmentRE = <span class="regexp">/^\s*&lt;(\w+|!)[^&gt;]*&gt;/</span>,</span><br><span class="line">    singleTagRE = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>,</span><br><span class="line">    tagExpanderRE = <span class="regexp">/&lt;(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^&gt;]*)\/&gt;/ig</span>,</span><br><span class="line">    rootNodeRE = <span class="regexp">/^(?:body|html)$/i</span>,</span><br><span class="line">    table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>),</span><br><span class="line">    tableRow = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>),</span><br><span class="line">    containers = &#123;</span><br><span class="line">        <span class="string">'tr'</span>: <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>),</span><br><span class="line">        <span class="string">'tbody'</span>: table,</span><br><span class="line">        <span class="string">'thead'</span>: table,</span><br><span class="line">        <span class="string">'tfoot'</span>: table,</span><br><span class="line">        <span class="string">'td'</span>: tableRow,</span><br><span class="line">        <span class="string">'th'</span>: tableRow,</span><br><span class="line">        <span class="string">'*'</span>: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    class2type = &#123;&#125;,</span><br><span class="line">    toString = class2type.toString,</span><br><span class="line">    zepto = &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-2-要使用的工具函数"><a href="#4-2-要使用的工具函数" class="headerlink" title="4.2 要使用的工具函数"></a>4.2 要使用的工具函数</h2><ul><li>判断类型模块</li></ul><p>这些函数都比较好理解<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</span><br><span class="line">        class2type[toString.call(obj)] || <span class="string">"object"</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; obj == obj.window</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type(obj) == <span class="string">"object"</span>;</span><br><span class="line">&#125;</span><br><span class="line">isArray = <span class="built_in">Array</span>.isArray ||</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123; <span class="keyword">return</span> object <span class="keyword">instanceof</span> <span class="built_in">Array</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = !!obj &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> obj &amp;&amp; obj.length,</span><br><span class="line">        type = $.type(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'function'</span> != type &amp;&amp; !isWindow(obj) &amp;&amp; (</span><br><span class="line">        <span class="string">'array'</span> == type || length === <span class="number">0</span> ||</span><br><span class="line">        (<span class="keyword">typeof</span> length == <span class="string">'number'</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加上下面这些就可以使用类型判断了</span></span><br><span class="line">$.each(<span class="string">"Boolean Number String Function Array Date RegExp Object Error"</span>.split(<span class="string">" "</span>), <span class="function"><span class="keyword">function</span>(<span class="params">i, name</span>) </span>&#123;</span><br><span class="line">    class2type[ <span class="string">"[object "</span> + name + <span class="string">"]"</span> ] = name.toLowerCase();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>在<code>$</code>后面定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.trim = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str == <span class="literal">null</span> ? <span class="string">""</span> : <span class="built_in">String</span>.prototype.trim.call(str);</span><br><span class="line">&#125;</span><br><span class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, key;</span><br><span class="line">    <span class="keyword">if</span> (likeArray(elements)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> elements)</span><br><span class="line">            <span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elements</span><br><span class="line">&#125;</span><br><span class="line">$.type = type;</span><br><span class="line">$.isArray = isArray；</span><br></pre></td></tr></table></figure><h2 id="4-4-zepto-init"><a href="#4-4-zepto-init" class="headerlink" title="4.4 zepto.init"></a>4.4 <code>zepto.init</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom;</span><br><span class="line">    <span class="comment">//未传参，返回空Zepto对象</span></span><br><span class="line">    <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">        <span class="keyword">return</span> zepto.Z();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</span><br><span class="line">        selector = selector.trim();</span><br><span class="line">        <span class="comment">//如果是“&lt;&gt;”,基本的html代码时</span></span><br><span class="line">        <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector)) &#123;</span><br><span class="line">            <span class="comment">//调用片段生成dom</span></span><br><span class="line">            dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span>;<span class="comment">//@1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>带有上下文和css查询</span></span><br><span class="line">    &#125; <span class="comment">//如果selector是一个Zepto对象，返回它自己</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) &#123;</span><br><span class="line">        <span class="keyword">return</span> selector;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isObject(selector)) &#123;</span><br><span class="line">            dom = [selector], selector = <span class="literal">null</span>;<span class="comment">//@3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-zepto-fragment"><a href="#4-5-zepto-fragment" class="headerlink" title="4.5 zepto.fragment"></a>4.5 <code>zepto.fragment</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [fragment 内部函数 HTML 转换成 DOM]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[String]&#125; html       [html片段]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[String]&#125; name       [容器标签名]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[Object]&#125; properties [附加的属性对象]</span></span><br><span class="line"><span class="comment"> * @return &#123;[*]&#125;           </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">zepto.fragment = <span class="function"><span class="keyword">function</span>(<span class="params">html, name, properties</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom, nodes, container;</span><br><span class="line">    <span class="keyword">if</span> (singleTagRE.test(html)) &#123;</span><br><span class="line">        dom = $(<span class="built_in">document</span>.createElement(<span class="built_in">RegExp</span>.$<span class="number">1</span>));<span class="comment">//@2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">        <span class="comment">//修正自闭合标签&lt;input/&gt;转换为&lt;input&gt;&lt;/input&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (html.replace) html = html.replace(tagExpanderRE, <span class="string">"&lt;$1&gt;&lt;/$2&gt;"</span>);</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) name = fragmentRE.test(html) &amp;&amp; <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//设置容器名，如果不是tr,tbody,thead,tfoot,td,th，则容器名为div</span></span><br><span class="line">        <span class="keyword">if</span> (!(name <span class="keyword">in</span> containers)) name = <span class="string">"*"</span>;</span><br><span class="line">        container = containers[name]; <span class="comment">//创建容器</span></span><br><span class="line">        container.innerHTML = <span class="string">''</span> + html; <span class="comment">//生成DOM</span></span><br><span class="line">        <span class="comment">//取容器的子节点</span></span><br><span class="line">        dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            container.removeChild(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//TODO 第三个参数properties带有属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>)</span><br></pre></td></tr></table></figure></p><p><code>zepto.init</code>–&gt; @1 –&gt;<code>zepto.fragment</code>–&gt; @2 –&gt; 函数 $ –&gt; <code>zepto.init</code><br>–&gt; @3 –&gt; <code>return zepto.Z(dom, selector)</code> –&gt; 函数 Z 返回结果。</p><h1 id="5-fn扩展"><a href="#5-fn扩展" class="headerlink" title="5.$.fn扩展"></a>5.<code>$.fn</code>扩展</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.fn = &#123;</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span>(<span class="params">test</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'测试'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($.fn.log());<span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).log());<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p><code>$(&#39;div&#39;)</code>返回的是Z对象（isZ返回true）。<br>注意，我们在外部只暴露了<code>Zepto</code>,<code>zepto</code>，<code>Z</code>，<code>zepto.Z</code>是内部的变量。<br>我们缺少一步，将<code>Z.prototype</code>指向<code>$.fn</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zepto.Z.prototype = Z.prototype = $.fn;</span><br></pre></td></tr></table></figure></p><p>这个时候我们的例子都能正确使用了。</p><h1 id="6-链式调用"><a href="#6-链式调用" class="headerlink" title="6.链式调用"></a>6.链式调用</h1><p>其实原理很简单，只要<code>return this;</code>即可。<br>在<code>$.fn</code>中需要<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.fn = &#123;</span><br><span class="line">   <span class="keyword">constructor</span>: zepto.Z,</span><br><span class="line">   length: 0,//为了链式调用能够return this;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>constructor</code>和<code>length</code>都是为了指定this的constructor,增加默认length属性。而且我们在设置<code>zepto.Z.prototype = Z.prototype = $.fn;</code>等于重写了<code>zepto.Z</code>和<code>Z</code>的原型链，需要使用<code>constructor: zepto.Z</code>重新使原型链连接上。</p><h1 id="7-extend扩展"><a href="#7-extend扩展" class="headerlink" title="7.$.extend扩展"></a>7.<code>$.extend</code>扩展</h1><ul><li>工具</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class="built_in">Object</span>.getPrototypeOf(obj) == <span class="built_in">Object</span>.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>$.extend</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.extend = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deep, args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target == <span class="string">'boolean'</span>) &#123;</span><br><span class="line">        deep = target;</span><br><span class="line">        target = args.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123; extend(target, arg, deep); &#125;);</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>extend函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target, source, deep</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source)</span><br><span class="line">    <span class="comment">//  deep=true深拷贝 source[key]是数组，一层一层剥开</span></span><br><span class="line">        <span class="keyword">if</span> (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key]))</span><br><span class="line">            target[key] = &#123;&#125;; <span class="comment">//target[key]不是对象的时候，返回空</span></span><br><span class="line">        <span class="comment">// source[key]是数组，target[key]不是数组</span></span><br><span class="line">        <span class="keyword">if</span> (isArray(source[key]) &amp;&amp; !isArray(target[key]))</span><br><span class="line">            target[key] = [];</span><br><span class="line">        extend(target[key], source[key], deep); <span class="comment">//递归</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source[key] !== <span class="literal">undefined</span>) &#123; <span class="comment">//递归结束，source[key]不是数组</span></span><br><span class="line">        target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">        one: <span class="string">'patridge'</span>,</span><br><span class="line">        three: [<span class="string">"apple"</span>, <span class="string">"patato"</span>],</span><br><span class="line">        five: &#123; <span class="attr">w</span>: <span class="string">"10"</span>, <span class="attr">a</span>: <span class="string">"20"</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    source2 = &#123;</span><br><span class="line">        three: [<span class="string">"apple1"</span>, <span class="string">"patato1"</span>, <span class="string">"abc"</span>],</span><br><span class="line">        four: <span class="string">"orange"</span>,</span><br><span class="line">        five: &#123; <span class="attr">w</span>: <span class="string">"100"</span>, <span class="attr">h</span>: <span class="string">"200"</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">// console.log($.extend(target, source2));//差别：five:&#123;w:"100",h:"200"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log($.extend(<span class="literal">true</span>,target, source2));<span class="comment">//差别：five:&#123;a:"20" h:"200" w:"100"&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="8-CSS选择器查询"><a href="#8-CSS选择器查询" class="headerlink" title="8.CSS选择器查询"></a>8.CSS选择器查询</h1><p>完成<code>zepto.init</code>中TODO:带有上下文和css查询。毕竟这些才是我们经常使用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom;</span><br><span class="line">    <span class="comment">//未传参，返回空Zepto对象</span></span><br><span class="line">    <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"未传参数"</span>);</span><br><span class="line">        <span class="keyword">return</span> zepto.Z();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</span><br><span class="line">        selector = selector.trim();</span><br><span class="line">        <span class="comment">//如果是“&lt;&gt;”,基本的html代码时</span></span><br><span class="line">        <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//调用片段生成dom</span></span><br><span class="line">            dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>带有上下文和css查询</span></span><br><span class="line">    <span class="comment">/********增加代码*****************************************/</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $(context).find(selector);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dom = zepto.qsa(<span class="built_in">document</span>, selector)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/******************************************************/</span></span><br><span class="line">    &#125; <span class="comment">//如果selector是一个Zepto对象，返回它自己</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) &#123;</span><br><span class="line">        <span class="keyword">return</span> selector;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isObject(selector)) &#123;</span><br><span class="line">            dom = [selector], selector = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>qsa函数定义</p></li><li><p>需要的工具和变量</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simpleSelectorRE = <span class="regexp">/^[\w-]*$/</span>；<span class="comment">//全局变量</span></span><br><span class="line"><span class="comment">//匹配包括下划线的任何单词字符或者 -</span></span><br></pre></td></tr></table></figure><ul><li>qsa函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [qsa CSS选择器]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[ELEMENT_NODE]&#125; element  [上下文，常用document]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[String]&#125; selector [选择器]</span></span><br><span class="line"><span class="comment"> * @return &#123;[NodeList ]&#125;   [查询结果]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> found,</span><br><span class="line">        maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</span><br><span class="line">        maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</span><br><span class="line">        nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></span><br><span class="line">        isSimple = simpleSelectorRE.test(nameOnly); <span class="comment">//匹配包括下划线的任何单词字符或者 - </span></span><br><span class="line">    <span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class="comment">//Safari DocumentFragment 没有 getElementById</span></span><br><span class="line">        <span class="comment">//根据id号去查，有返回[found],无返回[]</span></span><br><span class="line">        ((found = element.getElementById(nameOnly)) ? [found] : []) :</span><br><span class="line">        <span class="comment">//不是元素(ELEMENT_NODE)，DOCUMENT_NODE,DOCUMENT_FRAGMENT_NODE,返回空[]</span></span><br><span class="line">        (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] :</span><br><span class="line">        <span class="comment">//是上述类型，转化为数组</span></span><br><span class="line">        slice.call(</span><br><span class="line">            <span class="comment">//DocumentFragment 没有getElementsByClassName/TagName</span></span><br><span class="line">            isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ?</span><br><span class="line">            maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">//通过类名获得</span></span><br><span class="line">            element.getElementsByTagName(selector) : <span class="comment">//通过tag标签名获得</span></span><br><span class="line">            element.querySelectorAll(selector) <span class="comment">//不支持getElementsByClassName/TagName的</span></span><br><span class="line">        );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这篇博文已经把Zepto的基本架构构建出来了，当然这远远不够，甚至<code>zepto.init</code>都没完全实现，下一篇博文将首先完全实现<code>zepto.init</code></p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，第一篇博客对应文件夹v0.1。</p></blockquote><p>参考阅读：</p><ul><li><a href="http://www.runoob.com/manual/zeptojs.html#" target="_blank" rel="noopener">Zepto.js API中文版</a></li><li><a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">https://github.com/madrobby/zepto</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码6--deferred</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%816--deferred/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%816--deferred/</url>
      
        <content type="html"><![CDATA[<p>接下来我们来DIY另外一个重要的模块defrred延迟对象，这当然与源码有些许的不同，然而这并不重要。</p><p>基础包上要进行扩展了，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MODULES=<span class="string">"zepto event ajax deferred callbacks"</span> npm run dist</span><br></pre></td></tr></table></figure><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.6.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><h1 id="1-示例Demo"><a href="#1-示例Demo" class="headerlink" title="1.示例Demo"></a>1.示例Demo</h1><p><strong>示例1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">        type: <span class="string">'GET'</span>,</span><br><span class="line">        <span class="comment">// type: 'POST',</span></span><br><span class="line">        url: <span class="string">'/projects.json'</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        timeout: <span class="number">300</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, type</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Ajax error!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"done"</span>);</span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"fail"</span>);</span><br><span class="line">    &#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"always"</span>);</span><br><span class="line">    &#125;) <span class="comment">//then 三个参数 第一个是成功后回掉，第二个是失败，第三个是运行中</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"then1"</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"then2"</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"then3"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>成功后结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//done always then1</span></span><br></pre></td></tr></table></figure><p>失败后结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//alert('Ajax error!')  fail always then2</span></span><br></pre></td></tr></table></figure><p><strong>示例2：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>) </span>&#123;　　　　</span><br><span class="line">    <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">//在函数内部，新建一个Deferred对象　　　　</span></span><br><span class="line">    <span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;　　　　　　</span><br><span class="line">        alert(<span class="string">"执行完毕！"</span>);　　　　　　</span><br><span class="line">        dtd.resolve(); <span class="comment">// 改变Deferred对象的执行状态   　　　　</span></span><br><span class="line">    &#125;;　　</span><br><span class="line">    setTimeout(tasks, <span class="number">5000</span>);　　　　</span><br><span class="line">    <span class="keyword">return</span> dtd.promise(); <span class="comment">// 返回promise对象</span></span><br><span class="line">    <span class="comment">// 返回dtd.promise  因其没有resolve和reject方法，所以在外面不能该调用这两个方法改变状态</span></span><br><span class="line">    　　</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.when(wait()).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"哈哈，成功了！"</span>);</span><br><span class="line">&#125;)　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"出错啦！"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.Deferred(wait).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"哈哈，成功了！"</span>);</span><br><span class="line">&#125;)　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"出错啦！"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="2-整体结构"><a href="#2-整体结构" class="headerlink" title="2.整体结构"></a>2.整体结构</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DeferredMod = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Deferred</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tuples ,</span><br><span class="line">            state = <span class="string">"pending"</span>, <span class="comment">//Promoise的初始状态</span></span><br><span class="line">            promoise = &#123;</span><br><span class="line">                state: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//... ...</span></span><br><span class="line">                &#125;,</span><br><span class="line">                always: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//... ...</span></span><br><span class="line">                &#125;,</span><br><span class="line">                then: <span class="function"><span class="keyword">function</span>(<span class="params"> <span class="regexp">/* fnDone [, fnFailed [, fnProgress]] */</span> </span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//... ...</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//返回obj的promise对象</span></span><br><span class="line">                promise: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//... ...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            deferred = &#123;&#125;;</span><br><span class="line">        <span class="comment">//给deferred添加切换状态方法</span></span><br><span class="line">        $.each(tuples, <span class="function"><span class="keyword">function</span>(<span class="params">i, tuple</span>) </span>&#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//deferred包装成promise 继承promise对象的方法</span></span><br><span class="line">        <span class="comment">//调用promoise的promoise方法</span></span><br><span class="line">        promoise.promise(deferred);</span><br><span class="line">        <span class="comment">//传递了参数func，执行</span></span><br><span class="line">        <span class="keyword">if</span> (func) func.call(deferred, deferred);</span><br><span class="line">        <span class="comment">//返回deferred对象</span></span><br><span class="line">        <span class="keyword">return</span> deferred;</span><br><span class="line">    &#125; </span><br><span class="line">    $.when = <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>)</span>&#123; &#125;;</span><br><span class="line">    $.Deferred = Deferred;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DeferredMod;</span><br></pre></td></tr></table></figure><h1 id="3-Promise规范"><a href="#3-Promise规范" class="headerlink" title="3.Promise规范"></a>3.Promise规范</h1><p>由于deferred是基于Promise规范，我们首先需要理清楚Promises/A+是什么。<br>它的规范内容大致如下</p><ul><li>一个promise可能有三种状态：等待（pending）、已完成（fulfilled）、已拒绝（rejected）</li><li>一个promise的状态只可能从“等待”转到“完成”态或者“拒绝”态，不能逆向转换，同时“完成”态和“拒绝”态不能相互转换</li><li>promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致</li><li>then方法接受两个参数，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由“等待”态转换到“拒绝”态时调用。同时，then可以接受另一个promise传入，也接受一个“类then”的对象或方法，即thenable对象</li></ul><p>伪代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化： 等待状态  pending</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = &#123;</span><br><span class="line">    status: pending, <span class="comment">//状态</span></span><br><span class="line">    promise: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            done: done,</span><br><span class="line">            fail: fail</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//必须申明的then方法</span></span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">fulfilledFn, rejectedFn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.done(fulfilledFn);</span><br><span class="line">        <span class="keyword">this</span>.fail(rejectedFn);</span><br><span class="line">        <span class="comment">//返回promise对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当状态切换fulfilled时执行</span></span><br><span class="line">    done: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">    <span class="comment">//当状态切换rejected时执行</span></span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;,</span><br><span class="line">    <span class="comment">//切换为已完成状态</span></span><br><span class="line">    toFulfilled: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'fulfilled'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//切换为已拒绝状态</span></span><br><span class="line">    toRejected: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'rejected'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将函数包装成Promise对象,并注册完成、拒绝链方法</span></span><br><span class="line"><span class="comment">//通过then</span></span><br><span class="line"><span class="built_in">Promise</span>.promise(fA).then(fa1, efa1).then(fa2, efa2);</span><br><span class="line"><span class="comment">//假定fb里还调用了另一个异步FB，</span></span><br><span class="line"><span class="comment">//之前fA的异步回调执行到fb方法</span></span><br><span class="line"><span class="keyword">var</span> PA = <span class="built_in">Promise</span>.promise(fA).then(fa, efa).then(fb, efb);</span><br><span class="line"><span class="comment">//再挂上fB的异步回调</span></span><br><span class="line">PA.then(fB).then(fb1, efb1).then(fb2, efb2);</span><br></pre></td></tr></table></figure><h1 id="4-Deferred函数"><a href="#4-Deferred函数" class="headerlink" title="4.Deferred函数"></a>4.Deferred函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deferred</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*********************变量***************************************/</span></span><br><span class="line">    <span class="comment">//元组：描述状态、状态切换方法名、对应状态执行方法名、回调列表的关系</span></span><br><span class="line">    <span class="comment">//tuple引自C++/python，和list的区别是，它不可改变 ，用来存储常量集</span></span><br><span class="line">    <span class="keyword">var</span> tuples = [</span><br><span class="line">            <span class="comment">// action, add listener, listener list, final state</span></span><br><span class="line">            [<span class="string">"resolve"</span>, <span class="string">"done"</span>, $.Callbacks(&#123; <span class="attr">once</span>: <span class="number">1</span>, <span class="attr">memory</span>: <span class="number">1</span> &#125;), <span class="string">"resolved"</span>],</span><br><span class="line">            [<span class="string">"reject"</span>, <span class="string">"fail"</span>, $.Callbacks(&#123; <span class="attr">once</span>: <span class="number">1</span>, <span class="attr">memory</span>: <span class="number">1</span> &#125;), <span class="string">"rejected"</span>],</span><br><span class="line">            [<span class="string">"notify"</span>, <span class="string">"progress"</span>, $.Callbacks(&#123; <span class="attr">memory</span>: <span class="number">1</span> &#125;)]</span><br><span class="line">        ],</span><br><span class="line">        state = <span class="string">"pending"</span>, <span class="comment">//Promoise的初始状态</span></span><br><span class="line">        <span class="comment">//promise对象，promise和deferred的区别是:</span></span><br><span class="line">        <span class="comment">/*promise只包含执行阶段的方法always(),then(),done(),fail(),progress()及辅助方法state()、promise()等。</span></span><br><span class="line"><span class="comment">          deferred则在继承promise的基础上，增加切换状态的方法，resolve()/resolveWith(),reject()/rejectWith(),notify()/notifyWith()*/</span></span><br><span class="line">        <span class="comment">//所以称promise是deferred的只读副本</span></span><br><span class="line">        promise = &#123;</span><br><span class="line">            <span class="comment">// 返回状态</span></span><br><span class="line">            state: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//成功/失败均回调调用</span></span><br><span class="line">            always: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                deferred.done(<span class="built_in">arguments</span>).fail(<span class="built_in">arguments</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            then: <span class="function"><span class="keyword">function</span>(<span class="params"> <span class="regexp">/* fnDone [, fnFailed [, fnProgress]] */</span> </span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> fns = <span class="built_in">arguments</span>;</span><br><span class="line">                <span class="comment">//注意，这无论如何都会返回一个新的Deferred只读副本，</span></span><br><span class="line">                <span class="comment">//返回Deferred(func)函数，传递一个函数作为参数func，</span></span><br><span class="line">                <span class="comment">//`if (func) func.call(deferred, deferred);`执行func，这个时候defer就是deferred</span></span><br><span class="line">                <span class="keyword">return</span> Deferred(<span class="function"><span class="keyword">function</span>(<span class="params">defer</span>) </span>&#123;</span><br><span class="line">                    $.each(tuples, <span class="function"><span class="keyword">function</span>(<span class="params">i, tuple</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">//i==0: done   i==1: fail  i==2 progress</span></span><br><span class="line">                        <span class="keyword">var</span> fn = $.isFunction(fns[i]) &amp;&amp; fns[i];</span><br><span class="line">                        <span class="comment">//执行新deferred done/fail/progress</span></span><br><span class="line">                        deferred[tuple[<span class="number">1</span>]](<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="comment">//直接执行新添加的回调 fnDone fnFailed fnProgress</span></span><br><span class="line">                            <span class="keyword">var</span> returned = fn &amp;&amp; fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                            <span class="keyword">if</span> (returned &amp;&amp; $.isFunction(returned.promise)) &#123;</span><br><span class="line">                                <span class="comment">//转向fnDone fnFailed fnProgress返回的promise对象</span></span><br><span class="line">                                <span class="comment">//注意，这里是两个promise对象的数据交流</span></span><br><span class="line">                                <span class="comment">//新deferrred对象切换为对应的成功/失败/通知状态，传递的参数为 returned.promise() 给予的参数值    </span></span><br><span class="line">                                returned.promise()</span><br><span class="line">                                    .done(defer.resolve)</span><br><span class="line">                                    .fail(defer.reject)</span><br><span class="line">                                    .progress(defer.notify);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">var</span> context = <span class="keyword">this</span> === promise ? defer.promise() : <span class="keyword">this</span>,</span><br><span class="line">                                    values = fn ? [returned] : <span class="built_in">arguments</span>;</span><br><span class="line">                                defer[tuple[<span class="number">0</span>] + <span class="string">"With"</span>](context, values); <span class="comment">//新deferrred对象切换为对应的成功/失败/通知状态</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    fns = <span class="literal">null</span>;</span><br><span class="line">                &#125;).promise();  <span class="comment">// 返回deferrred.promise  因其没有resolve和reject方法，所以在外面不能该调用这两个方法改变状态</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//返回obj的promise对象</span></span><br><span class="line">            promise: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> obj != <span class="literal">null</span> ? $.extend(obj, promise) : promise;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里需要重点注意的是：promise和deferred的关系：</li></ul><p>promise只包含执行阶段的方法always(),then(),done(),fail(),progress()及辅助方法state()、promise()等。</p><p>deferred则在继承promise的基础上（第5部分：<code>promise.promise(deferred)</code>），增加切换状态的方法，resolve()/resolveWith(),reject()/rejectWith(),notify()/notifyWith()</p><p>所以称promise是deferred的只读副本</p><hr><ul><li>赋予resolve、reject、notify真正的含义是在<code>then</code>中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切换的状态是resolve成功/reject失败</span></span><br><span class="line"><span class="comment">//添加首组方法做预处理，修改state的值，使成功或失败互斥，锁定progress回调列表</span></span><br><span class="line"><span class="keyword">if</span> (stateString) &#123;</span><br><span class="line">   list.add(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      state = stateString;</span><br><span class="line">      <span class="comment">//i^1  ^异或运算符  0^1=1 1^1=0，成功或失败回调互斥，调用一方，禁用另一方</span></span><br><span class="line">   &#125;, tuples[i ^ <span class="number">1</span>][<span class="number">2</span>].disable, tuples[<span class="number">2</span>][<span class="number">2</span>].lock);</span><br><span class="line">&#125;<span class="comment">//因为回调函数带有memory，add后立刻执行</span></span><br></pre></td></tr></table></figure><hr><ul><li>提供的<a href="http://www.css88.com/jqapi-1.9/deferred.promise/" target="_blank" rel="noopener"><code>deferred.promise()</code></a>方法的作用是，在原来的Deferred 对象上返回另一个 Deferred 对象，即受限制的 Promise 对象，受限制的 Promise 对象只开放与改变执行状态无关的方法（比如done()方法和fail()方法），屏蔽与改变执行状态有关的方法（比如resolve()方法和reject()方法），从而使得执行状态不能被改变</li></ul><h1 id="5-给deferred添加切换状态方法"><a href="#5-给deferred添加切换状态方法" class="headerlink" title="5.给deferred添加切换状态方法"></a>5.给deferred添加切换状态方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给deferred添加切换状态方法</span></span><br><span class="line">$.each(tuples, <span class="function"><span class="keyword">function</span>(<span class="params">i, tuple</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = tuple[<span class="number">2</span>], <span class="comment">//$.Callback</span></span><br><span class="line">        stateString = tuple[<span class="number">3</span>]; <span class="comment">//状态 一共2个：resolved  rejected</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展promise的done、fail、progress为Callback的add方法，使其成为回调列表</span></span><br><span class="line">    <span class="comment">//简单写法：</span></span><br><span class="line">    <span class="comment">// promise['done'] = $.Callbacks( "once memory" ).add</span></span><br><span class="line">    <span class="comment">// promise['fail'] = $.Callbacks( "once memory" ).add  </span></span><br><span class="line">    <span class="comment">// promise['progress'] = $.Callbacks( "memory" ).add</span></span><br><span class="line">    <span class="comment">// 使用的时候  .done(func)  func就添加到了回调函数中</span></span><br><span class="line">    promise[tuple[<span class="number">1</span>]] = list.add;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切换的状态是resolve成功/reject失败</span></span><br><span class="line">    <span class="comment">//添加首组方法做预处理，修改state的值，使成功或失败互斥，锁定progress回调列表</span></span><br><span class="line">    <span class="keyword">if</span> (stateString) &#123;</span><br><span class="line">        list.add(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            state = stateString;</span><br><span class="line">            <span class="comment">//i^1  ^异或运算符  0^1=1 1^1=0，成功或失败回调互斥，调用一方，禁用另一方</span></span><br><span class="line">        &#125;, tuples[i ^ <span class="number">1</span>][<span class="number">2</span>].disable, tuples[<span class="number">2</span>][<span class="number">2</span>].lock);</span><br><span class="line">    &#125;<span class="comment">//因为回调函数带有memory，add后立刻执行.包括上面的 promise[tuple[1]]</span></span><br><span class="line">    <span class="comment">//添加切换状态方法 resolve()/resolveWith(),reject()/rejectWith(),notify()/notifyWith()</span></span><br><span class="line">    deferred[tuple[<span class="number">0</span>]] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//使用list.fireWith 调用</span></span><br><span class="line">        deferred[tuple[<span class="number">0</span>] + <span class="string">"With"</span>](<span class="keyword">this</span> === deferred ? promise : <span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//使用 deferred.resolveWith()就使用fireWith调用了回调函数</span></span><br><span class="line">    deferred[tuple[<span class="number">0</span>] + <span class="string">"With"</span>] = list.fireWith;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//deferred包装成promise 继承promise对象的方法</span></span><br><span class="line"><span class="comment">//调用promise的promise方法</span></span><br><span class="line">promise.promise(deferred);</span><br><span class="line"><span class="comment">//传递了参数func，执行</span></span><br><span class="line"><span class="keyword">if</span> (func) func.call(deferred, deferred);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回deferred对象</span></span><br><span class="line"><span class="keyword">return</span> deferred;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-when"><a href="#6-when" class="headerlink" title="6.$.when"></a>6.<code>$.when</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要用于多异步队列处理。</span></span><br><span class="line"><span class="comment">       多异步队列都成功，执行成功方法，一个失败，执行失败方法</span></span><br><span class="line"><span class="comment">       也可以传非异步队列对象</span></span><br><span class="line"><span class="comment">     * @param sub</span></span><br><span class="line"><span class="comment">     * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">$.when = <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> resolveValues = slice.call(<span class="built_in">arguments</span>), <span class="comment">//队列数组 ，未传参数是[]</span></span><br><span class="line">        len = resolveValues.length, <span class="comment">//队列个数</span></span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        remain = len !== <span class="number">1</span> || (sub &amp;&amp; $.isFunction(sub.promise)) ? len : <span class="number">0</span>, <span class="comment">//子deferred计数</span></span><br><span class="line">        deferred = remain === <span class="number">1</span> ? sub : Deferred(), <span class="comment">//主def,如果是1个fn，直接以它为主def，否则建立新的Def</span></span><br><span class="line">        progressValues, progressContexts, resolveContexts,</span><br><span class="line">        updateFn = <span class="function"><span class="keyword">function</span>(<span class="params">i, ctx, val</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">                ctx[i] = <span class="keyword">this</span>;</span><br><span class="line">                val[i] = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ? slice.call(<span class="built_in">arguments</span>) : value; <span class="comment">// val 调用成功函数列表的参数</span></span><br><span class="line">                <span class="keyword">if</span> (val === progressValues) &#123;</span><br><span class="line">                    deferred.notifyWith(ctx, val); <span class="comment">// 如果是通知，调用主函数的通知，通知可以调用多次</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(--remain)) &#123; <span class="comment">//如果是成功，则需等成功计数为0，即所有子def都成功执行了，remain变为0</span></span><br><span class="line">                    deferred.resolveWith(ctx, val); <span class="comment">//调用主函数的成功</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        progressValues = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">        progressContexts = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">        resolveContexts = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resolveValues[i] &amp;&amp; $.isFunction(resolveValues[i].promise)) &#123;</span><br><span class="line">                resolveValues[i].promise()</span><br><span class="line">                    .done(updateFn(i, resolveContexts, resolveValues)) <span class="comment">//每一个成功</span></span><br><span class="line">                    .fail(deferred.reject) <span class="comment">//直接挂入主def的失败通知函数,当某个子def失败时，</span></span><br><span class="line">                    <span class="comment">//调用主def的切换失败状态方法，执行主def的失败函数列表   </span></span><br><span class="line">                    .progress(updateFn(i, progressContexts, progressValues));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --remain; <span class="comment">//非def，直接标记成功，减1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//都为非def，比如无参数，或者所有子队列全为非def，直接通知成功，进入成功函数列表</span></span><br><span class="line">    <span class="keyword">if</span> (!remain) deferred.resolveWith(resolveContexts, resolveValues);</span><br><span class="line">    <span class="keyword">return</span> deferred.promise();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例可以见第一部分示例2</p><blockquote><p>全部代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，本博文对应文件夹v0.6.x。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>参考阅读：</p><ul><li><a href="http://www.cnblogs.com/mominger/p/4411632.html" target="_blank" rel="noopener">Zepto源码分析-deferred模块</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="noopener">jQuery的deferred对象详解</a></li><li><a href="http://www.css88.com/jqapi-1.9/deferred.resolveWith/" target="_blank" rel="noopener">deferred.resolveWith()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码2</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%812/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%812/</url>
      
        <content type="html"><![CDATA[<p>我们接着上一篇博客继续完成<code>zepto.init</code>的其余内容。</p><p>基于Zepto 1.2.0版本。</p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，第一篇博客对应文件夹v0.2。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>整体的流程是：</p><ul><li>有传入context，回调自身：<code>$(context).find(selector)</code></li><li>selector参数为空，直接调用$.zepto.Z方法获取Z对象：<code>zepto.Z()</code></li><li>selector参数为html片段，调用$.zepto.fragment方法获取对应DOM节点再调用$.zeptoZ方法获取Z对象</li><li>selector参数为css选择器，调用$.zepto.qsa方法获取对应DOM节点再调用$.zepto.Z方法获取Z对象</li><li>selector参数为DOM节点数组，去掉数组中值为null的项，调用$.zepto.Z方法获取Z对象</li><li>selector参数为单个DOM节点，<code>dom = [selector]</code>，然后调用$.zepto.Z方法获取Z对象</li><li>selector参数为Z对象，直接返回该Z对象</li><li>selector参数为函数，执行<code>$(document).ready(selector)</code>，在DOM加载完的时候调用该函数</li></ul><p>整体代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom;</span><br><span class="line">    <span class="comment">//未传参，返回空Zepto对象</span></span><br><span class="line">    <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"未传参数"</span>);</span><br><span class="line">        <span class="keyword">return</span> zepto.Z();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</span><br><span class="line">        selector = selector.trim();</span><br><span class="line">        <span class="comment">//如果是“&lt;&gt;”,基本的html代码时</span></span><br><span class="line">        <span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//调用片段生成dom</span></span><br><span class="line">            dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $(context).find(selector);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dom = zepto.qsa(<span class="built_in">document</span>, selector)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">//如果selector是个函数</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector);</span><br><span class="line">    &#125; <span class="comment">//如果selector是一个Zepto对象，返回它自己</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) &#123;</span><br><span class="line">        <span class="keyword">return</span> selector;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isArray(selector)) &#123;</span><br><span class="line">            dom = compact(selector);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector)) &#123;</span><br><span class="line">            dom = [selector], selector = <span class="literal">null</span>;<span class="comment">//单个DOM</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector)) &#123;</span><br><span class="line">            dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $(context).find(selector);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dom = zepto.qsa(<span class="built_in">document</span>, selector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="1-上下文查找"><a href="#1-上下文查找" class="headerlink" title="1.上下文查找"></a>1.上下文查找</h1><p>关键一步是<code>$(context).find(selector);</code>，通过find函数查找（<code>1.5</code>部分）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"foo1"</span>&gt;</span><br><span class="line">    &lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="_zepto.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>, <span class="string">'#foo1'</span>));<span class="comment">//foo1下的两个div</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-1-工具及变量"><a href="#1-1-工具及变量" class="headerlink" title="1.1 工具及变量"></a>1.1 工具及变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除包含的null undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item != <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">return</span> type(value) == <span class="string">"function"</span>； &#125;</span><br><span class="line">$.isFunction = isFunction；</span><br></pre></td></tr></table></figure><h2 id="1-2-filter方法"><a href="#1-2-filter方法" class="headerlink" title="1.2 filter方法"></a>1.2 filter方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.fn = &#123;</span><br><span class="line">    <span class="comment">//fiter函数其实可以说是包装原生的filter方法</span></span><br><span class="line">    filter: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFunction(selector)) &#123;</span><br><span class="line">           <span class="comment">//this.not(selector)取到需要排除的集合，</span></span><br><span class="line">           <span class="comment">//第二次再取反(这个时候this.not的参数就是一个集合了)，得到想要的集合</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.not(<span class="keyword">this</span>.not(selector));<span class="comment">//见`1.3`部分</span></span><br><span class="line">        &#125; <span class="comment">//下面一句的filter是原生的方法</span></span><br><span class="line">        <span class="comment">//过滤剩下this中有被selector选择的</span></span><br><span class="line">        <span class="keyword">return</span> $(filter.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> zepto.matches(element, selector);<span class="comment">//见`1.4`部分</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-not、forEach方法"><a href="#1-3-not、forEach方法" class="headerlink" title="1.3 not、forEach方法"></a>1.3 not、forEach方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$.fn = &#123;</span><br><span class="line">    forEach: emptyArray.forEach,</span><br><span class="line">    not: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nodes = [];</span><br><span class="line">        <span class="comment">//当selector为函数时，safari下的typeof NodeList也是function，</span></span><br><span class="line">        <span class="comment">//所以这里需要再加一个判断selector.call !== undefined</span></span><br><span class="line">        <span class="keyword">if</span> (isFunction(selector) &amp;&amp; selector.call !== <span class="literal">undefined</span>)</span><br><span class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!selector.call(<span class="keyword">this</span>, idx)) nodes.push(<span class="keyword">this</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> excludes = <span class="keyword">typeof</span> selector == <span class="string">'string'</span> ? <span class="keyword">this</span>.filter(selector) :</span><br><span class="line">                <span class="comment">//当selector为nodeList时执行slice.call(selector),</span></span><br><span class="line">                <span class="comment">//注意这里的isFunction(selector.item)是为了排除selector为数组的情况</span></span><br><span class="line">                (likeArray(selector) &amp;&amp; isFunction(selector.item)) ? slice.call(selector) : $(selector);</span><br><span class="line">            <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (excludes.indexOf(el) &lt; <span class="number">0</span>) nodes.push(el);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上面得到的结果是数组，需要转成zepto对象，以便继承其它方法，实现链写</span></span><br><span class="line">        <span class="keyword">return</span> $(nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-matches方法"><a href="#1-4-matches方法" class="headerlink" title="1.4 matches方法"></a>1.4 matches方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * [matches 元素element是否在selector中]</span></span><br><span class="line"><span class="comment">    * @param  &#123;[元素]&#125; element  [元素，被查询的元素]</span></span><br><span class="line"><span class="comment">    * @param  &#123;[String]&#125; selector [CSS选择器]</span></span><br><span class="line"><span class="comment">    * @return &#123;[Boolean]&#125;          [/true/false]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">zepto.matches = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!selector || !element || element.nodeType !== <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> matchesSelector = element.matches || element.webkitMatchesSelector ||</span><br><span class="line">        element.mozMatchesSelector || element.oMatchesSelector ||</span><br><span class="line">        element.matchesSelector;</span><br><span class="line">    <span class="comment">//如果当前元素能被指定的css选择器查找到,则返回true,否则返回false.</span></span><br><span class="line">    <span class="comment">//https://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches</span></span><br><span class="line">    <span class="keyword">if</span> (matchesSelector) <span class="keyword">return</span> matchesSelector.call(element, selector);</span><br><span class="line">    <span class="comment">//如果浏览器不支持MatchesSelector方法，则将节点放入一个临时div节点</span></span><br><span class="line">    <span class="keyword">var</span> match, parent = element.parentNode,</span><br><span class="line">        temp = !parent;</span><br><span class="line">    <span class="comment">//当element没有父节点(temp)，那么将其插入到一个临时的div里面</span></span><br><span class="line">    <span class="comment">//目的就是为了使用qsa函数</span></span><br><span class="line">    <span class="keyword">if</span> (temp)(parent = tempParent).appendChild(element);</span><br><span class="line">    <span class="comment">///将parent作为上下文，来查找selector的匹配结果，并获取element在结果集的索引</span></span><br><span class="line">    <span class="comment">//不存在时为－1,再通过~-1转成0，存在时返回一个非零的值</span></span><br><span class="line">    match = ~zepto.qsa(parent, selector).indexOf(element);</span><br><span class="line">    <span class="comment">//将插入的节点删掉(&amp;&amp;如果第一个表达式为false,则不再计算第二个表达式)</span></span><br><span class="line">    temp &amp;&amp; tempParent.removeChild(element);</span><br><span class="line">    <span class="keyword">return</span> match; <span class="comment">//true/false即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-find方法"><a href="#1-5-find方法" class="headerlink" title="1.5 find方法"></a>1.5 find方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$.fn = &#123;</span><br><span class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result, $<span class="keyword">this</span> = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            result = $();</span><br><span class="line">        &#125; <span class="comment">//1-如果selector为node或者zepto集合时</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历selector，筛选出父级为集合中记录的selector</span></span><br><span class="line">            result = $(selector).filter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> node = <span class="keyword">this</span>;</span><br><span class="line">                <span class="comment">//如果$.contains(parent, node)返回true，则emptyArray.some</span></span><br><span class="line">                <span class="comment">//也会返回true,外层的filter则会收录该条记录</span></span><br><span class="line">                <span class="keyword">return</span> emptyArray.some.call($<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $.contains(parent, node);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.length == <span class="number">1</span>) &#123; <span class="comment">//2-NodeList对象，且length=1</span></span><br><span class="line">            result = $(zepto.qsa(<span class="keyword">this</span>[<span class="number">0</span>], selector));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//3-NodeList对象，且length&gt;1</span></span><br><span class="line">                <span class="keyword">return</span> zepto.qsa(<span class="keyword">this</span>, selector);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这部分会使用发dao<code>map</code>函数，这里给出代码<br><code>$.fn</code>中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $($.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.call(el, i, el);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.map = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value, values = [],</span><br><span class="line">        i, key;</span><br><span class="line">    <span class="keyword">if</span> (likeArray(elements)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">            value = callback(elements[i], i)</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</span><br><span class="line">            value = callback(elements[key], key);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) values.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flatten(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到一个数组的副本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array.length &gt; <span class="number">0</span> ? $.fn.concat.apply([], array) : array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-selector是函数（DOMReady机制）"><a href="#2-selector是函数（DOMReady机制）" class="headerlink" title="2.selector是函数（DOMReady机制）"></a>2.selector是函数（DOMReady机制）</h1><p><code>zepto.init</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFunction(selector)) &#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readyRE = <span class="regexp">/complete|loaded|interactive/</span>；</span><br></pre></td></tr></table></figure><p><code>$.fn</code>函数里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ready: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (readyRE.test(<span class="built_in">document</span>.readyState) &amp;&amp; <span class="built_in">document</span>.body) &#123;</span><br><span class="line">        callback($);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback($) &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里由于不考虑兼容IE10以下版本，所以写的比较简单。详细的介绍可以看我的另外的一片博客<a href="http://blog.csdn.net/future_todo/article/details/53120569" target="_blank" rel="noopener">【domReady机制探究及DOMContentLoaded研究】</a>。</p><p>这里的<code>document.readyState</code>顺序是：loading–&gt;interactive(触发监听DOMContentLoaded的函数)【DOM解析完成】–&gt;compelete【资源完成】。</p><p><code>ready</code>就是为了保证回掉函数<code>callback</code>在<code>onload</code>之前执行。</p><p>第一篇博客选择符是html片段的时候，还剩下当第三个参数properties带有属性的时候没有处理。</p><h1 id="3-创建DOM时候带有属性"><a href="#3-创建DOM时候带有属性" class="headerlink" title="3. 创建DOM时候带有属性"></a>3. 创建DOM时候带有属性</h1><p>用法例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>,&#123;<span class="attr">width</span>:<span class="string">'100px'</span>&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>工具函数/变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methodAttributes = [<span class="string">'val'</span>, <span class="string">'css'</span>, <span class="string">'html'</span>, <span class="string">'text'</span>, <span class="string">'data'</span>, <span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'offset'</span>]；</span><br></pre></td></tr></table></figure><p>在<code>zepto.fragment</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">zepto.fragment = <span class="function"><span class="keyword">function</span>(<span class="params">html, name, properties</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom, nodes, container;</span><br><span class="line">    <span class="keyword">if</span> (singleTagRE.test(html)) &#123;</span><br><span class="line">        dom = $(<span class="built_in">document</span>.createElement(<span class="built_in">RegExp</span>.$<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">        <span class="comment">//修正自闭合标签&lt;input/&gt;转换为&lt;input&gt;&lt;/input&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (html.replace) html = html.replace(tagExpanderRE, <span class="string">"&lt;$1&gt;&lt;/$2&gt;"</span>);</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) name = fragmentRE.test(html) &amp;&amp; <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//设置容器名，如果不是tr,tbody,thead,tfoot,td,th，则容器名为div</span></span><br><span class="line">        <span class="keyword">if</span> (!(name <span class="keyword">in</span> containers)) name = <span class="string">"*"</span>;</span><br><span class="line">        container = containers[name]; <span class="comment">//创建容器</span></span><br><span class="line">        container.innerHTML = <span class="string">''</span> + html; <span class="comment">//生成DOM</span></span><br><span class="line">        <span class="comment">//取容器的子节点</span></span><br><span class="line">        dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            container.removeChild(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TODO 第三个参数properties带有属性</span></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(properties)) &#123;</span><br><span class="line">        nodes = $(dom);</span><br><span class="line">        $.each(properties, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 优先获取属性修正对象，通过修正对象读写值</span></span><br><span class="line">            <span class="comment">// methodAttributes包含'val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'，这些方法都应在`$.fn`中重写。</span></span><br><span class="line">            <span class="keyword">if</span> (methodAttributes.indexOf(key) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                nodes[key](value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nodes.attr(key, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中methodAttributes方法的源码实现，我们以后再具体介绍，到此为止<code>zepto.init</code>已经基本介绍结束了，接下来我们将另外写一篇博客看看zepto里面操作DOM的具体方法。</p><p>参考阅读：</p><ul><li><a href="https://github.com/oadaM92/zepto/blob/master/oadaM92/zepto/README.md" target="_blank" rel="noopener">Zepto核心模块源码分析</a></li><li><a href="http://www.runoob.com/w3cnote/zepto-js-source-analysis.html" target="_blank" rel="noopener">zepto.js 源码解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码5-- callbacks</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%815--callbacks/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%815--callbacks/</url>
      
        <content type="html"><![CDATA[<p>Callbacks API用来管理回调函数，也作为deferred延迟对象的基础部分，今天就一起来探寻它的源码（对应src下的callbacks.js）。</p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.5.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>注：要在<a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">github源代码中</a>自己编译的话，要在基础包<code>命令：npm run dist</code>上要进行扩展了，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MODULES=<span class="string">"zepto event ajax  callbacks"</span> npm run dist</span><br><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">&gt; SET MODULES=zepto event ajax  callbacks</span><br><span class="line">&gt; npm run dist</span><br></pre></td></tr></table></figure><h1 id="1-示例Demo"><a href="#1-示例Demo" class="headerlink" title="1.示例Demo"></a>1.示例Demo</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo:'</span> + value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bar:'</span> + value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>示例1：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks = $.Callbacks();</span><br><span class="line">callbacks.add(foo);</span><br><span class="line">callbacks.fire([<span class="string">'hello'</span>, <span class="string">'wo'</span>, <span class="string">'123'</span>]);</span><br><span class="line">callbacks.add(bar);</span><br><span class="line">callbacks.fire(<span class="string">'中'</span>);</span><br><span class="line"> <span class="comment">/*foo:hello,wo,123</span></span><br><span class="line"><span class="comment">   foo:中</span></span><br><span class="line"><span class="comment">   bar:中*/</span></span><br></pre></td></tr></table></figure></p><p>标记：</p><ul><li>once： 回调只能触发一次</li><li>memory 记录上一次触发回调函数列表时的参数，之后添加的函数都用这参数立即执行</li><li>unique  一个回调函数只能被添加一次        </li><li>stopOnFalse 当某个回调函数返回false时中断执行</li></ul><p><strong>示例2：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks = $.Callbacks(&#123;</span><br><span class="line">    memory: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">callbacks.add(foo);</span><br><span class="line">callbacks.fire([<span class="string">'hello'</span>, <span class="string">'wo'</span>, <span class="string">'123'</span>]);</span><br><span class="line">callbacks.add(bar);</span><br><span class="line"><span class="comment">/*foo:hello,wo,123</span></span><br><span class="line"><span class="comment">  bar:hello,wo,123*/</span></span><br></pre></td></tr></table></figure></p><p><strong>示例3：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks = $.Callbacks(&#123;</span><br><span class="line">    memory: <span class="literal">true</span>,</span><br><span class="line">    once: <span class="literal">true</span> <span class="comment">//只能执行一次</span></span><br><span class="line">&#125;);</span><br><span class="line">callbacks.add(foo);</span><br><span class="line">callbacks.fire([<span class="string">'hello'</span>, <span class="string">'wo'</span>, <span class="string">'123'</span>]);</span><br><span class="line">callbacks.add(bar);</span><br><span class="line">callbacks.fire([<span class="string">'hello'</span>, <span class="string">'wo'</span>, <span class="string">'123'</span>]);</span><br><span class="line"><span class="comment">/*foo:hello,wo,123</span></span><br><span class="line"><span class="comment">  bar:hello,wo,123*/</span></span><br></pre></td></tr></table></figure></p><h1 id="2-整体结构"><a href="#2-整体结构" class="headerlink" title="2.整体结构"></a>2.整体结构</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Callbacks = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $.Callbacks = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        Callbacks = &#123;<span class="comment">/*add remove has empty等方法*/</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> Callbacks;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Callbacks;</span><br></pre></td></tr></table></figure><h1 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h1><p>当然你也可以结合下一部分的过程分析，来理解源码。</p><h2 id="3-1-几个重要变量"><a href="#3-1-几个重要变量" class="headerlink" title="3.1 几个重要变量"></a>3.1 几个重要变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">options = $.extend(&#123;&#125;, options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memory, <span class="comment">// Last fire value (for non-forgettable lists)</span></span><br><span class="line">    fired, <span class="comment">// Flag to know if list was already fired    //是否回调过</span></span><br><span class="line">    firing, <span class="comment">// Flag to know if list is currently firing  //回调函数列表是否正在执行中</span></span><br><span class="line">    firingStart, <span class="comment">// First callback to fire (used internally by add and fireWith) //第一回调函数的下标</span></span><br><span class="line">    firingLength, <span class="comment">// End of the loop when firing   //回调函数列表长度？</span></span><br><span class="line">    firingIndex, <span class="comment">// Index of currently firing callback (modified by remove if needed)</span></span><br><span class="line">    list = [], <span class="comment">// Actual callback list     //回调数据源： 回调列表</span></span><br><span class="line">    stack = !options.once &amp;&amp; [], <span class="comment">// Stack of fire calls for repeatable lists//回调只能触发一次的时候，stack永远为false</span></span><br></pre></td></tr></table></figure><h2 id="3-2-fire函数–-回调底层函数"><a href="#3-2-fire函数–-回调底层函数" class="headerlink" title="3.2 fire函数– 回调底层函数"></a>3.2 fire函数– 回调底层函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发   回调底层函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fire = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    memory = options.memory &amp;&amp; data;</span><br><span class="line">    fired = <span class="literal">true</span>;</span><br><span class="line">    firingIndex = firingStart || <span class="number">0</span>;</span><br><span class="line">    firingStart = <span class="number">0</span>;</span><br><span class="line">    firingLength = list.length;</span><br><span class="line">    firing = <span class="literal">true</span>; <span class="comment">//正在回调</span></span><br><span class="line">    <span class="comment">//遍历回调列表，全部回调函数都执行，参数是传递过来的data</span></span><br><span class="line">    <span class="keyword">for</span> (; list &amp;&amp; firingIndex &lt; firingLength; ++firingIndex) &#123;</span><br><span class="line">        <span class="comment">//如果 list[ firingIndex ] 为false，且stopOnFalse（中断）模式</span></span><br><span class="line">        <span class="comment">//list[firingIndex].apply(data[0], data[1])  这是执行回调</span></span><br><span class="line">        <span class="comment">//data经过封装，[context,arg] 第一个参数为上下文</span></span><br><span class="line">        <span class="keyword">if</span> (list[firingIndex].apply(data[<span class="number">0</span>], data[<span class="number">1</span>]) === <span class="literal">false</span> &amp;&amp; options.stopOnFalse) &#123;</span><br><span class="line">            memory = <span class="literal">false</span>; <span class="comment">//中断回掉执行</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    firing = <span class="literal">false</span>; <span class="comment">//回调执行完毕</span></span><br><span class="line">    <span class="keyword">if</span> (list) &#123;</span><br><span class="line">        <span class="comment">//stack里还缓存有未执行的回调</span></span><br><span class="line">        <span class="keyword">if</span> (stack) &#123; <span class="comment">//options.once存在的时候，不执行下面的一行</span></span><br><span class="line">            stack.length &amp;&amp; fire(stack.shift()); <span class="comment">//执行stack里的回调</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (memory) &#123;</span><br><span class="line">            list.length = <span class="number">0</span>; <span class="comment">//memory 清空回调列表</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Callbacks.disable(); <span class="comment">//其他情况如  once 禁用回调</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Callbacks对象"><a href="#3-3-Callbacks对象" class="headerlink" title="3.3 Callbacks对象"></a>3.3 Callbacks对象</h2><p>回调函数管理：添加add() 移除remove()、触发fire()、锁定lock()、禁用disable()回调函数。它为Deferred异步队列提供支持。</p><p>原理：通过一个数组保存回调函数，其他方法围绕此数组进行检测和操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">Callbacks = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list) &#123;</span><br><span class="line">            <span class="keyword">var</span> start = list.length,</span><br><span class="line">                add = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">                    $.each(args, <span class="function"><span class="keyword">function</span>(<span class="params">_, arg</span>) </span>&#123;<span class="comment">//$.each处理数组</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"function"</span>) &#123;</span><br><span class="line">                            <span class="comment">//非unique，或者是unique，但回调列表未添加过</span></span><br><span class="line">                            <span class="keyword">if</span> (!options.unique || !Callbacks.has(arg)) list.push(arg);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg &amp;&amp; arg.length &amp;&amp; <span class="keyword">typeof</span> arg !== <span class="string">'string'</span>) &#123;</span><br><span class="line">                            <span class="comment">//是数组/伪数组，添加，重新遍历   </span></span><br><span class="line">                            add(arg);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            add(<span class="built_in">arguments</span>); <span class="comment">//添加进列表</span></span><br><span class="line">            <span class="keyword">if</span> (firing) &#123; <span class="comment">//如果列表正在执行中，修正长度，使得新添加的回调也可以执行</span></span><br><span class="line">                firingLength = list.length;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (memory) &#123;</span><br><span class="line">                firingStart = start; <span class="comment">//memory 模式下，修正开始下标</span></span><br><span class="line">                fire(memory); <span class="comment">//立即执行所有回调</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//从回调列表里删除一个或一组回调函数</span></span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list) &#123; <span class="comment">//回调列表存在才可以删除</span></span><br><span class="line">            $.each(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">_, arg</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> index;</span><br><span class="line">                <span class="keyword">while</span> ((index = $.inArray(arg, list, index)) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                    list.splice(index, <span class="number">1</span>); <span class="comment">//执行删除</span></span><br><span class="line">                    <span class="comment">// Handle firing indexes</span></span><br><span class="line">                    <span class="keyword">if</span> (firing) &#123;</span><br><span class="line">                        <span class="comment">//避免回调列表溢出</span></span><br><span class="line">                        <span class="keyword">if</span> (index &lt;= firingLength) --firingLength; <span class="comment">//在正执行的回调函数后，递减结尾下标</span></span><br><span class="line">                        <span class="keyword">if</span> (index &lt;= firingIndex) --firingIndex; <span class="comment">//在正执行的回调函数前，递减开始下标</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//检查指定的回调函数是否在回调列表中</span></span><br><span class="line"></span><br><span class="line">    has: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !!(list &amp;&amp; (fn ? $.inArray(fn, list) &gt; <span class="number">-1</span> : list.length));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//清空回调函数</span></span><br><span class="line">    empty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        firingLength = list.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//禁用回掉函数</span></span><br><span class="line">    disable: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        list = stack = memory = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//是否禁用了回调函数</span></span><br><span class="line">    disabled: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !list;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//锁定回调函数</span></span><br><span class="line">    lock: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        stack = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="comment">//非memory模式下，禁用列表</span></span><br><span class="line">        <span class="keyword">if</span> (!memory) Callbacks.disable();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//是否是锁定的</span></span><br><span class="line">    locked: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !stack;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//用上下文、参数执行列表中的所有回调函数</span></span><br><span class="line">    fireWith: <span class="function"><span class="keyword">function</span>(<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 未回调过，非锁定、禁用时</span></span><br><span class="line">        <span class="keyword">if</span> (list &amp;&amp; (!fired || stack)) &#123;</span><br><span class="line">            args = args || [];</span><br><span class="line">            args = [context, args.slice ? args.slice() : args];</span><br><span class="line">            <span class="keyword">if</span> (firing) &#123;</span><br><span class="line">                stack.push(args); <span class="comment">//正在回调中,存入stack</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fire(args); <span class="comment">//否则立即回调,外层fire函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    fire: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//执行回调</span></span><br><span class="line">        <span class="keyword">return</span> Callbacks.fireWith(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//回调列表是否被回调过</span></span><br><span class="line">    fired: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !!fired;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-过程分析"><a href="#4-过程分析" class="headerlink" title="4.过程分析"></a>4.过程分析</h1><p>对于第一部分的示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks = $.Callbacks();</span><br><span class="line">callbacks.add(foo);</span><br><span class="line">callbacks.fire([<span class="string">'hello'</span>, <span class="string">'wo'</span>, <span class="string">'123'</span>]);</span><br></pre></td></tr></table></figure></p><ul><li>add方法（CallBacks.add方法）<ul><li>add函数(<code>add(arguments)</code>)<br>$.each可以处理参数是数组的形式<ul><li>非数组  直接存放到list中<code>list.push(arg)</code>;</li><li>数组    递归  <code>add(arg)</code></li></ul></li><li>如果memory存在，为ture，离开执行 (<code>fire(memory)</code>)</li><li>返回this，可以链式调用</li></ul></li><li>fire方法(CallBacks.fire方法)<ul><li>Callbacks.fireWith(this, arguments)<ul><li>未回调过，非锁定、禁用时<ul><li>处理参数，包装成数组`args = [context, args.slice ? args.slice() : args]</li><li>如果正在执行回调（<code>firing = true</code>）  <code>stack.push(args);//正在回调中,存入stack</code></li><li>否则 调用外层fire函数，立即执行。</li></ul></li></ul></li></ul></li><li><p>外层fire函数</p><ul><li><p>参数处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">memory = options.memory &amp;&amp; data;</span><br><span class="line">fired = <span class="literal">true</span>;</span><br><span class="line">firingIndex = firingStart || <span class="number">0</span>;</span><br><span class="line">firingStart = <span class="number">0</span>;</span><br><span class="line">firingLength = list.length;</span><br><span class="line">firing = <span class="literal">true</span>; <span class="comment">//正在回调</span></span><br></pre></td></tr></table></figure></li><li><p>遍历回调函数执行 for循环</p><ul><li>如果 list[ firingIndex ] 为false，且stopOnFalse（中断）模式<br>立即中断<code>memory = false; break;</code></li><li>否则,立刻执行<br><code>list[firingIndex].apply(data[0], data[1])</code></li></ul></li><li>处理结束  firing = false; //回调执行完毕</li><li>option.once为false，即stack为true<br>stack.length &amp;&amp; fire(stack.shift()); //执行stack里的回调</li><li>option.memory存在  则清空list【此时已经执行完结束了】</li><li>其余情况，包括option.once为true，在遍历回调函数中已经执行过了，这里禁用回掉即可<br><code>Callbacks.disable();</code></li></ul></li></ul><blockquote><p>全部代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，本博文对应文件夹v0.5.x。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>参考阅读：</p><ul><li><a href="http://www.cnblogs.com/mominger/p/4369469.html" target="_blank" rel="noopener">Zepto源码分析-callbacks模块</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码4 -- ajax模块</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%814%20--%20ajax%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%814%20--%20ajax%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>上面的博文介绍的都是源码src下的基础模块<code>zepto.js</code>文件和事件模块<code>event.js</code>，下面接着看另外一个独立的模块–ajax模块<code>ajax.js</code></p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.4.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><h1 id="1-ajax的过程"><a href="#1-ajax的过程" class="headerlink" title="1.ajax的过程"></a>1.ajax的过程</h1><ul><li>当global: true时。在Ajax请求生命周期内，以下这些事件将被触发。</li><li>ajaxStart (global)：如果没有其他Ajax请求当前活跃将会被触发。</li><li>ajaxBeforeSend (data: xhr, options)：再发送请求前，可以被取消。</li><li>ajaxSend (data: xhr, options)：像 ajaxBeforeSend，但不能取消。</li><li>ajaxSuccess (data: xhr, options, data)：当返回成功时。</li><li>ajaxError (data: xhr, options, error)：当有错误时。</li><li>ajaxComplete (data: xhr, options)：请求已经完成后，无论请求是成功或者失败。</li><li>ajaxStop (global)：如果这是最后一个活跃着的Ajax请求，将会被触发。</li></ul><p>下面我们就首先来看这些过程的源码：</p><ul><li>实现逻辑函数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trigger a custom event and return false if it was cancelled</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triggerAndReturn</span>(<span class="params">context, eventName, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = $.Event(eventName); <span class="comment">//包装成事件</span></span><br><span class="line">    $(context).trigger(event, data); <span class="comment">//触发</span></span><br><span class="line">    <span class="keyword">return</span> !event.isDefaultPrevented();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// trigger an Ajax "global" event</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triggerGlobal</span>(<span class="params">settings, context, eventName, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global) <span class="keyword">return</span> triggerAndReturn(context || <span class="built_in">document</span>, eventName, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Number of active Ajax requests</span></span><br><span class="line"><span class="comment">// 发送中的ajax请求个数</span></span><br><span class="line">$.active = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果没有其他Ajax请求当前活跃将会被触发</span></span><br></pre></td></tr></table></figure><ul><li><code>ajaxStart</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果没有其他Ajax请求当前活跃将会被触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxStart</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (settings.global &amp;&amp; $.active++ === <span class="number">0</span>) triggerGlobal(settings, <span class="literal">null</span>, <span class="string">'ajaxStart'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ajaxBeforeSend</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable</span></span><br><span class="line"><span class="comment">// 触发选项中beforeSend回调函数和触发ajaxBeforeSend事件</span></span><br><span class="line"><span class="comment">// 上述的两步中的回调函数中返回false可以停止发送ajax请求，否则就触发ajaxSend事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxBeforeSend</span>(<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context;</span><br><span class="line">    <span class="keyword">if</span> (settings.beforeSend.call(context, xhr, settings) === <span class="literal">false</span> ||</span><br><span class="line">        triggerGlobal(settings, context, <span class="string">'ajaxBeforeSend'</span>, [xhr, settings]) === <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxSend'</span>, [xhr, settings]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ajaxSuccess</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxSuccess</span>(<span class="params">data, xhr, settings, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context,</span><br><span class="line">        status = <span class="string">'success'</span>;</span><br><span class="line">    settings.success.call(context, data, status, xhr);</span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.resolveWith(context, [data, status, xhr]);</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxSuccess'</span>, [xhr, settings, data]);</span><br><span class="line">    ajaxComplete(status, xhr, settings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ajaxError</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type: "timeout", "error", "abort", "parsererror"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxError</span>(<span class="params">error, type, xhr, settings, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context;</span><br><span class="line">    settings.error.call(context, xhr, type, error);</span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.rejectWith(context, [xhr, type, error]);</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxError'</span>, [xhr, settings, error || type]);</span><br><span class="line">    ajaxComplete(type, xhr, settings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ajaxComplete</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// status: "success", "notmodified", "error", "timeout", "abort", "parsererror"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxComplete</span>(<span class="params">status, xhr, settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = settings.context;</span><br><span class="line">    settings.complete.call(context, xhr, status);</span><br><span class="line">    triggerGlobal(settings, context, <span class="string">'ajaxComplete'</span>, [xhr, settings]);</span><br><span class="line">    ajaxStop(settings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ajaxStop</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有ajax请求都完成后才触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxStop</span>(<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (settings.global &amp;&amp; !(--$.active)) triggerGlobal(settings, <span class="literal">null</span>, <span class="string">'ajaxStop'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，我们只是自定义了ajaxXXX事件，并没有实际的意义，这时候我们就需要将这些事件的逻辑实现。这部分逻辑放在了<code>$.ajax</code>中，在适当的时候触发事件，这些很值得我们去思考的它的巧妙。</p><h1 id="2-ajax"><a href="#2-ajax" class="headerlink" title="2.$.ajax"></a>2.<code>$.ajax</code></h1><h2 id="2-1-全局变量-工具函数定义："><a href="#2-1-全局变量-工具函数定义：" class="headerlink" title="2.1 全局变量,工具函数定义："></a>2.1 全局变量,工具函数定义：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonpID = +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">    key,</span><br><span class="line">    name,</span><br><span class="line">    rscript = <span class="regexp">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span>, <span class="comment">//用来除掉html代码中的&lt;script&gt;标签</span></span><br><span class="line">    scriptTypeRE = <span class="regexp">/^(?:text|application)\/javascript/i</span>,</span><br><span class="line">    xmlTypeRE = <span class="regexp">/^(?:text|application)\/xml/i</span>, <span class="comment">//用来判断是不是js的mime</span></span><br><span class="line">    jsonType = <span class="string">'application/json'</span>,</span><br><span class="line">    htmlType = <span class="string">'text/html'</span>,</span><br><span class="line">    blankRE = <span class="regexp">/^\s*$/</span>,</span><br><span class="line">    originAnchor = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">originAnchor.href = <span class="built_in">window</span>.location.href;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Empty function, used as default callback</span></span><br><span class="line"><span class="comment">// 空函数，被用作默认的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mimeToDataType</span>(<span class="params">mime</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mime) mime = mime.split(<span class="string">';'</span>, <span class="number">2</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> mime &amp;&amp; (mime == htmlType ? <span class="string">'html'</span> :</span><br><span class="line">        mime == jsonType ? <span class="string">'json'</span> :</span><br><span class="line">        scriptTypeRE.test(mime) ? <span class="string">'script'</span> :</span><br><span class="line">        xmlTypeRE.test(mime) &amp;&amp; <span class="string">'xml'</span>) || <span class="string">'text'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把参数添加到url上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendQuery</span>(<span class="params">url, query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (query == <span class="string">''</span>) <span class="keyword">return</span> url;</span><br><span class="line">    <span class="keyword">return</span> (url + <span class="string">'&amp;'</span> + query).replace(<span class="regexp">/[&amp;?]&#123;1,2&#125;/</span>, <span class="string">'?'</span>);</span><br><span class="line">    <span class="comment">//将&amp;、&amp;&amp;、&amp;?、?、?、&amp;?&amp;? 转化为 ?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-ajaxSetting"><a href="#2-2-ajaxSetting" class="headerlink" title="2.2 $.ajaxSetting"></a>2.2 <code>$.ajaxSetting</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSettings = &#123;</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    beforeSend: empty,</span><br><span class="line">    success: empty,</span><br><span class="line">    error: empty,</span><br><span class="line">    complete: empty,</span><br><span class="line">    context: <span class="literal">null</span>,</span><br><span class="line">    global: <span class="literal">true</span>,</span><br><span class="line">    xhr: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest();</span><br><span class="line">    &#125;,</span><br><span class="line">    accepts: &#123;</span><br><span class="line">        script: <span class="string">'text/javascript, application/javascript, application/x-javascript'</span>,</span><br><span class="line">        json: jsonType,</span><br><span class="line">        xml: <span class="string">'application/xml, text/xml'</span>,</span><br><span class="line">        html: htmlType,</span><br><span class="line">        text: <span class="string">'text/plain'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    crossDomain: <span class="literal">false</span>,</span><br><span class="line">    timeout: <span class="number">0</span>,</span><br><span class="line">    processData: <span class="literal">true</span>,</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    dataFilter: empty</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-序列化"><a href="#2-3-序列化" class="headerlink" title="2.3 序列化"></a>2.3 序列化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列化data参数，并且如果是GET方法的话把参数添加到url参数上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serializeData</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//options.data是个对象</span></span><br><span class="line">    <span class="keyword">if</span> (options.processData &amp;&amp; options.data &amp;&amp; $.type(options.data) != <span class="string">"string"</span>)</span><br><span class="line">        <span class="built_in">console</span>.info(options.data);</span><br><span class="line">    options.data = $.param(options.data, options.traditional);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求方法为GET，data参数添加到url上</span></span><br><span class="line">    <span class="keyword">if</span> (options.data &amp;&amp; (!options.type || options.type.toUpperCase() == <span class="string">'GET'</span> || <span class="string">'jsonp'</span> == options.dataType))</span><br><span class="line">        options.url = appendQuery(options.url, options.data), options.data = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">escape</span> = <span class="built_in">encodeURIComponent</span>;</span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line"><span class="comment">//在Ajax post请求中将用作提交的表单元素的值编译成 URL编码的 字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">params, obj, traditional, scope</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type, array = $.isArray(obj),</span><br><span class="line">        hash = $.isPlainObject(obj);</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line"></span><br><span class="line">    $.each(obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        type = $.type(value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scope) &#123;</span><br><span class="line">            key = traditional ? scope :</span><br><span class="line">                scope + <span class="string">'['</span> + (hash || type == <span class="string">'object'</span> || type == <span class="string">'array'</span> ? key : <span class="string">''</span>) + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// handle data in serializeArray() format</span></span><br><span class="line">        <span class="keyword">if</span> (!scope &amp;&amp; array) &#123; <span class="comment">//obj是个数组</span></span><br><span class="line">            params.add(value.name, value.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// obj的value是个数组/对象</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"array"</span> || (!traditional &amp;&amp; type == <span class="string">"object"</span>)) &#123;</span><br><span class="line">            serialize(params, value, traditional, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            params.add(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">$.param = <span class="function"><span class="keyword">function</span>(<span class="params">obj, traditional</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = [];</span><br><span class="line">    <span class="comment">//serialize函数使用add</span></span><br><span class="line">    params.add = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($.isFunction(value)) value = value();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) value = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>.push(<span class="built_in">escape</span>(key) + <span class="string">'='</span> + <span class="built_in">escape</span>(value));</span><br><span class="line">    &#125;;</span><br><span class="line">    serialize(params, obj, traditional); <span class="comment">//处理obj</span></span><br><span class="line">    <span class="keyword">return</span> params.join(<span class="string">'&amp;'</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-4-XMLHttpRequest解释"><a href="#2-4-XMLHttpRequest解释" class="headerlink" title="2.4 XMLHttpRequest解释"></a>2.4 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest解释</a></h2><p>常用方法：</p><table><thead><tr><th>函数/属性</th><th>作用</th></tr></thead><tbody><tr><td>setRequestHeader()</td><td>给指定的HTTP请求头赋值.在这之前,你必须确认已经调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest#open" target="_blank" rel="noopener"><code>open()</code></a> 方法打开了一个url</td></tr><tr><td>overrideMimeType()</td><td>重写由服务器返回的MIME type</td></tr><tr><td>onreadystatechange</td><td>readyState属性改变时会调用它</td></tr><tr><td>open()</td><td>初始化一个请求</td></tr><tr><td>send()</td><td>发送请求. 如果该请求是异步模式(默认),该方法会立刻返回. 相反,如果请求是同步模式,则直到请求的响应完全接受以后,该方法才会返回</td></tr></tbody></table><p><strong>readyState的状态：</strong></p><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>0</code></td><td><code>UNSENT</code>(未打开)</td><td><code>open()</code>方法还未被调用.</td></tr><tr><td><code>1</code></td><td><code>OPENED</code>  (未发送)</td><td><code>send()</code>方法还未被调用.</td></tr><tr><td><code>2</code></td><td><code>HEADERS_RECEIVED (已获取响应头)</code></td><td><code>send()</code>方法已经被调用, 响应头和响应状态已经返回.</td></tr><tr><td><code>3</code></td><td><code>LOADING (正在下载响应体)</code></td><td>响应体下载中; <code>responseText</code>中已经获取了部分数据.</td></tr><tr><td><code>4</code></td><td><code>DONE (请求完成)</code></td><td>整个请求过程已经完毕.</td></tr></tbody></table><h2 id="2-5-ajax实现"><a href="#2-5-ajax实现" class="headerlink" title="2.5 $.ajax实现"></a>2.5 <code>$.ajax</code>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">$.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;, options || &#123;&#125;),</span><br><span class="line">        deferred = $.Deferred &amp;&amp; $.Deferred(),</span><br><span class="line">        urlAnchor, hashIndex;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> $.ajaxSettings)</span><br><span class="line">        <span class="keyword">if</span> (settings[key] === <span class="literal">undefined</span>) settings[key] = $.ajaxSettings[key];</span><br><span class="line"></span><br><span class="line">    ajaxStart(settings); <span class="comment">//---------------@开始</span></span><br><span class="line">    <span class="comment">// 如果没有传入crossDomain参数，就通过检测setting.url和网址的protocol、host是否一致判断该请求是否跨域</span></span><br><span class="line">    <span class="keyword">if</span> (!settings.crossDomain) &#123;</span><br><span class="line">        <span class="comment">// 通过设置a元素的href就可以很方便的获取一个url的各组成部分</span></span><br><span class="line">        urlAnchor = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">        urlAnchor.href = settings.url;</span><br><span class="line">        <span class="comment">// cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049</span></span><br><span class="line">        urlAnchor.href = urlAnchor.href;</span><br><span class="line">        settings.crossDomain = (originAnchor.protocol + <span class="string">'//'</span> + originAnchor.host) !== (urlAnchor.protocol + <span class="string">'//'</span> + urlAnchor.host);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有传入url参数，使用网站的网址为url参数</span></span><br><span class="line">    <span class="comment">// window.location.toString() 等于 window.location.href</span></span><br><span class="line">    <span class="keyword">if</span> (!settings.url) settings.url = <span class="built_in">window</span>.location.toString();</span><br><span class="line">    <span class="comment">//去掉url上的hash部分</span></span><br><span class="line">    <span class="keyword">if</span> ((hashIndex = settings.url.indexOf(<span class="string">'#'</span>)) &gt; <span class="number">-1</span>) settings.url = settings.url.slice(<span class="number">0</span>, hashIndex);</span><br><span class="line">    serializeData(settings); <span class="comment">// 序列化data参数，并且如果是GET方法的话把参数添加到url参数上</span></span><br><span class="line">    <span class="keyword">var</span> dataType = settings.dataType,</span><br><span class="line">        hasPlaceholder = <span class="regexp">/\?.+=\?/</span>.test(settings.url); <span class="comment">// 判断url参数是否包含=?</span></span><br><span class="line">    <span class="keyword">if</span> (hasPlaceholder) dataType = <span class="string">'jsonp'</span>; <span class="comment">//jsonp url 举例http://www.xxx.com/xx.php?callback=?</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置了cache参数为false，或者cache参数不为true而且请求数据的类型是script或jsonp，就在url上添加时间戳防止浏览器缓存</span></span><br><span class="line">    <span class="comment">// (cache设置为true也不一定会缓存，具体要看缓存相关的http响应首部)</span></span><br><span class="line">    <span class="keyword">if</span> (settings.cache === <span class="literal">false</span> || (</span><br><span class="line">            (!options || options.cache !== <span class="literal">true</span>) &amp;&amp;</span><br><span class="line">            (<span class="string">'script'</span> == dataType || <span class="string">'jsonp'</span> == dataType)</span><br><span class="line">        ))</span><br><span class="line">        settings.url = appendQuery(settings.url, <span class="string">'_='</span> + <span class="built_in">Date</span>.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsonp调用$.ajaxJSONP实现</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'jsonp'</span> == dataType) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasPlaceholder)</span><br><span class="line">            settings.url = appendQuery(settings.url,</span><br><span class="line">                settings.jsonp ? (settings.jsonp + <span class="string">'=?'</span>) : settings.jsonp === <span class="literal">false</span> ? <span class="string">''</span> : <span class="string">'callback=?'</span>);</span><br><span class="line">        <span class="keyword">return</span> $.ajaxJSONP(settings, deferred);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面代码用来设置请求的头部、相应的mime类型等</span></span><br><span class="line">    <span class="keyword">var</span> mime = settings.accepts[dataType],</span><br><span class="line">        headers = &#123;&#125;,</span><br><span class="line">        setHeader = <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123; headers[name.toLowerCase()] = [name, value]; &#125;,</span><br><span class="line">        protocol = <span class="regexp">/^([\w-]+:)\/\//</span>.test(settings.url) ? <span class="built_in">RegExp</span>.$<span class="number">1</span> : <span class="built_in">window</span>.location.protocol,</span><br><span class="line">        xhr = settings.xhr(), <span class="comment">//XMLHttpRequest</span></span><br><span class="line">        nativeSetHeader = xhr.setRequestHeader,</span><br><span class="line">        abortTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.promise(xhr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不跨域</span></span><br><span class="line">    <span class="keyword">if</span> (!settings.crossDomain) setHeader(<span class="string">'X-Requested-With'</span>, <span class="string">'XMLHttpRequest'</span>);</span><br><span class="line">    setHeader(<span class="string">'Accept'</span>, mime || <span class="string">'*/*'</span>);</span><br><span class="line">    <span class="keyword">if</span> (mime = settings.mimeType || mime) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mime.indexOf(<span class="string">','</span>) &gt; <span class="number">-1</span>) mime = mime.split(<span class="string">','</span>, <span class="number">2</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//重写由服务器返回的MIME type  注意，这个方法必须在send()之前被调用</span></span><br><span class="line">        xhr.overrideMimeType &amp;&amp; xhr.overrideMimeType(mime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置contentType</span></span><br><span class="line">    <span class="keyword">if</span> (settings.contentType || (settings.contentType !== <span class="literal">false</span> &amp;&amp; settings.data &amp;&amp; settings.type.toUpperCase() != <span class="string">'GET'</span>))</span><br><span class="line">        setHeader(<span class="string">'Content-Type'</span>, settings.contentType || <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    <span class="comment">//如果配置中有对headers内容</span></span><br><span class="line">    <span class="keyword">if</span> (settings.headers)</span><br><span class="line">        <span class="keyword">for</span> (name <span class="keyword">in</span> settings.headers) setHeader(name, settings.headers[name]);</span><br><span class="line">    xhr.setRequestHeader = setHeader; <span class="comment">//设置头信息</span></span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123; <span class="comment">//请求完成</span></span><br><span class="line">            xhr.onreadystatechange = empty;</span><br><span class="line">            clearTimeout(abortTimeout);</span><br><span class="line">            <span class="keyword">var</span> result, error = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//请求成功</span></span><br><span class="line">            <span class="comment">//在本地调动ajax，也就是请求url以file开头，也代表请求成功</span></span><br><span class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span> || (xhr.status == <span class="number">0</span> &amp;&amp; protocol == <span class="string">'file:'</span>)) &#123;</span><br><span class="line">                dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader(<span class="string">'content-type'</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据xhr.responseType和dataType处理返回的数据</span></span><br><span class="line">                <span class="keyword">if</span> (xhr.responseType == <span class="string">'arraybuffer'</span> || xhr.responseType == <span class="string">'blob'</span>) &#123;</span><br><span class="line">                    result = xhr.response;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = xhr.responseText;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// http://perfectionkills.com/global-eval-what-are-the-options/</span></span><br><span class="line">                        <span class="comment">// (1,eval)(result) 这样写还可以让result里面的代码在全局作用域里面运行</span></span><br><span class="line">                        result = ajaxDataFilter(result, dataType, settings);</span><br><span class="line">                        <span class="keyword">if</span> (dataType == <span class="string">'script'</span>) &#123;</span><br><span class="line">                            (<span class="number">1</span>, <span class="built_in">eval</span>)(result);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">'xml'</span>) &#123;</span><br><span class="line">                            result = xhr.responseXML;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataType == <span class="string">'json'</span>) &#123;</span><br><span class="line">                            result = blankRE.test(result) ? <span class="literal">null</span> : $.parseJSON(result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123; error = e; &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (error) <span class="keyword">return</span> ajaxError(error, <span class="string">'parsererror'</span>, xhr, settings, deferred);<span class="comment">//---------------@</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ajaxSuccess(result, xhr, settings, deferred);<span class="comment">//---------------@</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ajaxError(xhr.statusText || <span class="literal">null</span>, xhr.status ? <span class="string">'error'</span> : <span class="string">'abort'</span>, xhr, settings, deferred);<span class="comment">//---------------@</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//必须send()之前//---------------@</span></span><br><span class="line">    <span class="keyword">if</span> (ajaxBeforeSend(xhr, settings) === <span class="literal">false</span>) &#123;</span><br><span class="line">        xhr.abort();</span><br><span class="line">        ajaxError(<span class="literal">null</span>, <span class="string">'abort'</span>, xhr, settings, deferred);</span><br><span class="line">        <span class="keyword">return</span> xhr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = <span class="string">'async'</span> <span class="keyword">in</span> settings ? settings.async : <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * void open(</span></span><br><span class="line"><span class="comment">           DOMString method,</span></span><br><span class="line"><span class="comment">           DOMString url,</span></span><br><span class="line"><span class="comment">           optional boolean async,</span></span><br><span class="line"><span class="comment">           optional DOMString user,</span></span><br><span class="line"><span class="comment">           optional DOMString password</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    xhr.open(settings.type, settings.url, <span class="keyword">async</span>, settings.username, settings.password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (settings.xhrFields)</span><br><span class="line">        <span class="keyword">for</span> (name <span class="keyword">in</span> settings.xhrFields) xhr[name] = settings.xhrFields[name];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> headers) nativeSetHeader.apply(xhr, headers[name]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时丢弃请求</span></span><br><span class="line">    <span class="keyword">if</span> (settings.timeout &gt; <span class="number">0</span>) abortTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        xhr.onreadystatechange = empty;</span><br><span class="line">        xhr.abort();</span><br><span class="line">        ajaxError(<span class="literal">null</span>, <span class="string">'timeout'</span>, xhr, settings, deferred);</span><br><span class="line">    &#125;, settings.timeout);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// avoid sending empty string (#319)</span></span><br><span class="line">    xhr.send(settings.data ? settings.data : <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-6-示例Demo"><a href="#2-6-示例Demo" class="headerlink" title="2.6 示例Demo"></a>2.6 示例Demo</h2><p>ajax读取本地的json，安装个小服务器,或者使用其他服务器，如apache，tomcat等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install anywhere -g      //安装</span><br><span class="line">anywhere 8860                //开启端口（任意没被占用的）为服务器使用</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    url: <span class="string">'/projects.json'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'Hello'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    timeout: <span class="number">300</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, type</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'Ajax error!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="3-jsonp"><a href="#3-jsonp" class="headerlink" title="3.jsonp"></a>3.jsonp</h1><p>使用jsonp跨域的核心思想是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.src = options.url.replace(<span class="regexp">/\?(.+)=\?/</span>, <span class="string">'?$1='</span> + callbackName);</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script)</span><br></pre></td></tr></table></figure><p>具体实现的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxJSONP = <span class="function"><span class="keyword">function</span>(<span class="params">options, deferred</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 没有type选项，调用$.ajax实现</span></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">'type'</span> <span class="keyword">in</span> options)) <span class="keyword">return</span> $.ajax(options);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _callbackName = options.jsonpCallback,</span><br><span class="line">        <span class="comment">//options配置写了jsonpCallback，那么回调函数的名字就是options.jsonpCallback</span></span><br><span class="line">        <span class="comment">//没有就是'Zepto' + (jsonpID++)</span></span><br><span class="line">        callbackName = ($.isFunction(_callbackName) ?</span><br><span class="line">            _callbackName() : _callbackName) || (<span class="string">'Zepto'</span> + (jsonpID++)),</span><br><span class="line">        script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>),</span><br><span class="line">        originalCallback = <span class="built_in">window</span>[callbackName],</span><br><span class="line">        responseData,</span><br><span class="line">        abort = <span class="function"><span class="keyword">function</span>(<span class="params">errorType</span>) </span>&#123;</span><br><span class="line">            $(script).triggerHandler(<span class="string">'error'</span>, errorType || <span class="string">'abort'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        xhr = &#123; <span class="attr">abort</span>: abort &#125;,</span><br><span class="line">        abortTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deferred) deferred.promise(xhr);</span><br><span class="line">    <span class="comment">// 加载成功或者失败触发相应的回调函数</span></span><br><span class="line">    <span class="comment">// load error 在event.js</span></span><br><span class="line">    $(script).on(<span class="string">'load error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, errorType</span>) </span>&#123;</span><br><span class="line">        clearTimeout(abortTimeout);</span><br><span class="line">        <span class="comment">// 加载成功或者失败都会移除掉添加到页面的script标签和绑定的事件</span></span><br><span class="line">        $(script).off().remove();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e.type == <span class="string">'error'</span> || !responseData) &#123; <span class="comment">//失败</span></span><br><span class="line">            ajaxError(<span class="literal">null</span>, errorType || <span class="string">'error'</span>, xhr, options, deferred);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//成功</span></span><br><span class="line">            ajaxSuccess(responseData[<span class="number">0</span>], xhr, options, deferred);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>[callbackName] = originalCallback;</span><br><span class="line">        <span class="keyword">if</span> (responseData &amp;&amp; $.isFunction(originalCallback))</span><br><span class="line">            originalCallback(responseData[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        originalCallback = responseData = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 在beforeSend回调函数或者ajaxBeforeSend事件中返回了false，取消ajax请求</span></span><br><span class="line">    <span class="keyword">if</span> (ajaxBeforeSend(xhr, options) === <span class="literal">false</span>) &#123;</span><br><span class="line">        abort(<span class="string">'abort'</span>);</span><br><span class="line">        <span class="keyword">return</span> xhr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        responseData = <span class="built_in">arguments</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 参数中添加上变量名</span></span><br><span class="line">    script.src = options.url.replace(<span class="regexp">/\?(.+)=\?/</span>, <span class="string">'?$1='</span> + callbackName);</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">    <span class="comment">//超时处理</span></span><br><span class="line">    <span class="keyword">if</span> (options.timeout &gt; <span class="number">0</span>) abortTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        abort(<span class="string">'timeout'</span>);</span><br><span class="line">    &#125;, options.timeout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-get、post、getJSON、load-方法"><a href="#4-get、post、getJSON、load-方法" class="headerlink" title="4.get、post、getJSON、load 方法"></a>4.get、post、getJSON、load 方法</h1><p>篇幅所限，这里就不再单列出来了，他们都是处理好参数，调用<code>$.ajax</code>方法。详细的实现方式去我的github 下载。</p><blockquote><p>全部代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，本博文对应文件夹v0.4.x。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>参考阅读：</p><ul><li><a href="https://github.com/oadaM92/zepto/tree/master/oadaM92/ajax" target="_blank" rel="noopener">Zepto ajax 模块 源码分析</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest解释–MDN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码3 -- 事件模块</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%813%20--%20%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%813%20--%20%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>上面的博文介绍的都是源码src下的zepto.js文件，接着我们来看看zepto的事件模块，对应文件是event.js</p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.3.2（只实现on），v0.3.3(完整实现)。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><h1 id="1-绑定事件"><a href="#1-绑定事件" class="headerlink" title="1.绑定事件"></a>1.绑定事件</h1><p>实例Demo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"foo1"</span>&gt;foo1&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="foo2"&gt;foo2&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"foo3"</span>&gt;foo3</span><br><span class="line">    &lt;div id=<span class="string">"foo31"</span>&gt;foo31&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;a href=<span class="string">"demo1.html"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"my-a"</span>&gt;demo1.html&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="zepto.js"&gt;&lt;/</span>script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> div1 = $(<span class="string">'#foo1'</span>);</span><br><span class="line"><span class="keyword">var</span> div2 = $(<span class="string">'#foo2'</span>);</span><br><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>, <span class="string">'#foo1'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    alert(<span class="string">"点击"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>, <span class="string">'#foo2'</span>, <span class="string">'test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    alert(<span class="string">"点击foo2"</span>+event.data);<span class="comment">//点击foo2test</span></span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#foo3'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"点击"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'body'</span>).on(<span class="string">'click'</span>, <span class="string">'.my-a'</span>, <span class="literal">false</span>);<span class="comment">//不跳转</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="1-1-handlers对象"><a href="#1-1-handlers对象" class="headerlink" title="1.1 handlers对象"></a>1.1 <code>handlers</code>对象</h2><p><code>handlers</code>对象的数据格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  1: [ // handlers的值为DOM元素的_zid</span><br><span class="line">    &#123;</span><br><span class="line">      del: function() &#123;&#125;, // 实现事件代理的函数</span><br><span class="line">      e: &quot;click&quot;, // 事件名称</span><br><span class="line">      fn: function() &#123;&#125;, // 用户传入的回调函数</span><br><span class="line">      i: 0, // 该对象在数组里的下标</span><br><span class="line">      ns: &quot;&quot;, // 事件的命名空间，只用使用$.fn.triggerHandler时可用，$.fn.trigger不能使用。</span><br><span class="line">      proxy: function(e) &#123;&#125;, // 真正绑定事件时的回调函数，里面判断调用del或者fn</span><br><span class="line">      sel: undefined // 要进行事件代理时传入的selector</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-全局变量"><a href="#1-2-全局变量" class="headerlink" title="1.2 全局变量"></a>1.2 全局变量</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _zid = <span class="number">1</span>, <span class="comment">//用来生成标示元素和回调函数的id，每标示一个就+1</span></span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    handlers = &#123;&#125;,</span><br><span class="line">    slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">    isFunction = $.isFunction,</span><br><span class="line">    isString = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'string'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    specialEvents = &#123;&#125;,</span><br><span class="line">    focusinSupported = <span class="string">'onfocusin'</span> <span class="keyword">in</span> <span class="built_in">window</span>,</span><br><span class="line">    focus = &#123; <span class="attr">focus</span>: <span class="string">'focusin'</span>, <span class="attr">blur</span>: <span class="string">'focusout'</span> &#125;,</span><br><span class="line">    hover = &#123; <span class="attr">mouseenter</span>: <span class="string">'mouseover'</span>, <span class="attr">mouseleave</span>: <span class="string">'mouseout'</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-添加三个方法：isDefaultPrevented、isDefaultPrevented和isPropagationStopped"><a href="#1-3-添加三个方法：isDefaultPrevented、isDefaultPrevented和isPropagationStopped" class="headerlink" title="1.3 添加三个方法：isDefaultPrevented、isDefaultPrevented和isPropagationStopped"></a>1.3 添加三个方法：isDefaultPrevented、isDefaultPrevented和isPropagationStopped</h2><ul><li>如果<code>preventDefault()</code>被该事件的实例调用，那么返回true。 这可作为跨平台的替代原生的<code>defaultPrevented</code>属性，如果<code>defaultPrevented</code>缺失或在某些浏览器下不可靠的时候</li><li>如果<code>stopImmediatePropagation()</code>被该事件的实例调用，那么返回true。Zepto在不支持该原生方法的浏览器中实现它（例如老版本的Android）</li><li>如果<code>stopPropagation()</code>被该事件的实例调用，那么返回true</li></ul><p>通过改写原生的preventDefault、stopImmediatePropagation和stopPropagation方法实现新增三个方法<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/DIY-zepto/1.png" alt=""><br>新增的三个方法：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/DIY-zepto/2.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> returnTrue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    returnFalse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;, <span class="comment">// 构建事件对象时所不要的几个属性：returnValue、layerX和layerY(还有以大写字母开头的属性？)</span></span><br><span class="line">    ignoreProperties = <span class="regexp">/^([A-Z]|returnValue$|layer[XY]$)/</span>,</span><br><span class="line">    <span class="comment">// 事件对象需要添加的三个方法名</span></span><br><span class="line">    eventMethods = &#123;</span><br><span class="line">        preventDefault: <span class="string">'isDefaultPrevented'</span>,</span><br><span class="line">        stopImmediatePropagation: <span class="string">'isImmediatePropagationStopped'</span>,</span><br><span class="line">        stopPropagation: <span class="string">'isPropagationStopped'</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">// 添加eventMethods里面的三个方法：isDefaultPrevented、isDefaultPrevented和isPropagationStopped</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compatible</span>(<span class="params">event, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (source || !event.isDefaultPrevented) &#123;</span><br><span class="line">        source || (source = event);</span><br><span class="line">        <span class="comment">//遍历eventMethods对象，name是key，predicate是value</span></span><br><span class="line">        $.each(eventMethods, <span class="function"><span class="keyword">function</span>(<span class="params">name, predicate</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sourceMethod = source[name];</span><br><span class="line">            event[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>[predicate] = returnTrue;</span><br><span class="line">                <span class="keyword">return</span> sourceMethod &amp;&amp; sourceMethod.apply(source, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            event[predicate] = returnFalse;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            event.timeStamp || (event.timeStamp = <span class="built_in">Date</span>.now())</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ignored) &#123;&#125;</span><br><span class="line">        <span class="comment">// 设置isDefaultPrevented默认指向的函数</span></span><br><span class="line">        <span class="comment">// 如果有defaultPrevented属性，就根据defaultPrevented的值来判断</span></span><br><span class="line">        <span class="keyword">if</span> (source.defaultPrevented !== <span class="literal">undefined</span> ? source.defaultPrevented :</span><br><span class="line">            <span class="string">'returnValue'</span> <span class="keyword">in</span> source ? source.returnValue === <span class="literal">false</span> :</span><br><span class="line">            <span class="comment">//getPreventDefault和defaultPrevented属性类似，不过是非标准的。为了兼容没有defaultPrevented参数的浏览器</span></span><br><span class="line">            source.getPreventDefault &amp;&amp; source.getPreventDefault())</span><br><span class="line">            event.isDefaultPrevented = returnTrue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-fn-on实现"><a href="#1-4-fn-on实现" class="headerlink" title="1.4 $.fn.on实现"></a>1.4 <code>$.fn.on</code>实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**调用形式：</span></span><br><span class="line"><span class="comment"> *on(type, [selector], function(e)&#123; ... &#125;)</span></span><br><span class="line"><span class="comment"> *on(type, [selector], [data], function(e)&#123; ... &#125;)</span></span><br><span class="line"><span class="comment"> *on(&#123; type: handler, type2: handler2, ... &#125;, [selector]) </span></span><br><span class="line"><span class="comment"> *on(&#123; type: handler, type2: handler2, ... &#125;, [selector], [data])</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$.fn.on = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, data, callback, one</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> autoRemove, delegator, $<span class="keyword">this</span> = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//event 为对象，批量绑定事件</span></span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; !isString(event)) &#123;</span><br><span class="line">        $.each(event, <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">            $<span class="keyword">this</span>.on(type, selector, data, fn, one);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理参数</span></span><br><span class="line">    <span class="comment">//没传selector参数 callback不是函数，且不为false</span></span><br><span class="line">    <span class="keyword">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class="literal">false</span>)</span><br><span class="line">        callback = data, data = selector, selector = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">//没传data</span></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">undefined</span> || data === <span class="literal">false</span>)</span><br><span class="line">        callback = data, data = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">false</span>) callback = returnFalse;</span><br><span class="line">    <span class="comment">// 给每一个Z对象里面的元素绑定事件</span></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">_, element</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 绑定一次，自动解绑</span></span><br><span class="line">        <span class="keyword">if</span> (one) autoRemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                remove(element, e.type, callback);</span><br><span class="line">                <span class="keyword">return</span> callback.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//有selector选择符，使用代理</span></span><br><span class="line">        <span class="keyword">if</span> (selector) delegator = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> evt, match = $(e.target).closest(selector, element).get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (match &amp;&amp; match !== element) &#123;</span><br><span class="line">                    evt = $.extend(createProxy(e), &#123; <span class="attr">currentTarget</span>: match, <span class="attr">liveFired</span>: element &#125;);</span><br><span class="line">                    <span class="keyword">return</span> (autoRemove || callback).apply(match, [evt].concat(slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//绑定事件在这里</span></span><br><span class="line">        add(element, event, callback, data, selector, delegator || autoRemove);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-核心函数add-remove"><a href="#1-5-核心函数add-remove" class="headerlink" title="1.5 核心函数add remove"></a>1.5 核心函数add remove</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加事件的实际方法</span></span><br><span class="line"><span class="comment"> * @param &#123;元素&#125;   element   DOM元素</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125;   events    事件字符串</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fn        回调函数</span></span><br><span class="line"><span class="comment"> * @param &#123;All&#125;      data      绑定事件时传入的data，可以是各种类型   </span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125;   selector  被代理元素的css选择器</span></span><br><span class="line"><span class="comment"> * @param &#123;[type]&#125;   delegator 进行事件代理的函数</span></span><br><span class="line"><span class="comment"> * @param &#123;[type]&#125;   capture   指定捕获或者冒泡阶段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">element, events, fn, data, selector, delegator, capture</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = zid(element),</span><br><span class="line">        set = (handlers[id] || (handlers[id] = []));</span><br><span class="line">    <span class="comment">//多个事件以空格为间隔</span></span><br><span class="line">    events.split(<span class="regexp">/\s/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//为ready</span></span><br><span class="line">        <span class="keyword">if</span> (event == <span class="string">'ready'</span>) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(fn);</span><br><span class="line">        <span class="comment">//*************************构建handler*************************</span></span><br><span class="line">        <span class="keyword">var</span> handler = parse(event);</span><br><span class="line">        handler.fn = fn;</span><br><span class="line">        handler.sel = selector;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// emulate mouseenter, mouseleave</span></span><br><span class="line">        <span class="comment">// mouseenter、mouseleave通过mouseover、mouseout来模拟realEvent函数处理</span></span><br><span class="line">        <span class="comment">// hover = &#123; mouseenter: 'mouseover', mouseleave: 'mouseout' &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (handler.e <span class="keyword">in</span> hover) fn = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//http://www.w3school.com.cn/jsref/event_relatedtarget.asp</span></span><br><span class="line">            <span class="comment">// relatedTarget为相关元素，只有mouseover和mouseout事件才有</span></span><br><span class="line">            <span class="comment">// 对mouseover事件而言，相关元素就是那个失去光标的元素;</span></span><br><span class="line">            <span class="comment">// 对mouseout事件而言，相关元素则是获得光标的元素。</span></span><br><span class="line">            <span class="keyword">var</span> related = e.relatedTarget;</span><br><span class="line">            <span class="keyword">if</span> (!related || (related !== <span class="keyword">this</span> &amp;&amp; !$.contains(<span class="keyword">this</span>, related)))</span><br><span class="line">                <span class="keyword">return</span> handler.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        handler.del = delegator;</span><br><span class="line">        <span class="comment">// 需要进行事件代理时，调用的是封装了fn的delegator函数</span></span><br><span class="line">        <span class="keyword">var</span> callback = delegator || fn;</span><br><span class="line">        handler.proxy = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e = compatible(e); <span class="comment">//无第二个参数，其实就是e = e;</span></span><br><span class="line">            <span class="keyword">if</span> (e.isImmediatePropagationStopped()) <span class="keyword">return</span>;</span><br><span class="line">            e.data = data;</span><br><span class="line">            <span class="keyword">var</span> result = callback.apply(element, e._args == <span class="literal">undefined</span> ? [e] : [e].concat(e._args))</span><br><span class="line">                <span class="comment">//当事件处理函数返回false时，阻止默认操作和冒泡</span></span><br><span class="line">            <span class="keyword">if</span> (result === <span class="literal">false</span>) e.preventDefault(), e.stopPropagation();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        handler.i = set.length; <span class="comment">// 把handler在set中的下标赋值给handler.i</span></span><br><span class="line">        set.push(handler);</span><br><span class="line">        <span class="comment">//*************************构建handler end*************************</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'addEventListener'</span> <span class="keyword">in</span> element)</span><br><span class="line">        <span class="comment">//addEventListener -- https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener</span></span><br><span class="line">        <span class="comment">//使用`addEventListener`所传入的真正回调函数就是proxy函数</span></span><br><span class="line">            element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除handler</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">element, events, fn, selector, capture</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = zid(element);</span><br><span class="line">    (events || <span class="string">''</span>).split(<span class="regexp">/\s/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        findHandlers(element, event, fn, selector).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> handlers[id][handler.i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'removeEventListener'</span> <span class="keyword">in</span> element)</span><br><span class="line">                element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.event = &#123; <span class="attr">add</span>: add, <span class="attr">remove</span>: remove &#125;;</span><br></pre></td></tr></table></figure><h2 id="1-6-工具函数"><a href="#1-6-工具函数" class="headerlink" title="1.6 工具函数"></a>1.6 工具函数</h2><h3 id="1-6-1-zid函数"><a href="#1-6-1-zid函数" class="headerlink" title="1.6.1 zid函数"></a>1.6.1 <code>zid</code>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过一个_zid而不是通过DOM对象的引用来连接handler是因为：防止移除掉DOM元素后，</span></span><br><span class="line"><span class="comment">//handlers对象还保存着对这个DOM元素的引用。通过使用_zid就可以防止这种情况发生，</span></span><br><span class="line"><span class="comment">//避免了内存泄漏</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zid</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element._zid || (element._zid = _zid++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2-focus和blur事件的冒泡问题"><a href="#1-6-2-focus和blur事件的冒泡问题" class="headerlink" title="1.6.2 focus和blur事件的冒泡问题"></a>1.6.2 focus和blur事件的冒泡问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//focus和blur事件本身是不冒泡的，如果需要对这两个事件进行事件代理，就要运用一些小技巧。</span></span><br><span class="line"><span class="comment">//首先，如果浏览器支持focusin和focusout，就使用这两个可以冒泡事件来代替。</span></span><br><span class="line"><span class="comment">//如果浏览器不支持focusion和focusout，就利用focus和blur捕获不冒泡的特性，</span></span><br><span class="line"><span class="comment">//传入addEventListener中的第三个参数设置true，以此来进行事件代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventCapture</span>(<span class="params">handler, captureSetting</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> handler.del &amp;&amp;</span><br><span class="line">        (!focusinSupported &amp;&amp; (handler.e <span class="keyword">in</span> focus)) ||</span><br><span class="line">        !!captureSetting;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-3-实际传入到addEventListener第二个参数"><a href="#1-6-3-实际传入到addEventListener第二个参数" class="headerlink" title="1.6.3 实际传入到addEventListener第二个参数"></a>1.6.3 实际传入到addEventListener第二个参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建事件代理中的事件对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createProxy</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key, proxy = &#123; <span class="attr">originalEvent</span>: event &#125;; <span class="comment">// 新的事件对象有个originalEvent属性指向原对象</span></span><br><span class="line">    <span class="comment">// 将原生事件对象的属性复制给新对象，除了returnValue、layerX、layerY和值为undefined的属性</span></span><br><span class="line">    <span class="comment">// returnValue属性为beforeunload事件独有</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> event)</span><br><span class="line">        <span class="keyword">if</span> (!ignoreProperties.test(key) &amp;&amp; event[key] !== <span class="literal">undefined</span>) proxy[key] = event[key];</span><br><span class="line">        <span class="comment">// 添加eventMethods里面的几个方法，并返回新的事件对象</span></span><br><span class="line">    <span class="keyword">return</span> compatible(proxy, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-4-其余工具函数"><a href="#1-6-4-其余工具函数" class="headerlink" title="1.6.4 其余工具函数"></a>1.6.4 其余工具函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据给定的参数在handlers变量中寻找对应的handler</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findHandlers</span>(<span class="params">element, event, fn, selector</span>) </span>&#123;</span><br><span class="line">    event = parse(event); <span class="comment">// 解析event参数，分离出事件名和ns</span></span><br><span class="line">    <span class="keyword">if</span> (event.ns) <span class="keyword">var</span> matcher = matcherFor(event.ns);</span><br><span class="line">    <span class="comment">// 取出所有属于element的handler，并且根据event、fn和selector参数进行筛选</span></span><br><span class="line">    <span class="keyword">return</span> (handlers[zid(element)] || []).filter(<span class="function"><span class="keyword">function</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler &amp;&amp; (!event.e || handler.e == event.e) <span class="comment">// 事件名不同的过滤掉</span></span><br><span class="line">            &amp;&amp; (!event.ns || matcher.test(handler.ns)) <span class="comment">// 命名空间不同的过滤掉</span></span><br><span class="line">            &amp;&amp; (!fn || zid(handler.fn) === zid(fn)) <span class="comment">// 回调函数不同的过滤掉(通过_zid属性判断是否同一个函数)</span></span><br><span class="line">            &amp;&amp; (!selector || handler.sel == selector); <span class="comment">// selector不同的过滤掉</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解析event参数，如 "click.abc"，abc作为ns(命名空间)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parts = (<span class="string">''</span> + event).split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">e</span>: parts[<span class="number">0</span>], <span class="attr">ns</span>: parts.slice(<span class="number">1</span>).sort().join(<span class="string">' '</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成匹配的namespace表达式：'abc def' -&gt; /(?:^| )abc .* ?def(?: |$)/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matcherFor</span>(<span class="params">ns</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(?:^| )'</span> + ns.replace(<span class="string">' '</span>, <span class="string">' .* ?'</span>) + <span class="string">'(?: |$)'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">realEvent</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hover[type] || (focusinSupported &amp;&amp; focus[type]) || type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-取消事件绑定"><a href="#2-取消事件绑定" class="headerlink" title="2.取消事件绑定"></a>2.取消事件绑定</h1><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>).off(<span class="string">'click'</span>, <span class="string">'#foo1'</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.fn.off = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; !isString(event)) &#123;</span><br><span class="line">        $.each(event, <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">            $<span class="keyword">this</span>.off(type, selector, fn);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class="literal">false</span>)</span><br><span class="line">        callback = selector, selector = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback === <span class="literal">false</span>) callback = returnFalse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        remove(<span class="keyword">this</span>, event, callback, selector);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-触发事件"><a href="#3-触发事件" class="headerlink" title="3.触发事件"></a>3.触发事件</h1><p><code>$.Event</code>:创建并初始化一个指定的DOM事件。如果给定properties对象，使用它来扩展出新的事件对象。默认情况下，事件被设置为冒泡方式；这个可以通过设置<code>bubbles</code>为<code>false</code>来关闭。<br>通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent" target="_blank" rel="noopener">document.createEvent</a>创建事件对象，然后通过dispatchEvent（源码中在<code>$.fn.trigger</code>和<code>$.fn.triggerHandler</code>中处理）来出发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the event.</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define that the event name is 'build'.</span></span><br><span class="line">event.initEvent(<span class="string">'build'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen for the event.</span></span><br><span class="line">elem.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// e.target matches elem</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// target can be any Element or other EventTarget.</span></span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure><p>上面有点要注意的就是当创建鼠标相关的事件时要在<code>document.createEvent</code>的第一个参数中传入<code>MouseEvents</code>，以提供更多的事件属性。鼠标相关的事件指的是：click、mousedown、mouseup和mousemove<br>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'mylib:change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, from, to</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'change on %o with data %s, %s'</span>, e.target, <span class="keyword">from</span>, to)</span><br><span class="line">    &#125;)</span><br><span class="line">$(<span class="built_in">document</span>.body).trigger(<span class="string">'mylib:change'</span>, [<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br></pre></td></tr></table></figure></p><p>源码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$.fn.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">event, args</span>) </span>&#123;</span><br><span class="line">    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event);</span><br><span class="line">    event._args = args;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// handle focus(), blur() by calling them directly</span></span><br><span class="line">        <span class="comment">// 过直接调用focus()和blur()方法来触发对应事件，这算是对触发事件方法的一个优化</span></span><br><span class="line">        <span class="keyword">if</span> (event.type <span class="keyword">in</span> focus &amp;&amp; <span class="keyword">typeof</span> <span class="keyword">this</span>[event.type] == <span class="string">"function"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>[event.type]();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// items in the collection might not be DOM elements</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'dispatchEvent'</span> <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dispatchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="keyword">this</span>).triggerHandler(event, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// triggers event handlers on current element just as if an event occurred,</span></span><br><span class="line"><span class="comment">// doesn't trigger an actual event, doesn't bubble</span></span><br><span class="line"><span class="comment">// 直接触发事件的回调函数，而不是直接触发一个事件，所以也不冒泡</span></span><br><span class="line">$.fn.triggerHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e, result;</span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">i, element</span>) </span>&#123;</span><br><span class="line">        e = createProxy(isString(event) ? $.Event(event) : event);</span><br><span class="line">        e._args = args;</span><br><span class="line">        e.target = element;</span><br><span class="line">        $.each(findHandlers(element, event.type || event), <span class="function"><span class="keyword">function</span>(<span class="params">i, handler</span>) </span>&#123;</span><br><span class="line">            result = handler.proxy(e);</span><br><span class="line">            <span class="keyword">if</span> (e.isImmediatePropagationStopped()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//生成一个模拟事件，如果是鼠标相关事件，document.createEvent传入的第一个参数为'MouseEvents'</span></span><br><span class="line">$.Event = <span class="function"><span class="keyword">function</span>(<span class="params">type, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isString(type)) props = type, type = props.type;</span><br><span class="line">    <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(specialEvents[type] || <span class="string">'Events'</span>),</span><br><span class="line">        bubbles = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (props)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> props)(name == <span class="string">'bubbles'</span>) ? (bubbles = !!props[name]) : (event[name] = props[name]);</span><br><span class="line">    event.initEvent(type, bubbles, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> compatible(event);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="4-bind，unbind，one实现"><a href="#4-bind，unbind，one实现" class="headerlink" title="4.bind，unbind，one实现"></a>4.bind，unbind，one实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.fn.bind = <span class="function"><span class="keyword">function</span>(<span class="params">event, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, data, callback)</span><br><span class="line">&#125;</span><br><span class="line">$.fn.unbind = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.off(event, callback)</span><br><span class="line">&#125;</span><br><span class="line">$.fn.one = <span class="function"><span class="keyword">function</span>(<span class="params">event, selector, data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.on(event, selector, data, callback, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还有省略一部分，全部代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.3.2（只实现on），v0.3.3(完整实现)。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>参考阅读：</p><ul><li><a href="https://github.com/oadaM92/zepto/tree/master/oadaM92/event" target="_blank" rel="noopener">Zepto事件模块源码分析</a></li><li><a href="http://www.w3school.com.cn/jsref/event_relatedtarget.asp" target="_blank" rel="noopener">relatedTarget属性解析</a></li><li><a href="https://github.com/rollup/rollup/wiki/JavaScript-API" target="_blank" rel="noopener">rollup.js配置解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码7--动画模块(fx fx_method)</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%817--%E5%8A%A8%E7%94%BB%E6%A8%A1%E5%9D%97(fx%EF%BC%8Cfx_method)/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%817--%E5%8A%A8%E7%94%BB%E6%A8%A1%E5%9D%97(fx%EF%BC%8Cfx_method)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.7.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>注：要在<a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">github源代码中</a>自己编译的话，要在基础包<code>命令：npm run dist</code>上要进行扩展了，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MODULES=<span class="string">"zepto event fx fx_methods"</span> npm run dist</span><br><span class="line"><span class="comment"># on Windows</span></span><br><span class="line">&gt; SET MODULES=zepto event fx fx_methods</span><br><span class="line">&gt; npm run dist</span><br></pre></td></tr></table></figure><h1 id="1-示例Demo"><a href="#1-示例Demo" class="headerlink" title="1.示例Demo"></a>1.示例Demo</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = $(<span class="string">'#foo1'</span>);</span><br><span class="line">div1.animate(&#123;</span><br><span class="line">        <span class="string">"width"</span>: <span class="string">"300px"</span>,</span><br><span class="line">        <span class="string">"height"</span>: <span class="string">"300px"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'slow'</span>, <span class="string">'ease-in-out'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'div1 animate callback'</span>);</span><br><span class="line">        <span class="comment">// div2.hide('slow',function()&#123;</span></span><br><span class="line">        div2.fadeOut(<span class="string">'slow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'div2 animate callback'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="string">'2000'</span>);</span><br></pre></td></tr></table></figure><h1 id="2-fx"><a href="#2-fx" class="headerlink" title="2.fx"></a>2.fx</h1><p>zepto的动画采用的是CSS3的动画/过渡，未做兼容。<br>核心方法是<code>$.fn.animate = function(properties, duration, ease, callback, delay)</code>，实际上的处理逻辑是<code>$.fn.anim = function(properties, duration, ease, callback, delay)</code><br>其本质就是设置好css3属性对象，然后用<code>this.css(cssValues)</code>方法是css3动画起作用。浏览器不支持的动画使用setTimeout<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// duration为0，即浏览器不支持动画的情况，直接执行动画结束，执行回调。</span></span><br><span class="line"><span class="keyword">if</span> (duration &lt;= <span class="number">0</span>) setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   that.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; wrappedCallback.call(<span class="keyword">this</span>); &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>整体的源代码和注释放在下面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fx = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prefix = <span class="string">''</span>,</span><br><span class="line">        eventPrefix,</span><br><span class="line">        vendors = &#123; <span class="attr">Webkit</span>: <span class="string">'webkit'</span>, <span class="attr">Moz</span>: <span class="string">''</span>, <span class="attr">O</span>: <span class="string">'o'</span> &#125;,</span><br><span class="line">        testEl = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</span><br><span class="line">        supportedTransforms = <span class="regexp">/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i</span>,</span><br><span class="line">        transform,</span><br><span class="line">        transitionProperty, transitionDuration, transitionTiming, transitionDelay, <span class="comment">//过渡</span></span><br><span class="line">        animationName, animationDuration, animationTiming, animationDelay, <span class="comment">//动画</span></span><br><span class="line">        cssReset = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将驼峰字符串转成css属性，如aB--&gt;a-b</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dasherize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="regexp">/([a-z])([A-Z])/</span>, <span class="string">'$1-$2'</span>).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修正事件名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">normalizeEvent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eventPrefix ? eventPrefix + name : name.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据浏览器内核，设置CSS前缀，事件前缀</span></span><br><span class="line"><span class="comment">     * 如css：-webkit-  event:webkit</span></span><br><span class="line"><span class="comment">     * 为prefix和eventPrefix赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (testEl.style.transform === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        $.each(vendors, <span class="function"><span class="keyword">function</span>(<span class="params">vendor, event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (testEl.style[vendor + <span class="string">'TransitionProperty'</span>] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                prefix = <span class="string">'-'</span> + vendor.toLowerCase() + <span class="string">'-'</span>;</span><br><span class="line">                eventPrefix = event;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    transform = prefix + <span class="string">'transform'</span>;</span><br><span class="line">    <span class="comment">//均为空''</span></span><br><span class="line">    cssReset[transitionProperty = prefix + <span class="string">'transition-property'</span>] =</span><br><span class="line">        cssReset[transitionDuration = prefix + <span class="string">'transition-duration'</span>] =</span><br><span class="line">        cssReset[transitionDelay = prefix + <span class="string">'transition-delay'</span>] =</span><br><span class="line">        cssReset[transitionTiming = prefix + <span class="string">'transition-timing-function'</span>] =</span><br><span class="line">        cssReset[animationName = prefix + <span class="string">'animation-name'</span>] =</span><br><span class="line">        cssReset[animationDuration = prefix + <span class="string">'animation-duration'</span>] =</span><br><span class="line">        cssReset[animationDelay = prefix + <span class="string">'animation-delay'</span>] =</span><br><span class="line">        cssReset[animationTiming = prefix + <span class="string">'animation-timing-function'</span>] = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动画常量数据源</span></span><br><span class="line"><span class="comment">     * @type &#123;&#123;off: boolean, speeds: &#123;_default: number, fast: number, slow: number&#125;, cssPrefix: string, transitionEnd: *, animationEnd: *&#125;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $.fx = &#123;</span><br><span class="line">        off: (eventPrefix === <span class="literal">undefined</span> &amp;&amp; testEl.style.transitionProperty === <span class="literal">undefined</span>), <span class="comment">//能力检测是否支持动画，具体检测是否支持过渡，支持过渡事件</span></span><br><span class="line">        speeds: &#123; <span class="attr">_default</span>: <span class="number">400</span>, <span class="attr">fast</span>: <span class="number">200</span>, <span class="attr">slow</span>: <span class="number">600</span> &#125;,</span><br><span class="line">        cssPrefix: prefix, <span class="comment">//css 前缀  如-webkit-</span></span><br><span class="line">        transitionEnd: normalizeEvent(<span class="string">'TransitionEnd'</span>), <span class="comment">//过渡结束事件</span></span><br><span class="line">        animationEnd: normalizeEvent(<span class="string">'AnimationEnd'</span>) <span class="comment">//动画播放结束事件</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [animate 自定义动画]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[Object]&#125;   properties [属性变化成，如&#123;"width":"300px"&#125;]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[type]&#125;   duration   [速度 如slow或者一个数字]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[type]&#125;   ease       [变化的速率ease、linear、ease-in / ease-out、ease-in-out</span></span><br><span class="line"><span class="comment">cubic-bezier]</span></span><br><span class="line"><span class="comment">     * @param  &#123;Function&#125; callback   [回调函数]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[type]&#125;   delay      [延迟时间]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $.fn.animate = <span class="function"><span class="keyword">function</span>(<span class="params">properties, duration, ease, callback, delay</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//参数处理</span></span><br><span class="line">        <span class="keyword">if</span> ($.isFunction(duration)) <span class="comment">//传参为function(properties,callback)</span></span><br><span class="line">            callback = duration, ease = <span class="literal">undefined</span>, duration = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> ($.isFunction(ease)) <span class="comment">//传参为function(properties,duration，callback)</span></span><br><span class="line">            callback = ease, ease = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> ($.isPlainObject(duration)) <span class="comment">//传参为function(properties,｛｝)</span></span><br><span class="line">            ease = duration.easing, callback = duration.complete, delay = duration.delay, duration = duration.duration</span><br><span class="line">            <span class="comment">//duration参数处理</span></span><br><span class="line">        <span class="keyword">if</span> (duration) duration = (<span class="keyword">typeof</span> duration == <span class="string">'number'</span> ? duration :</span><br><span class="line">            ($.fx.speeds[duration] || $.fx.speeds._default)) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span> (delay) delay = <span class="built_in">parseFloat</span>(delay) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.anim(properties, duration, ease, callback, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">    $.fn.anim = <span class="function"><span class="keyword">function</span>(<span class="params">properties, duration, ease, callback, delay</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key, cssValues = &#123;&#125;,</span><br><span class="line">            cssProperties, transforms = <span class="string">''</span>,</span><br><span class="line">            that = <span class="keyword">this</span>,</span><br><span class="line">            wrappedCallback, endEvent = $.fx.transitionEnd,</span><br><span class="line">            fired = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//修正好时间</span></span><br><span class="line">        <span class="keyword">if</span> (duration === <span class="literal">undefined</span>) duration = $.fx.speeds._default / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span> (delay === <span class="literal">undefined</span>) delay = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ($.fx.off) duration = <span class="number">0</span>; <span class="comment">//如果浏览器不支持动画，持续时间设为0，直接跳动画结束</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> properties == <span class="string">'string'</span>) &#123;</span><br><span class="line">            <span class="comment">// keyframe animation</span></span><br><span class="line">            cssValues[animationName] = properties; <span class="comment">//properties是动画名</span></span><br><span class="line">            cssValues[animationDuration] = duration + <span class="string">'s'</span>;</span><br><span class="line">            cssValues[animationDelay] = delay + <span class="string">'s'</span>;</span><br><span class="line">            cssValues[animationTiming] = (ease || <span class="string">'linear'</span>);</span><br><span class="line">            endEvent = $.fx.animationEnd;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//properties 是样式集对象</span></span><br><span class="line">            cssProperties = [];</span><br><span class="line">            <span class="comment">// CSS transitions</span></span><br><span class="line">            <span class="keyword">for</span> (key <span class="keyword">in</span> properties) &#123;</span><br><span class="line">                <span class="comment">//是这些属性^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)</span></span><br><span class="line">                <span class="keyword">if</span> (supportedTransforms.test(key)) &#123;</span><br><span class="line">                    transforms += key + <span class="string">'('</span> + properties[key] + <span class="string">') '</span>; <span class="comment">//拼凑成变形方法</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cssValues[key] = properties[key], cssProperties.push(dasherize(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (transforms) cssValues[transform] = transforms, cssProperties.push(transform);</span><br><span class="line">            <span class="keyword">if</span> (duration &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> properties === <span class="string">'object'</span>) &#123;</span><br><span class="line">                cssValues[transitionProperty] = cssProperties.join(<span class="string">', '</span>);</span><br><span class="line">                cssValues[transitionDuration] = duration + <span class="string">'s'</span>;</span><br><span class="line">                cssValues[transitionDelay] = delay + <span class="string">'s'</span>;</span><br><span class="line">                cssValues[transitionTiming] = (ease || <span class="string">'linear'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//动画完成后的响应函数</span></span><br><span class="line">        wrappedCallback = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> event !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (event.target !== event.currentTarget) <span class="keyword">return</span>; <span class="comment">// makes sure the event didn't bubble from "below"</span></span><br><span class="line">                $(event.target).unbind(endEvent, wrappedCallback);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="keyword">this</span>).unbind(endEvent, wrappedCallback); <span class="comment">// triggered by setTimeout</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fired = <span class="literal">true</span>;</span><br><span class="line">            $(<span class="keyword">this</span>).css(cssReset);</span><br><span class="line"></span><br><span class="line">            callback &amp;&amp; callback.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//处理动画结束事件</span></span><br><span class="line">        <span class="keyword">if</span> (duration &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//绑定动画结束事件</span></span><br><span class="line">            <span class="keyword">this</span>.bind(endEvent, wrappedCallback);</span><br><span class="line">            <span class="comment">// transitionEnd is not always firing on older Android phones</span></span><br><span class="line">            <span class="comment">// so make sure it gets fired</span></span><br><span class="line">            <span class="comment">//延时ms后执行动画，注意这里加了25ms，保持endEvent，动画先执行完。</span></span><br><span class="line">            <span class="comment">//绑定过事件还做延时处理，是transitionEnd在older Android phones不一定触发    </span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (fired) <span class="keyword">return</span>;</span><br><span class="line">                wrappedCallback.call(that);</span><br><span class="line">            &#125;, ((duration + delay) * <span class="number">1000</span>) + <span class="number">25</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// trigger page reflow so new elements can animate</span></span><br><span class="line">        <span class="comment">//主动触发页面回流，刷新DOM，让接下来设置的动画可以正确播放</span></span><br><span class="line">        <span class="comment">//更改 offsetTop、offsetLeft、 offsetWidth、offsetHeight；scrollTop、scrollLeft、</span></span><br><span class="line">        <span class="comment">//scrollWidth、scrollHeight；clientTop、clientLeft、clientWidth、clientHeight；getComputedStyle() 、</span></span><br><span class="line">        <span class="comment">//currentStyle()。这些都会触发回流。回流导致DOM重新渲染，平时要尽可能避免，</span></span><br><span class="line">        <span class="comment">//但这里，为了动画即时生效播放，则主动触发回流，刷新DOM</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.size() &amp;&amp; <span class="keyword">this</span>.get(<span class="number">0</span>).clientLeft;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置样式，启动动画</span></span><br><span class="line">        <span class="keyword">this</span>.css(cssValues);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// duration为0，即浏览器不支持动画的情况，直接执行动画结束，执行回调。</span></span><br><span class="line">        <span class="keyword">if</span> (duration &lt;= <span class="number">0</span>) setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            that.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; wrappedCallback.call(<span class="keyword">this</span>); &#125;);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    testEl = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Fx;</span><br></pre></td></tr></table></figure></p><h1 id="3-fx-methods"><a href="#3-fx-methods" class="headerlink" title="3.fx_methods"></a>3.fx_methods</h1><p>源码中的<code>fx_methods</code>（fx_methods.js中）方法，说白了就是利用上面的<code>fx.js</code>文件下的<code>$.fn.animate</code>函数提供便捷的方法</p><p>整体源码和注释放在这里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fx_methods = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document,</span><br><span class="line">        docElem = <span class="built_in">document</span>.documentElement,</span><br><span class="line">        origShow = $.fn.show,</span><br><span class="line">        origHide = $.fn.hide,</span><br><span class="line">        origToggle = $.fn.toggle;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">anim</span>(<span class="params">el, speed, opacity, scale, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> speed == <span class="string">'function'</span> &amp;&amp; !callback) callback = speed, speed = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">var</span> props = &#123; <span class="attr">opacity</span>: opacity &#125;;</span><br><span class="line">        <span class="keyword">if</span> (scale) &#123;</span><br><span class="line">            props.scale = scale;</span><br><span class="line">            el.css($.fx.cssPrefix + <span class="string">'transform-origin'</span>, <span class="string">'0 0'</span>); <span class="comment">//设置变形原点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> el.animate(props, speed, <span class="literal">null</span>, callback); <span class="comment">//不支持速率变化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params">el, speed, scale, callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//$(dom).animate(&#123;opacity: 0, '-webkit-transform-origin': '0px 0px 0px', '-webkit-transform': 'scale(0, 0)' &#125;,800)</span></span><br><span class="line">        <span class="comment">//设置了变形原点，缩放为0，它就会缩到左上角再透明</span></span><br><span class="line">        <span class="keyword">return</span> anim(el, speed, <span class="number">0</span>, scale, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            origHide.call($(<span class="keyword">this</span>));</span><br><span class="line">            callback &amp;&amp; callback.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $.fn.show = <span class="function"><span class="keyword">function</span>(<span class="params">speed, callback</span>) </span>&#123;</span><br><span class="line">        origShow.call(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (speed === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            speed = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.css(<span class="string">'opacity'</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> anim(<span class="keyword">this</span>, speed, <span class="number">1</span>, <span class="string">'1,1'</span>, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.hide = <span class="function"><span class="keyword">function</span>(<span class="params">speed, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (speed === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> origHide.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> hide(<span class="keyword">this</span>, speed, <span class="string">'0,0'</span>, callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.toggle = <span class="function"><span class="keyword">function</span>(<span class="params">speed, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (speed === <span class="literal">undefined</span> || <span class="keyword">typeof</span> speed == <span class="string">'boolean'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> origToggle.call(<span class="keyword">this</span>, speed);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> el = $(<span class="keyword">this</span>);</span><br><span class="line">                el[el.css(<span class="string">'display'</span>) == <span class="string">'none'</span> ? <span class="string">'show'</span> : <span class="string">'hide'</span>](speed, callback);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.fadeTo = <span class="function"><span class="keyword">function</span>(<span class="params">speed, opacity, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> anim(<span class="keyword">this</span>, speed, opacity, <span class="literal">null</span>, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.fadeIn = <span class="function"><span class="keyword">function</span>(<span class="params">speed, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = <span class="keyword">this</span>.css(<span class="string">'opacity'</span>);</span><br><span class="line">        <span class="keyword">if</span> (target &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.css(<span class="string">'opacity'</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            target = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> origShow.call(<span class="keyword">this</span>).fadeTo(speed, target, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.fadeOut = <span class="function"><span class="keyword">function</span>(<span class="params">speed, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hide(<span class="keyword">this</span>, speed, <span class="literal">null</span>, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.fadeToggle = <span class="function"><span class="keyword">function</span>(<span class="params">speed, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> el = $(<span class="keyword">this</span>);</span><br><span class="line">            el[</span><br><span class="line">                (el.css(<span class="string">'opacity'</span>) == <span class="number">0</span> || el.css(<span class="string">'display'</span>) == <span class="string">'none'</span>) ? <span class="string">'fadeIn'</span> : <span class="string">'fadeOut'</span></span><br><span class="line">            ](speed, callback);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Fx_methods;</span><br></pre></td></tr></table></figure><blockquote><p>全部代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，本博文对应文件夹v0.7.x。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>参考阅读：</p><ul><li><a href="http://www.cnblogs.com/mominger/p/4538685.html" target="_blank" rel="noopener">Zepto源码分析-动画(fx fx_method)模块</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY zepto库，研究zepto源码8--touch模块</title>
      <link href="/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%818--touch%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/12/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20zepto%E5%BA%93%EF%BC%8C%E7%A0%94%E7%A9%B6zepto%E6%BA%90%E7%A0%818--touch%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>由于移动端众所周知的click 300ms延迟的缘故（用户碰触页面之后，需要等待一段时间来判断是不是双击（double tap）动作，而不是立即响应单击（click），等待的这段时间大约是300ms）。移动事件提供了<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>，却没有提供对<code>tap</code>的支持。许多主流框架都是自定义实现了tap事件，消除300ms的延迟，当然包括Zepto.js。</p><p>关于点击穿透的解决方案可以查看： <a href="http://www.ayqy.net/blog/%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" target="_blank" rel="noopener">移动页面点击穿透问题解决方案</a>。</p><p>此外，使用原生的touch事件也存在点击穿透的问题，因为click是在touch系列事件发生后大约300ms才触发的，混用touch和click肯定会导致点透问题。所以在移动端我们有必要使用类似Zepto.js的tap事件。</p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.8.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><h1 id="1-源码"><a href="#1-源码" class="headerlink" title="1.源码"></a>1.源码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> Touch = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> touch = &#123;&#125;,</span><br><span class="line">        touchTimeout, tapTimeout, swipeTimeout, longTapTimeout,</span><br><span class="line">        longTapDelay = <span class="number">750</span>,</span><br><span class="line">        gesture;</span><br><span class="line">    <span class="comment">// 判断滑动方向，返回Left, Right, Up, Down    </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swipeDirection</span>(<span class="params">x1, x2, y1, y2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.abs(x1 - x2) &gt;=</span><br><span class="line">            <span class="built_in">Math</span>.abs(y1 - y2) ? (x1 - x2 &gt; <span class="number">0</span> ? <span class="string">'Left'</span> : <span class="string">'Right'</span>) : (y1 - y2 &gt; <span class="number">0</span> ? <span class="string">'Up'</span> : <span class="string">'Down'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//长按</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">longTap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        longTapTimeout = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (touch.last) &#123;</span><br><span class="line">            touch.el.trigger(<span class="string">'longTap'</span>);</span><br><span class="line">            touch = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消长按</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cancelLongTap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (longTapTimeout) clearTimeout(longTapTimeout);</span><br><span class="line">        longTapTimeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取消所有</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cancelAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (touchTimeout) clearTimeout(touchTimeout);</span><br><span class="line">        <span class="keyword">if</span> (tapTimeout) clearTimeout(tapTimeout);</span><br><span class="line">        <span class="keyword">if</span> (swipeTimeout) clearTimeout(swipeTimeout);</span><br><span class="line">        <span class="keyword">if</span> (longTapTimeout) clearTimeout(longTapTimeout);</span><br><span class="line">        touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = <span class="literal">null</span>;</span><br><span class="line">        touch = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// IE的touch事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPrimaryTouch</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (event.pointerType == <span class="string">'touch'</span> ||</span><br><span class="line">            event.pointerType == event.MSPOINTER_TYPE_TOUCH) &amp;&amp; event.isPrimary</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// IE鼠标事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPointerEventType</span>(<span class="params">e, type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (e.type == <span class="string">'pointer'</span> + type ||</span><br><span class="line">            e.type.toLowerCase() == <span class="string">'mspointer'</span> + type)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now, delta, deltaX = <span class="number">0</span>,</span><br><span class="line">            deltaY = <span class="number">0</span>,</span><br><span class="line">            firstTouch, _isPointerType;</span><br><span class="line">        <span class="comment">//IE的手势</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'MSGesture'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">            gesture = <span class="keyword">new</span> MSGesture();</span><br><span class="line">            gesture.target = <span class="built_in">document</span>.body;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="built_in">document</span>)</span><br><span class="line">            .bind(<span class="string">'MSGestureEnd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//处理IE手势结束</span></span><br><span class="line">                <span class="keyword">var</span> swipeDirectionFromVelocity =</span><br><span class="line">                    e.velocityX &gt; <span class="number">1</span> ? <span class="string">'Right'</span> : e.velocityX &lt; <span class="number">-1</span> ? <span class="string">'Left'</span> : e.velocityY &gt; <span class="number">1</span> ? <span class="string">'Down'</span> : e.velocityY &lt; <span class="number">-1</span> ? <span class="string">'Up'</span> : <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (swipeDirectionFromVelocity) &#123;</span><br><span class="line">                    touch.el.trigger(<span class="string">'swipe'</span>);</span><br><span class="line">                    touch.el.trigger(<span class="string">'swipe'</span> + swipeDirectionFromVelocity);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 处理手指接触</span></span><br><span class="line">            .on(<span class="string">'touchstart MSPointerDown pointerdown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//排除非触摸设备</span></span><br><span class="line">                <span class="keyword">if</span> ((_isPointerType = isPointerEventType(e, <span class="string">'down'</span>)) &amp;&amp;</span><br><span class="line">                    !isPrimaryTouch(e)) <span class="keyword">return</span>;</span><br><span class="line">                firstTouch = _isPointerType ? e : e.touches[<span class="number">0</span>]; <span class="comment">// 获取起点位置数据</span></span><br><span class="line">                <span class="comment">// 重置终点坐标</span></span><br><span class="line">                <span class="keyword">if</span> (e.touches &amp;&amp; e.touches.length === <span class="number">1</span> &amp;&amp; touch.x2) &#123;</span><br><span class="line">                    <span class="comment">// Clear out touch movement data if we have it sticking around</span></span><br><span class="line">                    <span class="comment">// This can occur if touchcancel doesn't fire due to preventDefault, etc.</span></span><br><span class="line">                    touch.x2 = <span class="literal">undefined</span>;</span><br><span class="line">                    touch.y2 = <span class="literal">undefined</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断用户动作类型</span></span><br><span class="line">                now = <span class="built_in">Date</span>.now();</span><br><span class="line">                delta = now - (touch.last || now); <span class="comment">// 距离上次碰触的时间差</span></span><br><span class="line">                touch.el = $(<span class="string">'tagName'</span> <span class="keyword">in</span> firstTouch.target ?</span><br><span class="line">                    firstTouch.target : firstTouch.target.parentNode); <span class="comment">// 手指碰触的元素</span></span><br><span class="line">                touchTimeout &amp;&amp; clearTimeout(touchTimeout); <span class="comment">// 重置touch事件处理器的Timeout ID</span></span><br><span class="line">                <span class="comment">//记录起点坐标</span></span><br><span class="line">                touch.x1 = firstTouch.pageX;</span><br><span class="line">                touch.y1 = firstTouch.pageY;</span><br><span class="line">                <span class="comment">//判断是否双击</span></span><br><span class="line">                <span class="keyword">if</span> (delta &gt; <span class="number">0</span> &amp;&amp; delta &lt;= <span class="number">250</span>) touch.isDoubleTap = <span class="literal">true</span>;</span><br><span class="line">                touch.last = now;</span><br><span class="line">                <span class="comment">// 注册长按事件处理器ID</span></span><br><span class="line">                longTapTimeout = setTimeout(longTap, longTapDelay);</span><br><span class="line">                <span class="comment">// adds the current touch contact for IE gesture recognition</span></span><br><span class="line">                <span class="comment">// 支持IE手势识别</span></span><br><span class="line">                <span class="keyword">if</span> (gesture &amp;&amp; _isPointerType) gesture.addPointer(e.pointerId);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 处理手指滑动</span></span><br><span class="line">            .on(<span class="string">'touchmove MSPointerMove pointermove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 排除非触摸设备</span></span><br><span class="line">                <span class="keyword">if</span> ((_isPointerType = isPointerEventType(e, <span class="string">'move'</span>)) &amp;&amp;</span><br><span class="line">                    !isPrimaryTouch(e)) <span class="keyword">return</span>;</span><br><span class="line">                firstTouch = _isPointerType ? e : e.touches[<span class="number">0</span>];</span><br><span class="line">                cancelLongTap(); <span class="comment">// 取消长按事件处理器</span></span><br><span class="line">                touch.x2 = firstTouch.pageX;</span><br><span class="line">                touch.y2 = firstTouch.pageY;</span><br><span class="line"></span><br><span class="line">                deltaX += <span class="built_in">Math</span>.abs(touch.x1 - touch.x2);</span><br><span class="line">                deltaY += <span class="built_in">Math</span>.abs(touch.y1 - touch.y2);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 处理手指离开</span></span><br><span class="line">            .on(<span class="string">'touchend MSPointerUp pointerup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 排除非触摸设备</span></span><br><span class="line">                <span class="keyword">if</span> ((_isPointerType = isPointerEventType(e, <span class="string">'up'</span>)) &amp;&amp;</span><br><span class="line">                    !isPrimaryTouch(e)) <span class="keyword">return</span>;</span><br><span class="line">                cancelLongTap(); <span class="comment">// 取消长按事件处理器</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// swipe  判定滑动动作（起点 - 终点的横向或者纵向距离超过30px）</span></span><br><span class="line">                <span class="keyword">if</span> ((touch.x2 &amp;&amp; <span class="built_in">Math</span>.abs(touch.x1 - touch.x2) &gt; <span class="number">30</span>) ||</span><br><span class="line">                    (touch.y2 &amp;&amp; <span class="built_in">Math</span>.abs(touch.y1 - touch.y2) &gt; <span class="number">30</span>)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 注册长按事件处理器ID（立即准备执行长按）</span></span><br><span class="line">                    swipeTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (touch.el) &#123;</span><br><span class="line">                            touch.el.trigger(<span class="string">'swipe'</span>); <span class="comment">// 触发长按</span></span><br><span class="line">                            <span class="comment">// 触发向上|下|左|右的长按</span></span><br><span class="line">                            touch.el.trigger(<span class="string">'swipe'</span> + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)))</span><br><span class="line">                        &#125;</span><br><span class="line">                        touch = &#123;&#125;; <span class="comment">// 清空数据，本次touch结束</span></span><br><span class="line">                    &#125;, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// normal tap 正常轻触</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'last'</span> <span class="keyword">in</span> touch) &#123; <span class="comment">// 如果记录了上次接触时间</span></span><br><span class="line">                    <span class="comment">// don't fire tap when delta position changed by more than 30 pixels,</span></span><br><span class="line">                    <span class="comment">// for instance when moving to a point and back to origin</span></span><br><span class="line">                    <span class="keyword">if</span> (deltaX &lt; <span class="number">30</span> &amp;&amp; deltaY &lt; <span class="number">30</span>) &#123;</span><br><span class="line">                        <span class="comment">// delay by one tick so we can cancel the 'tap' event if 'scroll' fires</span></span><br><span class="line">                        <span class="comment">// ('tap' fires before 'scroll')</span></span><br><span class="line">                        <span class="comment">//立即准备执行轻触，不立即执行是为了scroll时能取消执行轻触</span></span><br><span class="line">                        tapTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="comment">// trigger universal 'tap' with the option to cancelTouch()</span></span><br><span class="line">                            <span class="comment">// (cancelTouch cancels processing of single vs double taps for faster 'tap' response)</span></span><br><span class="line">                            <span class="comment">// 触发全局tap，cancelTouch()可以取消singleTap，doubleTap事件，以求更快响应轻触</span></span><br><span class="line">                            <span class="keyword">var</span> event = $.Event(<span class="string">'tap'</span>);</span><br><span class="line">                            event.cancelTouch = cancelAll;</span><br><span class="line">                            <span class="comment">// [by paper] fix -&gt; "TypeError: 'undefined' is not an object (evaluating 'touch.el.trigger'), when double tap</span></span><br><span class="line">                            <span class="keyword">if</span> (touch.el) touch.el.trigger(event);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// trigger double tap immediately</span></span><br><span class="line">                            <span class="comment">// 立即触发doubleTap</span></span><br><span class="line">                            <span class="keyword">if</span> (touch.isDoubleTap) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (touch.el) touch.el.trigger(<span class="string">'doubleTap'</span>);</span><br><span class="line">                                touch = &#123;&#125;;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// trigger single tap after 250ms of inactivity</span></span><br><span class="line">                            <span class="comment">// 250ms后触发singleTap</span></span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                touchTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                                    touchTimeout = <span class="literal">null</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (touch.el) touch.el.trigger(<span class="string">'singleTap'</span>);</span><br><span class="line">                                    touch = &#123;&#125;;</span><br><span class="line">                                &#125;, <span class="number">250</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是滑了一圈又回到起点，扔掉事件数据，不做处理</span></span><br><span class="line">                        touch = &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    deltaX = deltaY = <span class="number">0</span>; <span class="comment">// 重置横向，纵向滑动距离</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// when the browser window loses focus,</span></span><br><span class="line">            <span class="comment">// for example when a modal dialog is shown,</span></span><br><span class="line">            <span class="comment">// cancel all ongoing events</span></span><br><span class="line">            <span class="comment">// 浏览器窗口失去焦点时，取消所有事件处理动作</span></span><br><span class="line">            .on(<span class="string">'touchcancel MSPointerCancel pointercancel'</span>, cancelAll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// scrolling the window indicates intention of the user</span></span><br><span class="line">        <span class="comment">// to scroll, not tap or swipe, so cancel all ongoing events</span></span><br><span class="line">        <span class="comment">// 触发scroll时取消所有事件处理动作</span></span><br><span class="line">        $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, cancelAll);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在这里注册，在源码中触发</span></span><br><span class="line">    [<span class="string">'swipe'</span>, <span class="string">'swipeLeft'</span>, <span class="string">'swipeRight'</span>, <span class="string">'swipeUp'</span>, <span class="string">'swipeDown'</span>,</span><br><span class="line">        <span class="string">'doubleTap'</span>, <span class="string">'tap'</span>, <span class="string">'singleTap'</span>, <span class="string">'longTap'</span></span><br><span class="line">    ].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">eventName</span>) </span>&#123;</span><br><span class="line">        $.fn[eventName] = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.on(eventName, callback);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Touch;</span><br></pre></td></tr></table></figure><h1 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h1><p>核心层分是把事件绑定到<code>$(document)</code>上分别进行处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>)</span><br><span class="line">  .bind(<span class="string">'MSGestureEnd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;<span class="comment">//处理IE手势结束</span></span><br><span class="line">  .on(<span class="string">'touchstart MSPointerDown pointerdown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125; <span class="comment">// 处理手指接触</span></span><br><span class="line">  .on(<span class="string">'touchmove MSPointerMove pointermove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;  <span class="comment">// 处理手指滑动</span></span><br><span class="line">  .on(<span class="string">'touchend MSPointerUp pointerup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;       <span class="comment">// 处理手指离开 </span></span><br><span class="line">  .on(<span class="string">'touchcancel MSPointerCancel pointercancel'</span>, cancelAll);</span><br><span class="line">  <span class="comment">// 浏览器窗口失去焦点时，取消所有事件处理动作</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发scroll时取消所有事件处理动作</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, cancelAll);</span><br></pre></td></tr></table></figure><p><code>tap</code>事件是通过<code>touch</code>事件模拟的</p><ul><li>tap —元素tap的时候触发。</li><li>singleTap and doubleTap — 这一对事件可以用来检测元素上的单击和双击。(如果你不需要检测单击、双击，使用 tap 代替)。</li><li>longTap — 当一个元素被按住超过750ms触发。</li><li>swipe, swipeLeft, swipeRight, swipeUp, swipeDown — 当元素被划过时触发。(可选择给定的方向)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (deltaX &lt; <span class="number">30</span> &amp;&amp; deltaY &lt; <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">//立即准备执行轻触，不立即执行是为了scroll时能取消执行轻触</span></span><br><span class="line">    tapTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 触发全局tap，cancelTouch()可以取消singleTap</span></span><br><span class="line">        <span class="comment">// doubleTap事件，以求更快响应轻触</span></span><br><span class="line">        <span class="keyword">var</span> event = $.Event(<span class="string">'tap'</span>);</span><br><span class="line">        event.cancelTouch = cancelAll;</span><br><span class="line">        <span class="keyword">if</span> (touch.el) touch.el.trigger(event);</span><br><span class="line">        <span class="comment">// 立即触发doubleTap</span></span><br><span class="line">        <span class="keyword">if</span> (touch.isDoubleTap) &#123;</span><br><span class="line">            <span class="keyword">if</span> (touch.el) touch.el.trigger(<span class="string">'doubleTap'</span>);</span><br><span class="line">            touch = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 250ms后触发singleTap</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            touchTimeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                touchTimeout = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (touch.el) touch.el.trigger(<span class="string">'singleTap'</span>);</span><br><span class="line">                touch = &#123;&#125;;</span><br><span class="line">            &#125;, <span class="number">250</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是滑了一圈又回到起点，扔掉事件数据，不做处理</span></span><br><span class="line">    touch = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Zepto的touch模块也只实现了tap和swipe相关的动作，不支持复杂手势，需要支持复杂手势的话，可以使用 <a href="http://www.tuicool.com/articles/AR77Zz" target="_blank" rel="noopener">hammer.js</a> ，hammer提供了完善的一整套手势支持（ 注意 ：hammer也存在点击穿透问题，仍然需要手动处理该问题）</p><blockquote><p>代码挂在我的<a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">github</a>上，对应文件夹v0.8.1。<br><a href="https://github.com/zrysmt/DIY-zepto" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-zepto</a></p></blockquote><p>参考阅读：</p><ul><li><a href="http://www.ayqy.net/blog/%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" target="_blank" rel="noopener">移动页面点击穿透问题解决方案</a></li><li><a href="http://www.tuicool.com/articles/AR77Zz" target="_blank" rel="noopener">Zepto的touch模块源码解读</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用javascript原生实现一个模板引擎</title>
      <link href="/2016/12/05/%E4%BD%BF%E7%94%A8javascript%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2016/12/05/%E4%BD%BF%E7%94%A8javascript%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>模板引擎分为<strong>前端</strong>和<strong>后端</strong>的，前端常用的模板引擎如artTemplate,<a href="http://www.juicer.name/docs/docs_zh_cn.html" target="_blank" rel="noopener">juicer</a>渲染是在客户端完成的；后端的模板引擎如基于PHP的<a href="http://www.smarty.net/docs/zh_CN/" target="_blank" rel="noopener">smarty</a>,渲染是服务器完成的。</p><p>前两天看到一篇博客挺好的是用了不到20行代码实现一个前端的模板引擎，感觉挺有趣的，今天就来实现下</p><h1 id="1-简单的例子"><a href="#1-简单的例子" class="headerlink" title="1.简单的例子"></a>1.简单的例子</h1><p><strong>逻辑</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tplEngine = <span class="function"><span class="keyword">function</span>(<span class="params">tpl, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>;</span><br><span class="line">        <span class="keyword">while</span> (match = re.exec(tpl)) &#123;</span><br><span class="line">            tpl = tpl.replace(match[<span class="number">0</span>], data[match[<span class="number">1</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tpl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就是把<code>&lt;%name%&gt;</code>替换成<code>data.name</code>即可<br><strong>测试</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template1 = <span class="string">'&lt;p&gt;Hello, my name is &lt;%name%&gt;. I\'m &lt;%age%&gt; years old.&lt;/p&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(tplEngine(template1, &#123;</span><br><span class="line">    name: <span class="string">"Tom"</span>,</span><br><span class="line">    age: <span class="number">29</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h1 id="2-data属性复杂点"><a href="#2-data属性复杂点" class="headerlink" title="2. data属性复杂点"></a>2. data属性复杂点</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tplEngine = <span class="function"><span class="keyword">function</span>(<span class="params">tpl, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>;</span><br><span class="line">    <span class="keyword">var</span> code = <span class="string">'var r=[];\n'</span>,</span><br><span class="line">        cursor = <span class="number">0</span>;<span class="comment">//辅助变量</span></span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">line, js</span>) </span>&#123;<span class="comment">//针对变量还是普通的片段分别处理</span></span><br><span class="line">        js ? code += <span class="string">'r.push('</span> + line + <span class="string">');\n'</span> :</span><br><span class="line">            code += <span class="string">'r.push("'</span> + line.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>) + <span class="string">'");\n'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">while</span> (match = re.exec(tpl)) &#123;</span><br><span class="line">        add(tpl.slice(cursor, match.index));</span><br><span class="line">        add(<span class="string">"this."</span>+match[<span class="number">1</span>],<span class="literal">true</span>);<span class="comment">//要替换的变量</span></span><br><span class="line">        cursor = match.index + match[<span class="number">0</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    add(tpl.substr(cursor, tpl.length - cursor));</span><br><span class="line">    code += <span class="string">'return r.join("");'</span>; <span class="comment">// &lt;-- return the result</span></span><br><span class="line">    <span class="built_in">console</span>.info(code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(code.replace(<span class="regexp">/[\r\t\n]/g</span>,<span class="string">''</span>)).apply(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们研究下<code>new Function</code><br><strong>构造函数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Function ([arg1[, arg2[, ...argN]],] functionBody)</span><br></pre></td></tr></table></figure></p><p>argN是传入的参数，当然可以省略<br>函数体是<code>code.replace(/[\r\t\n]/g,&#39;&#39;)</code>，apply将函数体的上下文环境（this）指向了data<br>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template2 = <span class="string">'&lt;p&gt;Hello, my name is &lt;%name%&gt;. I\'m &lt;%profile.age%&gt; years old.&lt;/p&gt;'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tplEngine(template2, &#123;</span><br><span class="line">        name: <span class="string">"Kim"</span>,</span><br><span class="line">        profile: &#123;</span><br><span class="line">            age: <span class="number">29</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h1 id="3-加入for-if循环和判断语句"><a href="#3-加入for-if循环和判断语句" class="headerlink" title="3.加入for if循环和判断语句"></a>3.加入for if循环和判断语句</h1><p>按照上面的测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template3 =</span><br><span class="line">        <span class="string">'My skills:'</span> +</span><br><span class="line">        <span class="string">'&lt;%for(var index in this.skills) &#123;%&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;a href="#"&gt;&lt;%skills[index]%&gt;&lt;/a&gt;'</span> +</span><br><span class="line">        <span class="string">'&lt;%&#125;%&gt;'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tplEngine(template3, &#123;</span><br><span class="line">        skills: [<span class="string">"js"</span>, <span class="string">"html"</span>, <span class="string">"css"</span>]</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError: Unexpected token for</span><br></pre></td></tr></table></figure></p><p>打印结果<code>r.push(for(var index in this.skills) {);</code>是有问题的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var r=[];</span><br><span class="line">r.push(&quot;My skills:&quot;);</span><br><span class="line">r.push(for(var index in this.skills) &#123;);</span><br><span class="line">r.push(&quot;&lt;a href=\&quot;#\&quot;&gt;&quot;);</span><br><span class="line">r.push(this.skills[index]);</span><br><span class="line">r.push(&quot;&lt;/a&gt;&quot;);</span><br><span class="line">r.push(this.&#125;);</span><br><span class="line">r.push(&quot;&quot;);</span><br><span class="line">return r.join(&quot;&quot;);</span><br></pre></td></tr></table></figure></p><p>修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tplEngine = <span class="function"><span class="keyword">function</span>(<span class="params">tpl, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/&lt;%([^%&gt;]+)?%&gt;/g</span>,</span><br><span class="line">            re2 = <span class="regexp">/(^( )?(if|for|else|switch|case|break|&#123;|&#125;))(.*)?/g</span>;</span><br><span class="line">        <span class="keyword">var</span> code = <span class="string">'var r=[];\n'</span>,</span><br><span class="line">            cursor = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">line, js</span>) </span>&#123;</span><br><span class="line">            js ? code += line.match(re2) ? line + <span class="string">'\n'</span> : <span class="string">'r.push('</span> + line + <span class="string">');\n'</span> :</span><br><span class="line">                code += <span class="string">'r.push("'</span> + line.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>) + <span class="string">'");\n'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (match = re.exec(tpl)) &#123;</span><br><span class="line">            add(tpl.slice(cursor, match.index));</span><br><span class="line">            re2.test(match[<span class="number">1</span>]) ? add(match[<span class="number">1</span>], <span class="literal">true</span>) : add(<span class="string">"this."</span> + match[<span class="number">1</span>], <span class="literal">true</span>);</span><br><span class="line">            cursor = match.index + match[<span class="number">0</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line">        add(tpl.substr(cursor, tpl.length - cursor));</span><br><span class="line">        code += <span class="string">'return r.join("");'</span>; </span><br><span class="line">        <span class="built_in">console</span>.info(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(code.replace(<span class="regexp">/[\r\t\n]/g</span>, <span class="string">''</span>)).apply(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以打印<code>code</code>看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code+=&apos;console.log(r)；\n&apos;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;My skills:&quot;, &quot;&lt;a href=&quot;#&quot;&gt;&quot;, &quot;js&quot;, &quot;&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#&quot;&gt;&quot;, &quot;html&quot;, &quot;&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#&quot;&gt;&quot;, &quot;css&quot;, &quot;&lt;/a&gt;&quot;, &quot;&quot;]</span><br></pre></td></tr></table></figure><p>最终的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var r=[];</span><br><span class="line">r.push(&quot;My skills:&quot;);</span><br><span class="line">for(var index in this.skills) &#123;</span><br><span class="line">r.push(&quot;&lt;a href=\&quot;#\&quot;&gt;&quot;);</span><br><span class="line">r.push(this.skills[index]);</span><br><span class="line">r.push(&quot;&lt;/a&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">r.push(&quot;&quot;);</span><br><span class="line">console.log(r);</span><br><span class="line">return r.join(&quot;&quot;);</span><br></pre></td></tr></table></figure></p><p>解析结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My skills:&lt;a href=&quot;#&quot;&gt;js&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;html&lt;/a&gt;&lt;a href=&quot;#&quot;&gt;css&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>参考阅读：</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551309&amp;idx=1&amp;sn=93bf90d6f2c63fea0e5f3ec488a1431f&amp;chksm=8025a18cb752289af6ad341cdd20daa4b0d0dc6fd5e1f8cd6d8910afa8ee1b6400b0503ad382&amp;mpshare=1&amp;scene=1&amp;srcid=0926c4H6Se5FCKfQBRO2uDjd#rd" target="_blank" rel="noopener">只有20行Javascript代码！手把手教你写一个页面模板引擎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>domReady机制探究及DOMContentLoaded研究</title>
      <link href="/2016/11/10/domReady%E6%9C%BA%E5%88%B6%E6%8E%A2%E7%A9%B6%E5%8F%8ADOMContentLoaded%E7%A0%94%E7%A9%B6/"/>
      <url>/2016/11/10/domReady%E6%9C%BA%E5%88%B6%E6%8E%A2%E7%A9%B6%E5%8F%8ADOMContentLoaded%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>domReady机制是很多框架和库都具有的种子模块，使用了在DOM树解析完成后就立即响应，不用等待图片等资源下载完成（onload执行时候表示这些资源完全下载完成）的一种机制，那怎么实现呢。</p><p>1）支持DOMContentLoaded事件的，就使用DOMContentLoaded事件；<br>2）不支持的，就用来自Diego Perini发现的著名Hack兼容。兼容原理大概就是，通过IE中的document.documentElement.doScroll(‘left’)来判断DOM树是否创建完毕或者使用监控script标签的onreadystatechange得到它的readyState属性判断【遗憾的是经过我们的实验，在IE下domReady机制总会在onload后执行】</p><h1 id="1-domReady机制在IE7-8下"><a href="#1-domReady机制在IE7-8下" class="headerlink" title="1. domReady机制在IE7-8下"></a>1. domReady机制在IE7-8下</h1><h2 id="1-1-domReady机制源码（包括IE-非IE）"><a href="#1-1-domReady机制源码（包括IE-非IE）" class="headerlink" title="1.1 domReady机制源码（包括IE/非IE）"></a>1.1 domReady机制源码（包括IE/非IE）</h2><p>demo1.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> DOMContentLoaded Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">'defer'</span> <span class="attr">src</span>=<span class="string">"deferjs.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.12.4/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"demo1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    dom.Ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">"我的domReady1"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>deferjs.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"defer script"</span>);</span><br></pre></td></tr></table></figure></p><p>demo1.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">dom = [];</span><br><span class="line">dom.isReady = <span class="literal">false</span>;</span><br><span class="line">dom.isFunction = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">dom.Ready = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    dom.initReady(); <span class="comment">//如果没有建成DOM树，则走第二步，存储起来一起杀</span></span><br><span class="line">    <span class="keyword">if</span> (dom.isFunction(fn)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dom.isReady) &#123;</span><br><span class="line">            fn(); <span class="comment">//如果已经建成DOM，则来一个杀一个</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dom.push(fn); <span class="comment">//存储加载事件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">dom.fireReady = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dom.isReady) <span class="keyword">return</span>;</span><br><span class="line">    dom.isReady = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = dom.length; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> fn = dom[i];</span><br><span class="line">        fn();</span><br><span class="line">    &#125;</span><br><span class="line">    dom.length = <span class="number">0</span>; <span class="comment">//清空事件</span></span><br><span class="line">&#125;;</span><br><span class="line">dom.initReady = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//非IE</span></span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"DOMContentLoaded"</span>);</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="built_in">arguments</span>.callee, <span class="literal">false</span>); <span class="comment">//清除加载函数</span></span><br><span class="line">            dom.fireReady();</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//IE走这条线</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById) &#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;script id=\"ie-domReady\" defer='defer'src=\"//:\"&gt;&lt;\/script&gt;"</span>);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"ie-domReady"</span>).onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="string">"complete"</span>) &#123;</span><br><span class="line">                 <span class="comment">//只针对IE readyState 的值 complete--脚本执行完成。</span></span><br><span class="line">                 <span class="comment">//这个时候DOM树肯定已经解析完成了，不支持defer属性</span></span><br><span class="line">                 <span class="comment">//会在onload函数之后执行。</span></span><br><span class="line">                    dom.fireReady();</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'this.readyState === "complete"'</span>);</span><br><span class="line">                    <span class="keyword">this</span>.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**********测试**************************************************/</span></span><br><span class="line">dom.Ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">"我的domReady2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*$(document).ready(function() &#123;</span></span><br><span class="line"><span class="comment">    dom.Ready(function() &#123;</span></span><br><span class="line"><span class="comment">        console.info("我的domReady4在jquery的ready函数中");</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">    console.log('jquery中的ready函数');</span></span><br><span class="line"><span class="comment">&#125;);*/</span></span><br><span class="line">dom.Ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">"我的domReady3"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在js中'</span>);</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"onload函数"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="1-2-背景知识介绍"><a href="#1-2-背景知识介绍" class="headerlink" title="1.2 背景知识介绍"></a>1.2 背景知识介绍</h2><ul><li><code>document.readystate</code></li></ul><blockquote><p><strong>readyState</strong> 属性返回当前文档的状态（载入中……）。<br>该属性返回以下值:</p></blockquote><ul><li>uninitialized - 还未开始载入</li><li>loading - 载入中</li><li>interactive - 已加载，文档与用户可以开始交互并引发<a href="https://developer.mozilla.org/zh-CN/docs/Web/Reference/Events/DOMContentLoaded" title="/zh-CN/docs/Web/Reference/Events/DOMContentLoaded" target="_blank" rel="noopener">DOMContentLoaded</a>事件</li><li>complete - 载入完成</li></ul><ul><li>IE的 script的readyState<br>FireFox的script 元素不支持onreadystatechange事件，只支持onload事件<br>IE的 script 元素支持onreadystatechange事件，不支持onload事件</li></ul><blockquote><p>只针对IE readyState 的值  可能为 以下几个 :</p></blockquote><ul><li>“uninitialized” – 原始状态 </li><li>“loading” – 下载数据中..</li><li>“loaded” – 下载完成</li><li>“interactive” – 还未执行完毕.</li><li>“complete” – 脚本执行完毕</li></ul><ul><li><strong>defer和onload函数</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer=<span class="string">'defer'</span> src=<span class="string">"deferjs.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>defer 属性仅适用于外部脚本（只有在使用 src 属性时）</p><ul><li>如果 async=”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）</li><li>如果不使用 async 且 defer=”defer”：脚本将在页面完成解析时执行</li><li>如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本</li></ul></blockquote><h2 id="1-3-结果分析"><a href="#1-3-结果分析" class="headerlink" title="1.3 结果分析"></a>1.3 结果分析</h2><p>在IE7/8打印的结果是：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/domReady1.png" alt=""><br>dom.fireReady函数在onload函数之后执行</p><h2 id="1-4-IE下监控DOM树是否解析完成的其他做法"><a href="#1-4-IE下监控DOM树是否解析完成的其他做法" class="headerlink" title="1.4 IE下监控DOM树是否解析完成的其他做法"></a>1.4 IE下监控DOM树是否解析完成的其他做法</h2><p>除了使用<code>document.write(&quot;&lt;script id=\&quot;ie-domReady\&quot; defer=&#39;defer&#39;src=\&quot;//:\&quot;&gt;&lt;\/script&gt;&quot;)</code>还可以监控DOM树是否解析完成<br>在更早的IE版本中,可以通过每隔一段时间执行一次<code>document.documentElement.doScroll(&quot;left&quot;)来检测这一状态，</code>因为这条代码在DOM加载完毕之前执行时会抛出错误(throw an error)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="comment">//在DOM未建完之前调用元素的doScroll抛出错误</span></span><br><span class="line">        <span class="built_in">document</span>.documentElement.doScroll(<span class="string">'left'</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">//延迟再试</span></span><br><span class="line">        setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">50</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    init(); <span class="comment">//没有错误则执行用户回调</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="2-domReady机制在chrome中"><a href="#2-domReady机制在chrome中" class="headerlink" title="2. domReady机制在chrome中"></a>2. domReady机制在chrome中</h1><p>将上面的demo2.js文件下注释的jquery的ready函数取消注释进行执行，得到结果是：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/domReady2.png" alt=""><br>demo1.html中将script标签放入到<code>&lt;head&gt;</code>得到的结果是一样的。</p><p><strong>在chrome中的顺序是</strong>：</p><ul><li><code>document.readyState</code> 为<code>loading</code><ul><li>jquery的ready函数外 (打印结果：在js中)</li></ul></li><li><code>document.readyState</code> 为<code>interactive</code>【DOM解析完成】<ul><li>带defer的script (打印结果：defer script)</li><li>jquery的ready函数里面 (打印结果：jquery中的ready函数)</li><li>监听DOMContentLoaded要执行的函数 dom.fireReady(打印结果：DOMContentLoaded和我是domReady系列)</li></ul></li><li><code>document.readyState</code> 为<code>compelete</code><ul><li>onload函数（打印结果：onload函数）</li></ul></li></ul><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>1，2区别：</p><ul><li>带defer的script标签，IE8以下中不支持defer属性</li><li>dom.fireReady在IE中的逻辑是在<code>document.readyState==&quot;compelte&quot;</code>后，会在onload函数之后紧接着执行,在chrome/Firfox的逻辑是在<code>document.addEventListener(&quot;DOMContentLoaded&quot;,function(){})</code>的回掉函数中。</li></ul><p>综上所诉，执行的顺序应该为：</p><ul><li><code>document.readyState</code> 为<code>loading</code><ul><li>jquery的ready函数外</li></ul></li><li>【非IE下】<code>document.readyState</code> 为<code>interactive</code>【DOM解析完成】<ul><li>带defer的script</li><li>jquery的ready函数里面 </li><li>触发<code>DOMContentLoaded</code>事件，监听DOMContentLoaded要执行的函数</li></ul></li><li>【IE常用来判断DOM树是否解析完成】document.documentElement.doScroll 这时可以让HTML元素使用doScroll方法，抛出错误就是DOM树未解析完成</li><li><code>document.readyState</code> 为<code>compelete</code><ul><li>onload函数（打印结果：onload函数）【图片flash等资源都加载完毕】</li></ul></li></ul><p>最后附上监测IE，在IE的onload函数后面执行执行的另外一种实现方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://javascript.nwbox.com/IEContentLoaded/</span></span><br><span class="line"><span class="comment">//by Diego Perini 2007.10.5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IEContentLoaded</span>(<span class="params">w, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = w.document||<span class="built_in">document</span>,</span><br><span class="line">        done = <span class="literal">false</span>,</span><br><span class="line">        init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!done) &#123; <span class="comment">//只执行一次</span></span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">//在DOM未建完之前调用元素的doScroll抛出错误</span></span><br><span class="line">            d.documentElement.doScroll(<span class="string">'left'</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">//延迟再试</span></span><br><span class="line">            setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        init(); <span class="comment">//没有错误则执行用户回调</span></span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="comment">// 如果用户是在domReady之后绑定这个函数呢？立即执行它</span></span><br><span class="line">    d.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d.readyState == <span class="string">'complete'</span>) &#123;</span><br><span class="line">            d.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考阅读：</p><ul><li>司徒正美 - 《javascript框架设计》</li><li><a href="http://www.cnblogs.com/rubylouvre/archive/2009/08/26/1554204.html" target="_blank" rel="noopener">司徒正美-javascript的事件加载</a></li><li><a href="http://www.cnblogs.com/JulyZhang/archive/2011/02/12/1952484.html" target="_blank" rel="noopener">主流JS框架中DOMReady事件的实现</a></li><li><a href="http://www.cnblogs.com/rubylouvre/archive/2009/12/30/1635645.html" target="_blank" rel="noopener">javascript的domReady</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState" target="_blank" rel="noopener">document.readyState的属性</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded" target="_blank" rel="noopener">DOMContentLoaded介绍</a></li><li><a href="http://www.cnblogs.com/_franky/archive/2010/06/20/1761370.html" target="_blank" rel="noopener">又说 动态加载 script. ie 下 script Element 的 readyState状态</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> DOMContentLoaded </tag>
            
            <tag> domReady </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端CSS&amp;JS动画总结</title>
      <link href="/2016/11/10/%E5%89%8D%E7%AB%AFCSS&amp;JS%E5%8A%A8%E7%94%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2016/11/10/%E5%89%8D%E7%AB%AFCSS&amp;JS%E5%8A%A8%E7%94%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>使用CSS3，我们可以很方便快捷的改变元素的宽度、高度，方位，角度，透明度等基本信息，但是这些不能满足我们的需求，而且浏览器对于CSS3的兼容性不好，所以这时候就需要拓展更多的js动画。</p><h1 id="1-CSS3动画"><a href="#1-CSS3动画" class="headerlink" title="1.CSS3动画"></a>1.CSS3动画</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS3 动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#taxiway</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 800px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#E8E8FF</span>;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#move</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-id">#move2</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 0px;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#a9ea00</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#move3</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 0px;</span></span><br><span class="line"><span class="undefined">        width: 50px;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#a9ea00</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.animate</span> &#123;</span></span><br><span class="line"><span class="undefined">        animation-duration: 3s;</span></span><br><span class="line"><span class="undefined">        animation-name: slidein;</span></span><br><span class="line"><span class="undefined">        animation-timing-function: ease-in-out;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">animation-iteration-count</span>: 2;        <span class="comment">/* 几次 */</span></span></span><br><span class="line"><span class="undefined">        animation-fill-mode: forwards;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    @<span class="keyword">keyframes</span> slidein &#123;</span></span><br><span class="line"><span class="undefined">        from &#123;</span></span><br><span class="line"><span class="undefined">            left: 0%;</span></span><br><span class="line"><span class="undefined">            background: white;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        to &#123;</span></span><br><span class="line"><span class="undefined">            left: 700px;</span></span><br><span class="line"><span class="undefined">            background: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.animate2</span> &#123;</span></span><br><span class="line"><span class="undefined">        animation-duration: 3s;</span></span><br><span class="line"><span class="undefined">        animation-name: cycle;</span></span><br><span class="line"><span class="undefined">        animation-iteration-count: 2;</span></span><br><span class="line"><span class="undefined">        animation-direction: alternate;</span></span><br><span class="line"><span class="undefined">    &#125;   </span></span><br><span class="line"><span class="css">    @<span class="keyword">keyframes</span> cycle &#123;</span></span><br><span class="line"><span class="undefined">        to &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"taxiway"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"move"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"move2"</span> <span class="attr">class</span>=<span class="string">"animate"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"move3"</span> <span class="attr">class</span>=<span class="string">"animate2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有两个动画，<code>class=&quot;animate&quot;</code>,<code>class=&quot;animate2&quot;</code><br>第一种动画是：从左边（0%）到右边（700px)处，背景颜色从white变成red，并且来回变换两次（<code>animation-iteration-count: 2</code>）；<br>第二种动画是：<code>id=&quot;move3&quot;</code>元素从大小为50px，50px,变为200px,200px</p><h1 id="2-JS动画"><a href="#2-JS动画" class="headerlink" title="2.JS动画"></a>2.JS动画</h1><p>最基础的动画刚开始就是利用<code>setTimeout</code>和<code>setInterval</code>实现的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#taxiway</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 800px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#E8E8FF</span>;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="css">    <span class="selector-id">#move</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 0px;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#a9ea00</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"taxiway"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"move"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"startAnimate.js"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>startAnimate.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'move'</span>);</span><br><span class="line">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">'taxiway'</span>);</span><br><span class="line">    <span class="keyword">var</span> distance = parent.offsetWidth - el.offsetWidth; <span class="comment">//总距离</span></span><br><span class="line">    <span class="keyword">var</span> begin = <span class="built_in">parseFloat</span>(<span class="built_in">window</span>.getComputedStyle(el, <span class="literal">null</span>).left); <span class="comment">//开始位置</span></span><br><span class="line">    <span class="keyword">var</span> end = begin + distance; <span class="comment">//结束位置</span></span><br><span class="line">    <span class="keyword">var</span> fps = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">var</span> interval = <span class="number">1000</span> / fps; <span class="comment">//每隔多少ms刷新一次</span></span><br><span class="line">    <span class="keyword">var</span> duration = <span class="number">2000</span>; <span class="comment">//时长</span></span><br><span class="line">    <span class="keyword">var</span> times = duration / <span class="number">1000</span> * fps; <span class="comment">//一共刷新这么多次</span></span><br><span class="line">    <span class="keyword">var</span> step = distance / times; <span class="comment">//每次移距离</span></span><br><span class="line">    <span class="built_in">console</span>.log(distance, begin, end);</span><br><span class="line"></span><br><span class="line">    el.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        startAnimate(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">startAnimate</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> beginTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> id = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span> - beginTime;</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= duration) &#123;</span><br><span class="line">                el.style.left = end + <span class="string">"px"</span>;</span><br><span class="line">                clearInterval(id);</span><br><span class="line">                <span class="built_in">console</span>.info(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> per = t / duration; <span class="comment">//当前进度  控制per就可以控制加减速</span></span><br><span class="line">                el.style.left = begin + per * distance + <span class="string">"px"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, interval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过控制per的大小变化可以控制加减速，这里我们参照<code>jquery.easing.js</code>的曲线函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bounceOut</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n1 = <span class="number">7.5625</span>,</span><br><span class="line">        d1 = <span class="number">2.75</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> / d1) &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 * x * x;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">2</span> / d1) &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 * (x -= (<span class="number">1.5</span> / d1)) * x + <span class="number">.75</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">2.5</span> / d1) &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 * (x -= (<span class="number">2.25</span> / d1)) * x + <span class="number">.9375</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 * (x -= (<span class="number">2.625</span> / d1)) * x + <span class="number">.984375</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pow = <span class="built_in">Math</span>.pow,</span><br><span class="line">    sqrt = <span class="built_in">Math</span>.sqrt,</span><br><span class="line">    sin = <span class="built_in">Math</span>.sin,</span><br><span class="line">    cos = <span class="built_in">Math</span>.cos,</span><br><span class="line">    PI = <span class="built_in">Math</span>.PI,</span><br><span class="line">    c1 = <span class="number">1.70158</span>,</span><br><span class="line">    c2 = c1 * <span class="number">1.525</span>,</span><br><span class="line">    c3 = c1 + <span class="number">1</span>,</span><br><span class="line">    c4 = (<span class="number">2</span> * PI) / <span class="number">3</span>,</span><br><span class="line">    c5 = (<span class="number">2</span> * PI) / <span class="number">4.5</span>;</span><br><span class="line"><span class="keyword">var</span> easeSetting = &#123;</span><br><span class="line">    liner: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;,</span><br><span class="line">    swing: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> - cos(x * <span class="built_in">Math</span>.PI) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - (<span class="number">1</span> - x) * (<span class="number">1</span> - x);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutQuad: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            <span class="number">2</span> * x * x :</span><br><span class="line">            <span class="number">1</span> - pow(<span class="number">-2</span> * x + <span class="number">2</span>, <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInCubic: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x * x;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutCubic: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - pow(<span class="number">1</span> - x, <span class="number">3</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutCubic: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            <span class="number">4</span> * x * x * x :</span><br><span class="line">            <span class="number">1</span> - pow(<span class="number">-2</span> * x + <span class="number">2</span>, <span class="number">3</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInQuart: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x * x * x;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutQuart: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - pow(<span class="number">1</span> - x, <span class="number">4</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutQuart: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            <span class="number">8</span> * x * x * x * x :</span><br><span class="line">            <span class="number">1</span> - pow(<span class="number">-2</span> * x + <span class="number">2</span>, <span class="number">4</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInQuint: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x * x * x * x;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutQuint: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - pow(<span class="number">1</span> - x, <span class="number">5</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutQuint: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            <span class="number">16</span> * x * x * x * x * x :</span><br><span class="line">            <span class="number">1</span> - pow(<span class="number">-2</span> * x + <span class="number">2</span>, <span class="number">5</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInSine: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - cos(x * PI / <span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutSine: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sin(x * PI / <span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutSine: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -(cos(PI * x) - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInExpo: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x === <span class="number">0</span> ? <span class="number">0</span> : pow(<span class="number">2</span>, <span class="number">10</span> * x - <span class="number">10</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutExpo: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x === <span class="number">1</span> ? <span class="number">1</span> : <span class="number">1</span> - pow(<span class="number">2</span>, <span class="number">-10</span> * x);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutExpo: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x === <span class="number">0</span> ? <span class="number">0</span> : x === <span class="number">1</span> ? <span class="number">1</span> : x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            pow(<span class="number">2</span>, <span class="number">20</span> * x - <span class="number">10</span>) / <span class="number">2</span> :</span><br><span class="line">            (<span class="number">2</span> - pow(<span class="number">2</span>, <span class="number">-20</span> * x + <span class="number">10</span>)) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInCirc: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - sqrt(<span class="number">1</span> - pow(x, <span class="number">2</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutCirc: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(<span class="number">1</span> - pow(x - <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutCirc: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            (<span class="number">1</span> - sqrt(<span class="number">1</span> - pow(<span class="number">2</span> * x, <span class="number">2</span>))) / <span class="number">2</span> :</span><br><span class="line">            (sqrt(<span class="number">1</span> - pow(<span class="number">-2</span> * x + <span class="number">2</span>, <span class="number">2</span>)) + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInElastic: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x === <span class="number">0</span> ? <span class="number">0</span> : x === <span class="number">1</span> ? <span class="number">1</span> :</span><br><span class="line">            -pow(<span class="number">2</span>, <span class="number">10</span> * x - <span class="number">10</span>) * sin((x * <span class="number">10</span> - <span class="number">10.75</span>) * c4);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutElastic: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x === <span class="number">0</span> ? <span class="number">0</span> : x === <span class="number">1</span> ? <span class="number">1</span> :</span><br><span class="line">            pow(<span class="number">2</span>, <span class="number">-10</span> * x) * sin((x * <span class="number">10</span> - <span class="number">0.75</span>) * c4) + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutElastic: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x === <span class="number">0</span> ? <span class="number">0</span> : x === <span class="number">1</span> ? <span class="number">1</span> : x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            -(pow(<span class="number">2</span>, <span class="number">20</span> * x - <span class="number">10</span>) * sin((<span class="number">20</span> * x - <span class="number">11.125</span>) * c5)) / <span class="number">2</span> :</span><br><span class="line">            pow(<span class="number">2</span>, <span class="number">-20</span> * x + <span class="number">10</span>) * sin((<span class="number">20</span> * x - <span class="number">11.125</span>) * c5) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInBack: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c3 * x * x * x - c1 * x * x;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutBack: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + c3 * pow(x - <span class="number">1</span>, <span class="number">3</span>) + c1 * pow(x - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInOutBack: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            (pow(<span class="number">2</span> * x, <span class="number">2</span>) * ((c2 + <span class="number">1</span>) * <span class="number">2</span> * x - c2)) / <span class="number">2</span> :</span><br><span class="line">            (pow(<span class="number">2</span> * x - <span class="number">2</span>, <span class="number">2</span>) * ((c2 + <span class="number">1</span>) * (x * <span class="number">2</span> - <span class="number">2</span>) + c2) + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeInBounce: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - bounceOut(<span class="number">1</span> - x);</span><br><span class="line">    &#125;,</span><br><span class="line">    easeOutBounce: bounceOut,</span><br><span class="line">    easeInOutBounce: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; <span class="number">0.5</span> ?</span><br><span class="line">            (<span class="number">1</span> - bounceOut(<span class="number">1</span> - <span class="number">2</span> * x)) / <span class="number">2</span> :</span><br><span class="line">            (<span class="number">1</span> + bounceOut(<span class="number">2</span> * x - <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用很简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.style.left = begin + easeSetting.easeInOutElastic(per) * distance + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><p>但是使用setInterval或setTimeout定时修改DOM、CSS实现动画比较消耗资源，照成页面比较卡顿，所以我们选择使用<code>requestAnimationFrame</code>得到连贯的逐帧动画。</p><h1 id="3-requestAnimationFrame"><a href="#3-requestAnimationFrame" class="headerlink" title="3.requestAnimationFrame"></a>3.requestAnimationFrame</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> per = (<span class="keyword">new</span> <span class="built_in">Date</span> - startTime) / duration;</span><br><span class="line">    <span class="keyword">var</span> left = begin + easeSetting.easeInOutElastic(per) * distance;</span><br><span class="line">    el.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">    <span class="keyword">if</span> (progress &lt; end) &#123;</span><br><span class="line">        requestAnimationFrame(draw);<span class="comment">//重绘UI</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    startTime = <span class="built_in">window</span>.mozAnimationStartTime || <span class="built_in">Date</span>.now(),</span><br><span class="line">    progress = <span class="number">0</span>;</span><br><span class="line">requestAnimationFrame(draw);</span><br></pre></td></tr></table></figure><p>我们在上面的例子中去兼容所有的浏览器，但是这个还不是很完美，司徒正美给出了几个解决方案，点击<a href="https://github.com/RubyLouvre/jsbook/blob/master/ch14fx.js" target="_blank" rel="noopener">这里</a>进行查看。 <a href="http://blog.csdn.net/whqet/article/details/42911059?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">requestAnimationFrame动画控制详解</a>一文中也提供了几中解决方案，我把支持包括兼容ios6的例子写在这里，以供参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// requestAnimationFrame polyfill by Erik Möller.</span></span><br><span class="line"><span class="comment">// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MIT license</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Date</span>.now)</span><br><span class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); &#125;;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;   </span><br><span class="line">    <span class="keyword">var</span> vendors = [<span class="string">'webkit'</span>, <span class="string">'moz'</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> vp = vendors[i];</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vp+<span class="string">'RequestAnimationFrame'</span>];</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame = (<span class="built_in">window</span>[vp+<span class="string">'CancelAnimationFrame'</span>]</span><br><span class="line">                                   || <span class="built_in">window</span>[vp+<span class="string">'CancelRequestAnimationFrame'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/iP(ad|hone|od).*OS 6/</span>.test(<span class="built_in">window</span>.navigator.userAgent) <span class="comment">// iOS6 is buggy</span></span><br><span class="line">        || !<span class="built_in">window</span>.requestAnimationFrame || !<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">        <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">            <span class="keyword">var</span> nextTime = <span class="built_in">Math</span>.max(lastTime + <span class="number">16</span>, now);</span><br><span class="line">            <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback(lastTime = nextTime); &#125;,</span><br><span class="line">                              nextTime - now);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame = clearTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h1 id="4-动画库简单介绍"><a href="#4-动画库简单介绍" class="headerlink" title="4.动画库简单介绍"></a>4.动画库简单介绍</h1><ul><li>css库 – <a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">animate.css</a><br>使用很简单，写在类名中即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"animate.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"animated infinite bounce"</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js库<a href="http://velocityjs.org/" target="_blank" rel="noopener">velocity.js</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://cdn.bootcss.com/jquery/1.12.4/jquery.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"velocity.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="string">'#move'</span>).velocity(&#123;<span class="attr">opcity</span>: <span class="number">0.5</span>&#125;)</span><br><span class="line">       .delay(<span class="number">1000</span>).velocity(&#123;<span class="attr">left</span>:<span class="string">"+=400px"</span>&#125;)</span><br><span class="line">       .velocity(&#123;<span class="attr">rotateY</span>:<span class="string">"360deg"</span>&#125;,<span class="number">1000</span>)</span><br><span class="line">       .fadeOut(<span class="string">'slow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"fadeout"</span>)</span><br><span class="line">       &#125;);;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>参考阅读：</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651550857&amp;idx=1&amp;sn=60049d0ec60aaa118fdc48691a659f0b&amp;scene=1&amp;srcid=0516KJfJZgtSAwVdmiwUOBGM#rd" target="_blank" rel="noopener">CSS vs JS动画：谁更快？</a></li><li><a href="https://github.com/gdsmith/jquery.easing" target="_blank" rel="noopener">https://github.com/gdsmith/jquery.easing</a></li><li><a href="http://gsgd.co.uk/sandbox/jquery/easing/" target="_blank" rel="noopener">http://gsgd.co.uk/sandbox/jquery/easing/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame–MDN</a></li><li>《司徒正美-javascript框架设计–第十四章 动画引擎》</li><li><a href="http://blog.csdn.net/whqet/article/details/42911059?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">requestAnimationFrame动画控制详解</a></li><li><a href="http://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">CSS3动画那么强，requestAnimationFrame还有毛线用？</a></li><li><a href="http://isux.tencent.com/play-with-html5-animate.html" target="_blank" rel="noopener">玩转HTML5移动页面(动效篇)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> CSS3动画 </tag>
            
            <tag> JS动画 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>写给前端er的TCP/IP知识及《图解TCP/IP》读书笔记</title>
      <link href="/2016/11/08/%E5%86%99%E7%BB%99%E5%89%8D%E7%AB%AFer%E7%9A%84TCP-IP%E7%9F%A5%E8%AF%86%E5%8F%8A%E3%80%8A%E5%9B%BE%E8%A7%A3TCP-IP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/11/08/%E5%86%99%E7%BB%99%E5%89%8D%E7%AB%AFer%E7%9A%84TCP-IP%E7%9F%A5%E8%AF%86%E5%8F%8A%E3%80%8A%E5%9B%BE%E8%A7%A3TCP-IP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-分层"><a href="#1-分层" class="headerlink" title="1.分层"></a>1.分层</h1><p>OSI参考模型分为7层，TCP/IP分为四层。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/1.jpg" alt=""></p><h1 id="2-物理设备介绍"><a href="#2-物理设备介绍" class="headerlink" title="2.物理设备介绍"></a>2.物理设备介绍</h1><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/2.jpg" alt=""></p><h1 id="3-传输过程"><a href="#3-传输过程" class="headerlink" title="3.传输过程"></a>3.传输过程</h1><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/3.jpg" alt=""></p><h1 id="4-分层介绍"><a href="#4-分层介绍" class="headerlink" title="4.分层介绍"></a>4.分层介绍</h1><h2 id="4-1-数据链路层"><a href="#4-1-数据链路层" class="headerlink" title="4.1 数据链路层"></a>4.1 数据链路层</h2><p>几个关键的相关技术</p><ul><li>MAC地址：用于识别数据链路层中互连的节点，在使用网卡（NIC）的情况下，MAC地址会烧入在ROM中<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/4.png" alt=""></li><li>以太网（Ethernet）<br>以太网帧式，前端是前导码部分，后面是帧的本体<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/5.jpg" alt=""><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/6.jpg" alt=""><br>帧尾叫做FCS，用来检测帧信息是否完整</li></ul><h2 id="4-2-网路层"><a href="#4-2-网路层" class="headerlink" title="4.2 网路层"></a>4.2 网路层</h2><h3 id="4-2-1-IP协议–无连接型"><a href="#4-2-1-IP协议–无连接型" class="headerlink" title="4.2.1 IP协议–无连接型"></a>4.2.1 IP协议–无连接型</h3><ul><li><strong>数据链路层和IP层的区别：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/7.jpg" alt=""><h4 id="1-IP地址的分类"><a href="#1-IP地址的分类" class="headerlink" title="1. IP地址的分类"></a>1. <strong>IP地址的分类</strong></h4><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/8.jpg" alt=""><br>A类：0.0.0.0    ~   127.0.0.0      【127为回环测试地址，如127.0.0.0为本机地址】<br>B类：128.0.0.1  ~   191.255.0.0<br>C类：192.0.0.0  ~   233.255.255.0<br>D类：224.0.0.0  ~   239.255.255.0   【用于多播】<h4 id="2-单播、广播、多播"><a href="#2-单播、广播、多播" class="headerlink" title="2. 单播、广播、多播"></a>2. <strong>单播、广播、多播</strong></h4>单播：一对一<br>广播：会被路由器屏蔽<br>【例如：192.168.0.0/24广播地址为192.168.0.255/24】<br>多播：能通过路由器，D类IP地址，从224.0.0.0 ~ 239.255.255.255<br>其中224.0.0.0到224.0.0.255不需要路由控制，在同一个链路中能实现多播。<h4 id="3-解决IP地址有限："><a href="#3-解决IP地址有限：" class="headerlink" title="3. 解决IP地址有限："></a>3. <strong>解决IP地址有限：</strong></h4><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/9.jpg" alt=""><br>标识方法：<br><strong>方法1：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/10.jpg" alt=""><br><strong>方法2：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/11.jpg" alt=""><h4 id="4-IP分片："><a href="#4-IP分片：" class="headerlink" title="4. IP分片："></a>4. <strong>IP分片：</strong></h4>数据链路不同，最大的传输单元（MTU）不同，所以需要对IP分片进行处理。分片只能在目标主机中进行重组。</li><li><strong>ICMP通知MTU大小</strong><br>路径MTU发现机制（UDP情况下）<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/12.png" alt=""><br>路径MTU发现机制（TCP情况下）不同于上<h4 id="5-IPv6"><a href="#5-IPv6" class="headerlink" title="5. IPv6"></a>5. <strong>IPv6</strong></h4>IP地址长度为128位，以每18比特为一组进行标记，如果出现连续的0，用“::”代替</li><li><strong>IPv6地址结构：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/13.png" alt=""><br>全局单播地址是世界上唯一的地址<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/14.png" alt=""><h4 id="6-IPv4首部"><a href="#6-IPv4首部" class="headerlink" title="6. IPv4首部"></a>6. <strong>IPv4首部</strong></h4>IP首部+IP载荷（数据）组成：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/16.png" alt=""><h4 id="7-IPv6首部"><a href="#7-IPv6首部" class="headerlink" title="7. IPv6首部"></a>7. <strong>IPv6首部</strong></h4><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/17.png" alt=""></li></ul><h3 id="4-2-2-IP协议相关技术"><a href="#4-2-2-IP协议相关技术" class="headerlink" title="4.2.2 IP协议相关技术"></a>4.2.2 IP协议相关技术</h3><h4 id="1-DNS"><a href="#1-DNS" class="headerlink" title="1. DNS"></a>1. DNS</h4><p>管理主机名和IP地址之间对应关系的系统，叫做DNS系统。</p><ul><li><strong>DNS查询：</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/18.png" alt=""><br>第三步 会将IP地址信息暂时保存到缓存中，减少每次查询时的性能消耗。<br>DNS的主要记录包括很多类型的数据，比如类型A值主机名的IP地址，PTR指IP地址的反向解析，即IP地址检索的主机名。<h4 id="2-ARP"><a href="#2-ARP" class="headerlink" title="2. ARP"></a>2. ARP</h4>IP地址到Mac地址解析<h4 id="3-ICMP"><a href="#3-ICMP" class="headerlink" title="3.ICMP"></a>3.ICMP</h4>主要功能是确认IP包是否成功送达目的地址，通知在发送过程当中IP包被废弃的原因，改善网络的设置等。<h4 id="4-DHCP"><a href="#4-DHCP" class="headerlink" title="4.DHCP"></a>4.DHCP</h4>动态设置ip地址</li></ul><h2 id="4-3-TCP-UDP"><a href="#4-3-TCP-UDP" class="headerlink" title="4.3 TCP/UDP"></a>4.3 TCP/UDP</h2><ul><li>TCP首部格式<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/19.jpg" alt=""></li><li>三次握手<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/20.jpg" alt=""></li><li>识别多个请求<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/21.jpg" alt=""></li><li>套接口<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/22.jpg" alt=""></li></ul><h2 id="4-4-应用层"><a href="#4-4-应用层" class="headerlink" title="4.4 应用层"></a>4.4 应用层</h2><p>应用层有SSH，FTP，HTTP，TLS/SSL等</p><ul><li>ftp使用两条TCP连接<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/23.jpg" alt=""></li><li>javascript，CGI<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/tcp-ip/24.jpg" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP/TCP/IP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> 图解TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Router的一个完整示例</title>
      <link href="/2016/11/04/React%20Router%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B/"/>
      <url>/2016/11/04/React%20Router%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>本博文提供一个单网页结构网页（SPA）使用React Router路由控制跳转的完整例子。</p><blockquote><p>可以在我的<a href="https://github.com/zrysmt/react-demo/tree/master/demo03" target="_blank" rel="noopener">github</a> 中clone或者fork<br>  <a href="https://github.com/zrysmt/react-demo/tree/master/demo03" target="_blank" rel="noopener">https://github.com/zrysmt/react-demo/tree/master/demo03</a></p></blockquote><p>关于配置可以查看我之前的一篇博客：<a href="https://zrysmt.github.io/2016/10/31/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E8%BF%9B%E5%85%A5React%E7%9A%84%E4%B8%96%E7%95%8C%EF%BC%88React+Webpack+ES6%E7%BB%84%E5%90%88%EF%BC%89/">一步一步进入React的世界（React+Webpack+ES6组合配置）</a>。</p><h1 id="1-整个目录结构"><a href="#1-整个目录结构" class="headerlink" title="1.整个目录结构"></a>1.整个目录结构</h1><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/react/1.png" alt=""></p><ul><li>build是编译后的文件夹</li><li>src 放入源码<ul><li>components组件<ul><li>global 通用组件和SCSS</li><li>… 分模块</li></ul></li><li>app.js入口</li></ul></li><li>index.html </li></ul><h1 id="2-源码"><a href="#2-源码" class="headerlink" title="2.源码"></a>2.源码</h1><p>关于源码可以在开头给出的github中找到详细的完整例子，这里就介绍重要的几个文件源码<br>记住要安装react-router</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-router -S</span><br></pre></td></tr></table></figure><h2 id="2-1-index-html"><a href="#2-1-index-html" class="headerlink" title="2.1 index.html"></a>2.1 index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Our Home,Our Heart<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale = 1.0,user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-入口文件app-js"><a href="#2-2-入口文件app-js" class="headerlink" title="2.2 入口文件app.js"></a>2.2 入口文件app.js</h2><p>关于react router的基础知识我们可以参考阮一峰老师的博客作为入门指导。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Router,Route,IndexRoute,hashHistory&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./components/global/global.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Nav <span class="keyword">from</span> <span class="string">'./components/global/menu'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/home/home'</span>;</span><br><span class="line"><span class="keyword">import</span> Story <span class="keyword">from</span> <span class="string">'./components/story/story'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Nav/&gt;</span><br><span class="line">&#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render((</span></span><br><span class="line"><span class="regexp">&lt;Router history=&#123;hashHistory&#125;&gt;</span></span><br><span class="line"><span class="regexp">&lt;Route path="/</span><span class="string">" component=&#123;App&#125;&gt;</span></span><br><span class="line"><span class="string">&lt;IndexRoute component=&#123;Home&#125;/&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="</span>/Story<span class="string">" component=&#123;Story&#125;/&gt;</span></span><br><span class="line"><span class="string">&lt;/Route&gt;</span></span><br><span class="line"><span class="string">&lt;/Router&gt;</span></span><br><span class="line"><span class="string">),document.body</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><p><strong>简单解释下:</strong><br>组件App除了包含Nav组件，还应该包括主体内容<br>当使用index.html访问的时候，是在项目根目录下，这样会先加载APP组件，APP组件包含<code>{this.props.children}</code>，便会加载<code>&lt;IndexRoute/&gt;</code>里面定义的组件Home。用户访问’/‘相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;Nav/&gt;</span><br><span class="line">  &lt;Home/&gt;</span><br><span class="line">&lt;/App&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-Nav组件"><a href="#2-3-Nav组件" class="headerlink" title="2.3 Nav组件"></a>2.3 Nav组件</h2><p>/components/global/menuLi.jsx<br>/components/global/menu.jsx</p><ul><li>最小一块组件menuLi.jsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Link&#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuLi</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">let</span> linkTo = <span class="keyword">this</span>.props.name ==<span class="string">"Home"</span>?<span class="string">"/"</span>:<span class="string">"/"</span>+<span class="keyword">this</span>.props.name;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;Link to=&#123;linkTo&#125;&gt;</span><br><span class="line">&#123;<span class="keyword">this</span>.props.name&#125;</span><br><span class="line">&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>li&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MenuLi;</span><br></pre></td></tr></table></figure><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击后跳转到另一个路由</p><ul><li>Nav组件 menu.jsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> MenuLi <span class="keyword">from</span> <span class="string">'./menuLi'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./menu.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> menuLis = [<span class="string">"Home"</span>,<span class="string">"Story"</span>,<span class="string">"Travel"</span>,<span class="string">"TimeLine"</span>,<span class="string">"Future"</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuUl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">menuLis.map(<span class="function"><span class="keyword">function</span>(<span class="params">menuLi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MenuLi</span> <span class="attr">name</span>=<span class="string">&#123;menuLi&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nav</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">&lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">&lt;MenuUl/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Nav;</span><br></pre></td></tr></table></figure><h2 id="2-4-Home组件"><a href="#2-4-Home组件" class="headerlink" title="2.4 Home组件"></a>2.4 Home组件</h2><p>/components/home/home.jsx,示例比较简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./home.scss"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;h5&gt;这是home&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-Story组件"><a href="#2-5-Story组件" class="headerlink" title="2.5 Story组件"></a>2.5 Story组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./story.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Story</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;h5&gt;这是story&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Story;</span></span><br></pre></td></tr></table></figure><p>其余几个组件不一一列出了</p><blockquote><p>可以在我的<a href="https://github.com/zrysmt/react-demo/tree/master/demo03" target="_blank" rel="noopener">github</a> 中clone或者fork,查看完整的例子代码</p></blockquote><p>参考阅读:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu" target="_blank" rel="noopener">React Router 使用教程–阮一峰</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动手DIY一个underscorejs库及underscorejs源码分析3</title>
      <link href="/2016/10/26/%E5%8A%A8%E6%89%8BDIY%E4%B8%80%E4%B8%AAunderscorejs%E5%BA%93%E5%8F%8Aunderscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903/"/>
      <url>/2016/10/26/%E5%8A%A8%E6%89%8BDIY%E4%B8%80%E4%B8%AAunderscorejs%E5%BA%93%E5%8F%8Aunderscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">github</a>上,例子是demo6.html，DIY/4/_underscore.js.欢迎fork，star。<br><a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-underscorejs</a></p></blockquote><p>这一部分来DIY两个经常被使用的函数（或者说分析其源码），分别是throttle(节流函数)和debounce(防反跳函数)。</p><p>这两个函数特别适合一些场景：事件频繁被触发，会导致频繁执行DOM的操作，如下：</p><ul><li>window对象的resize、scroll事件</li><li>拖拽时候的mousemove事件</li><li>mousedown、keydown事件</li><li>文字输入、自动完成的keyup事件</li></ul><h1 id="1-throttle节流函数"><a href="#1-throttle节流函数" class="headerlink" title="1.throttle节流函数"></a>1.throttle节流函数</h1><p>创建并返回一个像节流阀一样的函数，当重复调用函数的时候，最多每隔 <strong>wait</strong>毫秒调用一次该函数。对于想控制一些触发频率较高的事件有帮助。</p><p>默认情况下，<strong>throttle</strong>将在你调用的第一时间尽快执行这个<strong>function</strong>，并且，如果你在<strong>wait</strong>周期内调用任意次数的函数，都将尽快的被覆盖。如果你想禁用第一次首先执行的话，传递{leading: false}，还有如果你想禁用最后一次执行的话，传递{trailing: false}。</p><p>也许你还没完全看懂，我们来做个demo测试下。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    创建并返回一个像节流阀一样的函数，当重复调用函数的时候，最多每隔 wait毫秒调用一次该函数。对于想控制一些触发频率较高的事件有帮助。（注：详见：javascript函数的throttle和debounce） 默认情况下，throttle将在你调用的第一时间尽快执行这个function，并且，如果你在wait周期内调用任意次数的函数，都将尽快的被覆盖。如果你想禁用第一次首先执行的话，传递&#123;leading: false&#125;，还有如果你想禁用最后一次执行的话，传递&#123;trailing: false&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">updatePosition</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#div1'</span>).height(), $(<span class="string">'#div1'</span>).width());</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//不带options即第三个参数的时候(默认情况下)，会执行两次，一次是执行时候的状态(A) ，一次是执行后的状态(B)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#123;leading: false &#125;不会执行第一次执行时的状态(A)</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#123;trailing: false&#125;不会执行最后一次执行后的状态(B)</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> throttled = _.throttle(updatePosition, <span class="number">1000</span></span></span><br><span class="line"><span class="undefined">    /*,&#123;</span></span><br><span class="line"><span class="javascript">        leading: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        trailing: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">    &#125;*/</span></span><br><span class="line"><span class="undefined">);</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">window</span>).resize(throttled);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们先看结果，后看下部分的源码实现。</p><ul><li>1.只拉动一次窗口，会响应两次<code>updatePosition</code>，分别对应状态A、B，示例Demo中有详细说明解释第三个参数。</li></ul><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/throttle1.gif" alt=""></p><ul><li>2.多次拉动窗口，第一次会立即响应，拖动比较快的时候，只会隔大概1000ms（自己设置的时间，默认100ms）响应一次。</li></ul><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/throttle2.gif" alt=""><br>源码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, context, args, result;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = _.now();<span class="comment">//加入_.now()，这里不在单说，相见开头处提供的github地址。</span></span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now; <span class="comment">//禁止第一次执行(A) remaining = wait - 0 = wait &gt; 0 的话不会执行A</span></span><br><span class="line">        <span class="comment">//不禁止第一次执行A的时候,previous = 0,现在时间now &gt;= wait,就是过了wait等待时间 </span></span><br><span class="line">        <span class="keyword">var</span> remaining = wait - (now - previous); <span class="comment">//remaining 第一次为&lt; 0</span></span><br><span class="line">        <span class="built_in">console</span>.warn(wait, now, remaining);</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="comment">//按理来说remaining &lt;= 0已经足够证明已经到达wait的时间间隔，但这里还考虑到假如客户端修改了系统时间则马上执行func函数（remaining &gt; wait）</span></span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            result = func.apply(context, args); <span class="comment">//第一次执行A</span></span><br><span class="line">            <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123; <span class="comment">//不会禁用第二次执行(B)</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"============第二次==============="</span>);</span><br><span class="line">            timeout = setTimeout(later, remaining); <span class="comment">//第二次执行(B)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    throttled.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        previous = <span class="number">0</span>;</span><br><span class="line">        timeout = context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="2-debounce-防反跳函数"><a href="#2-debounce-防反跳函数" class="headerlink" title="2.debounce 防反跳函数"></a>2.debounce 防反跳函数</h1><p>返回 <strong>function</strong> 函数的防反跳版本, 将延迟函数的执行(真正的执行)在函数最后一次调用时刻的 <strong>wait</strong> 毫秒之后. 对于必须在一些输入（多是一些用户操作）停止到达_之后_执行的行为有帮助。 例如: 渲染一个Markdown格式的评论预览, 当窗口停止改变大小之后重新计算布局, 等等.</p><p>传参 <strong>immediate</strong> 为 true， <strong>debounce</strong>会在 <strong>wait</strong> 时间间隔的开始调用这个函数 。<br>示例Demo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = _.debounce(updatePosition, <span class="number">1000</span>);</span><br><span class="line">$(<span class="built_in">window</span>).resize(debounce);</span><br></pre></td></tr></table></figure></p><ul><li>只会在停止操作后1000ms(自己设置的)执行</li></ul><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/debounce1.gif" alt=""></p><ul><li>加入第三个参数，会在操作的同时执行</li></ul><p><code>var debounce = _.debounce(updatePosition, 1000,true);</code><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/debounce2.gif" alt=""><br>首先一个使用的工具函数,不在这里详细说明了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> _.delay = restArgs(<span class="function"><span class="keyword">function</span>(<span class="params">func, wait, args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> func.apply(<span class="literal">null</span>, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line"><span class="keyword">var</span> restArgs = <span class="function"><span class="keyword">function</span>(<span class="params">func, startIndex</span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line">_.restArgs = restArgs;</span><br></pre></td></tr></table></figure></p><p>源码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//immediate默认为false</span></span><br><span class="line"><span class="comment">//只在最后一次关闭的时候，延迟后执行一次</span></span><br><span class="line">_.debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (args) result = func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    restArgs = _.restArgs; <span class="comment">//增加</span></span><br><span class="line">    <span class="keyword">var</span> debounced = restArgs(<span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line">        <span class="comment">//控制timeout，一直拖动的时候会清除timeout，这样中间就不会执行了</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;<span class="comment">//immediate为true立刻执行</span></span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">            timeout = setTimeout(later, wait);</span><br><span class="line">            <span class="keyword">if</span> (callNow) result = func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = _.delay(later, wait, <span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>好了就简单介绍到这里</p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">github</a>上,例子是demo6.html，DIY/4/_underscore.js.欢迎fork，star。<br><a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">https://github.com/zrysmt/DIY-underscorejs</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> underscorejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动手DIY一个underscorejs库及underscorejs源码分析2</title>
      <link href="/2016/10/26/%E5%8A%A8%E6%89%8BDIY%E4%B8%80%E4%B8%AAunderscorejs%E5%BA%93%E5%8F%8Aunderscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/"/>
      <url>/2016/10/26/%E5%8A%A8%E6%89%8BDIY%E4%B8%80%E4%B8%AAunderscorejs%E5%BA%93%E5%8F%8Aunderscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/</url>
      
        <content type="html"><![CDATA[<p>接着第一篇《动手DIY一个underscorejs库及underscorejs源码分析1》</p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">github</a>上。</p></blockquote><h1 id="1-兼容requirejs和seajs模块化"><a href="#1-兼容requirejs和seajs模块化" class="headerlink" title="1.兼容requirejs和seajs模块化"></a>1.兼容requirejs和seajs模块化</h1><ul><li>requirejs<br>在代码的尾部加上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define == <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">//定义一个模块并且起个名字</span></span><br><span class="line">    define(<span class="string">'_underscore'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用测试：<a href="https://github.com/zrysmt/DIY-underscorejs/tree/master/demo" target="_blank" rel="noopener">代码请点我</a><br>demo3.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"demo3"</span> <span class="attr">src</span>=<span class="string">"lib/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>demo3.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">'../DIY/2/_underscore'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(_);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>加上支持seajs的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define == <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    define(<span class="string">'_underscore'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define == <span class="string">'function'</span> &amp;&amp; define.cmd) &#123; <span class="comment">//seajs</span></span><br><span class="line">    define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = _;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：<br>demo2.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"lib/sea-debug.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    seajs.use(<span class="string">'./demo2'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>demo2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'../DIY/2/_underscore'</span>);</span><br><span class="line">    <span class="built_in">console</span>.info(_);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-支持nodejs"><a href="#2-支持nodejs" class="headerlink" title="2.支持nodejs"></a>2.支持nodejs</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root._ = _;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> exports != <span class="string">'undefined'</span> &amp;&amp; !exports.nodeType) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> != <span class="string">'undefined'</span> &amp;&amp; !<span class="built_in">module</span>.nodeType &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    exports = <span class="built_in">module</span>.exports = _;</span><br><span class="line">  &#125;</span><br><span class="line">  exports._ = _;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  root._ = _;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-extend"><a href="#3-extend" class="headerlink" title="3._.extend"></a>3.<code>_.extend</code></h1><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(_.extend(&#123;<span class="attr">name</span>: <span class="string">'moe'</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">50</span>&#125;));</span><br><span class="line"><span class="comment">//结果Object &#123;name: "moe", age: 50&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似与_.keys</span></span><br><span class="line">_.allKeys = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_.isObject(obj)) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">var</span> keys = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) keys.push(key);</span><br><span class="line">    <span class="comment">// Ahem, IE &lt; 9.</span></span><br><span class="line">    <span class="comment">// if (hasEnumBug) collectNonEnumProps(obj, keys);</span></span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createAssigner = <span class="function"><span class="keyword">function</span>(<span class="params">keysFunc, defaults</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="built_in">arguments</span>.length;</span><br><span class="line">        <span class="keyword">if</span> (defaults) obj = <span class="built_in">Object</span>(obj);</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">2</span> || obj == <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; length; index++) &#123;</span><br><span class="line">            <span class="keyword">var</span> source = <span class="built_in">arguments</span>[index],</span><br><span class="line">                keys = keysFunc(source),</span><br><span class="line">                l = keys.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> key = keys[i];</span><br><span class="line">                <span class="keyword">if</span> (!defaults || obj[key] === <span class="keyword">void</span> <span class="number">0</span>) obj[key] = source[key];</span><br><span class="line">        <span class="comment">//将参数（对象）放入到obj组合到一起</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">_.extend = createAssigner(_.allKeys);</span><br><span class="line">_.extendOwn = _.assign = createAssigner(_.keys);</span><br></pre></td></tr></table></figure><h1 id="4-重要内部函数cb"><a href="#4-重要内部函数cb" class="headerlink" title="4.重要内部函数cb"></a>4.重要内部函数<code>cb</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builtinIteratee;</span><br><span class="line"><span class="comment">//如果是函数则返回上面说到的回调函数；</span></span><br><span class="line"><span class="comment">//如果是对象则返回一个能判断对象是否相等的函数；</span></span><br><span class="line"><span class="comment">//默认返回一个获取对象属性的函数</span></span><br><span class="line"><span class="keyword">var</span> cb = <span class="function"><span class="keyword">function</span>(<span class="params">value, context, argCount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_.iteratee !== builtinIteratee) <span class="keyword">return</span> _.iteratee(value, context);</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="keyword">return</span> _.identity; <span class="comment">//默认的迭代器</span></span><br><span class="line">    <span class="keyword">if</span> (_.isFunction(value)) <span class="keyword">return</span> optimizeCb(value, context, argCount);</span><br><span class="line">    <span class="keyword">if</span> (_.isObject(value)) <span class="keyword">return</span> _.matcher(value);</span><br><span class="line">    <span class="keyword">return</span> _.property(value);</span><br><span class="line">&#125;;</span><br><span class="line">_.iteratee = builtinIteratee = <span class="function"><span class="keyword">function</span>(<span class="params">value, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cb(value, context, <span class="literal">Infinity</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-1-identity"><a href="#4-1-identity" class="headerlink" title="4.1 _.identity"></a>4.1 <code>_.identity</code></h2><p>很简单但是是默认的迭代器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_.identity = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>测试很简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'zry'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj1 === _.identity(obj1));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h2 id="4-2-matcher"><a href="#4-2-matcher" class="headerlink" title="4.2 _.matcher"></a>4.2 <code>_.matcher</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_.matcher = _.matches = <span class="function"><span class="keyword">function</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    attrs = _.extendOwn(&#123;&#125;, attrs);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _.isMatch(obj, attrs);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//两个对象是不是全等于。给定的对象是否匹配attrs指定键/值属性</span></span><br><span class="line">_.isMatch = <span class="function"><span class="keyword">function</span>(<span class="params">object, attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = _.keys(attrs),</span><br><span class="line">        length = keys.length;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="literal">null</span>) <span class="keyword">return</span> !length;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Object</span>(object);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> key = keys[i];</span><br><span class="line">        <span class="keyword">if</span> (attrs[key] !== obj[key] || !(key <span class="keyword">in</span> obj)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">selected</span>: <span class="literal">true</span>, <span class="attr">visible</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> ready = _.isMatch(obj2,&#123;<span class="attr">selected</span>: <span class="literal">true</span>, <span class="attr">visible</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">//返回一个断言函数，这个函数会给你一个断言 可以用来辨别 </span></span><br><span class="line"><span class="comment">//给定的对象是否匹配attrs指定键/值属性</span></span><br><span class="line"><span class="built_in">console</span>.log(ready);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="4-3-property"><a href="#4-3-property" class="headerlink" title="4.3 _.property"></a>4.3 <code>_.property</code></h2><p>property函数在第一篇博客中已经实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.property = property;</span><br></pre></td></tr></table></figure></p><h1 id="5-map"><a href="#5-map" class="headerlink" title="5._.map"></a>5.<code>_.map</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_.map = _.collect = <span class="function"><span class="keyword">function</span>(<span class="params">obj, iteratee, context</span>) </span>&#123;</span><br><span class="line">    iteratee = cb(iteratee, context);</span><br><span class="line">    <span class="keyword">var</span> keys = !isArrayLike(obj) &amp;&amp; _.keys(obj),</span><br><span class="line">        length = (keys || obj).length,</span><br><span class="line">        results = <span class="built_in">Array</span>(length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentKey = keys ? keys[index] : index;</span><br><span class="line">        results[index] = iteratee(obj[currentKey], currentKey, obj);</span><br><span class="line">        <span class="comment">//返回的是（value，key，obj）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="6-filter"><a href="#6-filter" class="headerlink" title="6._.filter"></a>6.<code>_.filter</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_.filter = _.select = <span class="function"><span class="keyword">function</span>(<span class="params">obj, predicate, context</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> results = [];</span><br><span class="line">    predicate = cb(predicate, context);</span><br><span class="line">    _.each(obj, <span class="function"><span class="keyword">function</span>(<span class="params">value, index, list</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate(value, index, list)) results.push(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> evens = _.filter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123; <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span>; &#125;);<span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure></p><h1 id="7-两个常用的工具函数-escape-unescape"><a href="#7-两个常用的工具函数-escape-unescape" class="headerlink" title="7.两个常用的工具函数_.escape,_.unescape`"></a>7.两个常用的工具函数<code>_.escape</code>,_.unescape`</h1><h2 id="7-1-escape"><a href="#7-1-escape" class="headerlink" title="7.1 _.escape"></a>7.1 <code>_.escape</code></h2><p>要过滤的字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> escapeMap = &#123;</span><br><span class="line">    <span class="string">'&amp;'</span>: <span class="string">'&amp;amp;'</span>,</span><br><span class="line">    <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>,</span><br><span class="line">    <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>,</span><br><span class="line">    <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>,</span><br><span class="line">    <span class="string">"'"</span>: <span class="string">'&amp;#x27;'</span>,</span><br><span class="line">    <span class="string">'`'</span>: <span class="string">'&amp;#x60;'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>主函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createEscaper = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> escaper = <span class="function"><span class="keyword">function</span>(<span class="params">match</span>) </span>&#123;<span class="comment">//match 匹配的子串</span></span><br><span class="line">        <span class="keyword">return</span> map[match];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> source = <span class="string">'(?:'</span> + _.keys(map).join(<span class="string">'|'</span>) + <span class="string">')'</span>;</span><br><span class="line">    <span class="keyword">var</span> testRegexp = <span class="built_in">RegExp</span>(source);</span><br><span class="line">    <span class="keyword">var</span> replaceRegexp = <span class="built_in">RegExp</span>(source, <span class="string">'g'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">        string = string == <span class="literal">null</span> ? <span class="string">''</span> : <span class="string">''</span> + string;</span><br><span class="line">        <span class="keyword">return</span> testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意值了的<code>string.replace</code>函数第二个参数是个函数，那么返回的数据第一个是match（匹配的子串）</p><table><thead><tr><th>变量名</th><th style="text-align:center">代表的值</th></tr></thead><tbody><tr><td>match</td><td style="text-align:center">匹配的子串。（对应于上述的$&amp;。）</td></tr><tr><td>p1,p2, …</td><td style="text-align:center">假如replace()方法的第一个参数是一个<code>RegExp</code>对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）</td></tr><tr><td>offset</td><td style="text-align:center">匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串时“bc”，那么这个参数将是1）</td></tr><tr><td>string</td><td style="text-align:center">被匹配的原字符串。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.escape = createEscaper(escapeMap);</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(_.escape(<span class="string">'Curly, Larry &amp; Moe'</span>)<span class="comment">//Curly, Larry &amp;amp; Moe</span></span><br></pre></td></tr></table></figure></p><h2 id="7-2-unescape"><a href="#7-2-unescape" class="headerlink" title="7.2 _.unescape"></a>7.2 <code>_.unescape</code></h2><p>反转要过滤的字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_.invert = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> keys = _.keys(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = keys.length; i &lt; length; i++) &#123;</span><br><span class="line">        result[obj[keys[i]]] = keys[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> unescapeMap = _.invert(escapeMap);</span><br><span class="line">_.unescape = createEscaper(unescapeMap);</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(_.unescape(<span class="string">'Curly, Larry &amp;amp; Moe'</span>));<span class="comment">//Curly, Larry &amp; Moe</span></span><br></pre></td></tr></table></figure></p><p><strong>参考阅读：</strong></p><ul><li><a href="http://underscorejs.org/" target="_blank" rel="noopener">http://underscorejs.org/</a></li><li><a href="http://www.bootcss.com/p/underscore/" target="_blank" rel="noopener">underscorejs中文：http://www.bootcss.com/p/underscore/</a></li><li><a href="http://blog.fens.me/nodejs-underscore/" target="_blank" rel="noopener">UnderscoreJS精巧而强大工具包</a></li><li><a href="http://www.imooc.com/article/1566" target="_blank" rel="noopener">JS高手进阶之路：underscore源码经典</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> underscorejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动手DIY一个underscorejs库及underscorejs源码分析1</title>
      <link href="/2016/10/26/%E5%8A%A8%E6%89%8BDIY%E4%B8%80%E4%B8%AAunderscorejs%E5%BA%93%E5%8F%8Aunderscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
      <url>/2016/10/26/%E5%8A%A8%E6%89%8BDIY%E4%B8%80%E4%B8%AAunderscorejs%E5%BA%93%E5%8F%8Aunderscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/</url>
      
        <content type="html"><![CDATA[<p><a href="http://github.com/jashkenas/underscore/" target="_blank" rel="noopener">Underscore</a> 是一个 JavaScript 工具库,它提供一整套函数编程的实用功能。他弥补了 <a href="http://jquery.com/" target="_blank" rel="noopener">jQuery</a> 没有实现的功能，同时又是<a href="http://backbonejs.org/" target="_blank" rel="noopener">Backbone</a> 必不可少的部分。</p><p><code>underscore.js</code>源码加上注释也就1千多行，用<code>underscore.js</code>作为阅读源码的开始是一个不错的开始，当然阅读源码的同时，手也不能停下来。下面我会写几篇博客，一边分析源码，一边根据源码重新DIY一份（_underscore.js），基于版本：<code>1.8.3</code>。</p><p><code>underscore.js</code>分为集合（Collections）、数组（Arrays）、函数（Functions）、对象（Objects）、工具函数（Utility）五大部分。</p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">github</a>上。</p></blockquote><h1 id="1-简单的应用Demo"><a href="#1-简单的应用Demo" class="headerlink" title="1.简单的应用Demo"></a>1.简单的应用Demo</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;underscore.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- &lt;script src=&quot;../DIY/1/_underscore.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">console.info(_);</span><br><span class="line">console.info(_.prototype);</span><br><span class="line">/**</span><br><span class="line"> * 数组处理</span><br><span class="line"> */</span><br><span class="line">_.each([1, 2, 3], function(ele,idx) &#123;</span><br><span class="line">    console.log(idx + &quot; : &quot; +ele);</span><br><span class="line">&#125;);</span><br><span class="line">_.each([1, 2, 3], console.log);</span><br><span class="line">_.each(&#123;one: 1, two: 2, three: 3&#125;, console.log);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打印结果：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/1-1.png" alt=""><br>展开<code>console.info(_.prototype);</code>打印的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ Object</span><br><span class="line">  //... ...</span><br><span class="line">  - ()each: </span><br><span class="line">  - ()escape: </span><br><span class="line">  - ()every: </span><br><span class="line">  - ()extend: </span><br><span class="line">  //... ...</span><br><span class="line">__proto__: Object</span><br></pre></td></tr></table></figure></p><h1 id="2-从-each-开始"><a href="#2-从-each-开始" class="headerlink" title="2.从_.each()开始"></a>2.从<code>_.each()</code>开始</h1><h2 id="2-1-整体结构：IIFE"><a href="#2-1-整体结构：IIFE" class="headerlink" title="2.1 整体结构：IIFE"></a>2.1 整体结构：IIFE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> &#125;()）</span><br></pre></td></tr></table></figure><h2 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化_"></a>2.2 初始化<code>_</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在浏览器上是window(self),服务器上是global</span></span><br><span class="line"><span class="keyword">var</span> root = <span class="keyword">typeof</span> self == <span class="string">'object'</span> &amp;&amp; self.self === self &amp;&amp; self ||</span><br><span class="line">    <span class="keyword">typeof</span> global == <span class="string">'object'</span> &amp;&amp; global.global === global &amp;&amp; global ||</span><br><span class="line">    <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//形式：_([1, 2, 3]).each(function(ele) &#123;&#125;);会执行下面的</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> _)) <span class="keyword">return</span> <span class="keyword">new</span> _(obj);</span><br><span class="line">    <span class="keyword">this</span>._wrapped = obj;  <span class="comment">//存放数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//形式：_.each([1, 2, 3], function(ele, idx) &#123; &#125;);不会执行上面的函数，而是直接通过全局的_,寻找定义在_或者其原型上的方法</span></span><br><span class="line">root._ = _;</span><br></pre></td></tr></table></figure><h2 id="2-3-两个类型isObject-isArrayLike判断"><a href="#2-3-两个类型isObject-isArrayLike判断" class="headerlink" title="2.3 两个类型isObject,isArrayLike判断"></a>2.3 两个类型<code>isObject</code>,<code>isArrayLike</code>判断</h2><p>为了压缩我们把常用的方法/属性独立写成变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ArrayProto = <span class="built_in">Array</span>.prototype,</span><br><span class="line">    ObjProto = <span class="built_in">Object</span>.prototype;</span><br><span class="line"><span class="keyword">var</span> push = ArrayProto.push,</span><br><span class="line">    toString = ObjProto.toString,</span><br><span class="line">    hasOwnProperty = ObjProto.hasOwnProperty;</span><br><span class="line"><span class="keyword">var</span> nativeIsArray = <span class="built_in">Array</span>.isArray,</span><br><span class="line">    nativeKeys = <span class="built_in">Object</span>.keys;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是不是对象/函数</span></span><br><span class="line">_.isObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line">    <span class="keyword">return</span> type === <span class="string">'function'</span> || type === <span class="string">'object'</span> &amp;&amp; !!obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//属性中是否有key</span></span><br><span class="line"><span class="keyword">var</span> property = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="keyword">void</span> <span class="number">0</span> : obj[key];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MAX_ARRAY_INDEX = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> getLength = property(<span class="string">'length'</span>);</span><br><span class="line"><span class="keyword">var</span> isArrayLike = <span class="function"><span class="keyword">function</span>(<span class="params">collection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = getLength(collection);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> length == <span class="string">'number'</span> &amp;&amp; length &gt;= <span class="number">0</span> &amp;&amp; length &lt;= MAX_ARRAY_INDEX;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-4-上下文绑定"><a href="#2-4-上下文绑定" class="headerlink" title="2.4 上下文绑定"></a>2.4 上下文绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optimizeCb = <span class="function"><span class="keyword">function</span>(<span class="params">func, context, argCount</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//void 0 === undefined 返回ture</span></span><br><span class="line">    <span class="keyword">if</span> (context === <span class="keyword">void</span> <span class="number">0</span>) <span class="keyword">return</span> func;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-5-each方法"><a href="#2-5-each方法" class="headerlink" title="2.5 each方法"></a>2.5 each方法</h2><p>一个简单的版本属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_.VERSION = <span class="string">'0.0.1'</span>;</span><br></pre></td></tr></table></figure></p><p><code>_.each</code>需要<code>_.keys</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> _.each = _.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">obj, iteratee, context</span>) </span>&#123;</span><br><span class="line">    iteratee = optimizeCb(iteratee, context);</span><br><span class="line">    <span class="keyword">var</span> i, length;</span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(obj)) &#123;<span class="comment">//类数组</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class="line">            iteratee(obj[i], i, obj); <span class="comment">//(element, index, list)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> keys = _.keys(obj);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = keys.length; i &lt; length; i++) &#123;</span><br><span class="line">            iteratee(obj[keys[i]], keys[i], obj); <span class="comment">//(value, key, list)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj; <span class="comment">//返回obj方便链式调用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>_.keys</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_.keys = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//不是对象/函数,返回空数组</span></span><br><span class="line">    <span class="keyword">if</span> (!_.isObject(obj)) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="comment">//使用ES5中的方法，返回属性（数组）</span></span><br><span class="line">    <span class="keyword">if</span> (nativeKeys) <span class="keyword">return</span> nativeKeys(obj);</span><br><span class="line">    <span class="keyword">var</span> keys = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj)</span><br><span class="line">        <span class="keyword">if</span> (_.has(obj, key)) keys.push(key);</span><br><span class="line">        <span class="comment">//兼容IE&lt; 9 暂时省略</span></span><br><span class="line">        <span class="comment">// if (hasEnumBug) collectNonEnumProps(obj, keys);</span></span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>_.has</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_.has = <span class="function"><span class="keyword">function</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="3-将方法放入原型中"><a href="#3-将方法放入原型中" class="headerlink" title="3. 将方法放入原型中"></a>3. 将方法放入原型中</h1><p><code>_.prototype</code>的打印结果是：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/1-2.png" alt=""><br><code>console.logo(_.prototype);</code>不在其原型中（其实我们定义_.** 也并没有放到原型中）如果不放到原型中，第<code>5</code>部分不能成功调用。<br>需要使用的工具类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_.each([<span class="string">'Arguments'</span>, <span class="string">'Function'</span>, <span class="string">'String'</span>, <span class="string">'Number'</span>, <span class="string">'Date'</span>, <span class="string">'RegExp'</span>, <span class="string">'Error'</span>, <span class="string">'Symbol'</span>, <span class="string">'Map'</span>, <span class="string">'WeakMap'</span>, <span class="string">'Set'</span>, <span class="string">'WeakSet'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    _[<span class="string">'is'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toString.call(obj) === <span class="string">'[object '</span> + name + <span class="string">']'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).</span></span><br><span class="line"><span class="keyword">var</span> nodelist = root.document &amp;&amp; root.document.childNodes;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> /./ != <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Int8Array</span> != <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> nodelist != <span class="string">'function'</span>) &#123;</span><br><span class="line">    _.isFunction = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'function'</span> || <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_.functions = _.methods = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> names = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_.isFunction(obj[key])) names.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> names.sort();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>混入，并且执行混入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> _.mixin = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    _.each(_.functions(obj), <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> func = _[name] = obj[name];</span><br><span class="line">        _.prototype[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = [<span class="keyword">this</span>._wrapped]; <span class="comment">//_ 保存的数据obj</span></span><br><span class="line">            push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="comment">//原型方法中的数据和args合并到一个数组中</span></span><br><span class="line">            <span class="keyword">return</span> chainResult(<span class="keyword">this</span>, func.apply(_, args));</span><br><span class="line">            <span class="comment">//见第`4`部分</span></span><br><span class="line">            <span class="comment">//将_.prototype[name]的this指向 _ 【func.apply(_,args)已经</span></span><br><span class="line">            <span class="comment">//将func的this指向了 _ ,并且传了参数】,返回带链式的obj，即是 _ </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _;</span><br><span class="line">&#125;;</span><br><span class="line">_.mixin(_);</span><br></pre></td></tr></table></figure></p><p>将<code>_.*</code>形式的方法放入到原型中<br>对于<code>_(obj).*</code>的方法，已经将数据（[this._wrapped]）传入到函数中（var func = _[name] = obj[name]）。当然包括原型中的方法。</p><p><code>_mixin</code>是支持用户自己扩展方法的。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_.mixin(&#123;</span><br><span class="line">  capitalize: <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string.charAt(<span class="number">0</span>).toUpperCase() +                   string.substring(<span class="number">1</span>).toLowerCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">_(<span class="string">"fabio"</span>).capitalize();</span><br><span class="line">=&gt; <span class="string">"Fabio"</span></span><br></pre></td></tr></table></figure><h1 id="4-链式"><a href="#4-链式" class="headerlink" title="4.链式"></a>4.链式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.chain = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = _(obj);</span><br><span class="line">    instance._chain = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.chain(arr)</span><br><span class="line">    .each(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ele);</span><br><span class="line">    &#125;)<span class="comment">//可以继续链式</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chainResult = <span class="function"><span class="keyword">function</span>(<span class="params">instance, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance._chain ? _(obj).chain() : obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="5-支持形如-obj-each方式逻辑"><a href="#5-支持形如-obj-each方式逻辑" class="headerlink" title="5. 支持形如_(obj).each方式逻辑"></a>5. 支持形如<code>_(obj).each</code>方式逻辑</h1><p>使用形式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> _([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).each(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n * <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>我们看到第<code>2.2</code>部分初始化的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) <span class="keyword">return</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> _)) <span class="keyword">return</span> <span class="keyword">new</span> _(obj);</span><br><span class="line">    <span class="keyword">this</span>._wrapped = obj;  <span class="comment">//存放数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行的逻辑会是</p><ul><li>1.<code>if (!(this instanceof _)) return new _(obj);</code>再次调用构造函数，这个时候的this从window已经指向了<code>_</code>;</li><li>2.<code>this._wrapped = obj;  //存放数据</code></li></ul><p>初始化函数中<code>console.log(this)</code>的结果是：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/underscorejs/1-3.png" alt=""></p><h2 id="6-避免冲突"><a href="#6-避免冲突" class="headerlink" title="6.避免冲突"></a>6.避免冲突</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> previousUnderscore = root._;</span><br><span class="line">_.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    root._ = previousUnderscore;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $$ = _.noConflict();<span class="comment">//previousUnderscore</span></span><br><span class="line">$$.each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">ele, idx</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(idx + <span class="string">" : "</span> + ele);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>全部代码贴在这里，可以在我的<a href="https://github.com/zrysmt/DIY-underscorejs" target="_blank" rel="noopener">github</a>查看具体的所有代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DIY 一个underscore库1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在浏览器上是window(self),服务器上是global</span></span><br><span class="line">    <span class="keyword">var</span> root = <span class="keyword">typeof</span> self == <span class="string">'object'</span> &amp;&amp; self.self === self &amp;&amp; self ||</span><br><span class="line">        <span class="keyword">typeof</span> global == <span class="string">'object'</span> &amp;&amp; global.global === global &amp;&amp; global ||</span><br><span class="line">        <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> previousUnderscore = root._;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) <span class="keyword">return</span> obj;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> _)) <span class="keyword">return</span> <span class="keyword">new</span> _(obj);</span><br><span class="line">        <span class="keyword">this</span>._wrapped = obj; <span class="comment">//存放数据</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    root._ = _;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ArrayProto = <span class="built_in">Array</span>.prototype,</span><br><span class="line">        ObjProto = <span class="built_in">Object</span>.prototype;</span><br><span class="line">    <span class="keyword">var</span> push = ArrayProto.push,</span><br><span class="line">        toString = ObjProto.toString,</span><br><span class="line">        hasOwnProperty = ObjProto.hasOwnProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nativeIsArray = <span class="built_in">Array</span>.isArray,</span><br><span class="line">        nativeKeys = <span class="built_in">Object</span>.keys;</span><br><span class="line">    <span class="comment">//判断是不是对象/函数</span></span><br><span class="line">    _.isObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line">        <span class="keyword">return</span> type === <span class="string">'function'</span> || type === <span class="string">'object'</span> &amp;&amp; !!obj;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> optimizeCb = <span class="function"><span class="keyword">function</span>(<span class="params">func, context, argCount</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//void 0 === undefined 返回ture</span></span><br><span class="line">        <span class="keyword">if</span> (context === <span class="keyword">void</span> <span class="number">0</span>) <span class="keyword">return</span> func;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> func.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _.VERSION = <span class="string">'0.0.1'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> property = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="keyword">void</span> <span class="number">0</span> : obj[key];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> MAX_ARRAY_INDEX = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> getLength = property(<span class="string">'length'</span>);</span><br><span class="line">    <span class="keyword">var</span> isArrayLike = <span class="function"><span class="keyword">function</span>(<span class="params">collection</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = getLength(collection);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> length == <span class="string">'number'</span> &amp;&amp; length &gt;= <span class="number">0</span> &amp;&amp; length &lt;= MAX_ARRAY_INDEX;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    _.each = _.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">obj, iteratee, context</span>) </span>&#123;</span><br><span class="line">        iteratee = optimizeCb(iteratee, context);</span><br><span class="line">        <span class="keyword">var</span> i, length;</span><br><span class="line">        <span class="keyword">if</span> (isArrayLike(obj)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, length = obj.length; i &lt; length; i++) &#123;</span><br><span class="line">                iteratee(obj[i], i, obj); <span class="comment">//(element, index, list)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> keys = _.keys(obj);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, length = keys.length; i &lt; length; i++) &#123;</span><br><span class="line">                iteratee(obj[keys[i]], keys[i], obj); <span class="comment">//(value, key, list)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj; <span class="comment">//返回obj方便链式调用</span></span><br><span class="line">    &#125;;</span><br><span class="line">    _.keys = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//不是对象/函数,返回空数组</span></span><br><span class="line">        <span class="keyword">if</span> (!_.isObject(obj)) <span class="keyword">return</span> [];</span><br><span class="line">        <span class="comment">//使用ES5中的方法，返回属性（数组）</span></span><br><span class="line">        <span class="keyword">if</span> (nativeKeys) <span class="keyword">return</span> nativeKeys(obj);</span><br><span class="line">        <span class="keyword">var</span> keys = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj)</span><br><span class="line">            <span class="keyword">if</span> (_.has(obj, key)) keys.push(key);</span><br><span class="line">            <span class="comment">//兼容IE&lt; 9</span></span><br><span class="line">    &#125;;</span><br><span class="line">    _.has = <span class="function"><span class="keyword">function</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj != <span class="literal">null</span> &amp;&amp; hasOwnProperty.call(obj, key);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*链式*/</span></span><br><span class="line">    _.chain = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> instance = _(obj);</span><br><span class="line">        instance._chain = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    _.chain(arr)</span></span><br><span class="line"><span class="comment">        .each(function(ele) &#123;</span></span><br><span class="line"><span class="comment">            console.log(ele);</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> chainResult = <span class="function"><span class="keyword">function</span>(<span class="params">instance, obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance._chain ? _(obj).chain() : obj;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法放入原型中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _.each([<span class="string">'Arguments'</span>, <span class="string">'Function'</span>, <span class="string">'String'</span>, <span class="string">'Number'</span>, <span class="string">'Date'</span>, <span class="string">'RegExp'</span>, <span class="string">'Error'</span>, <span class="string">'Symbol'</span>, <span class="string">'Map'</span>, <span class="string">'WeakMap'</span>, <span class="string">'Set'</span>, <span class="string">'WeakSet'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        _[<span class="string">'is'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> toString.call(obj) === <span class="string">'[object '</span> + name + <span class="string">']'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).</span></span><br><span class="line">    <span class="keyword">var</span> nodelist = root.document &amp;&amp; root.document.childNodes;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> /./ != <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Int8Array</span> != <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> nodelist != <span class="string">'function'</span>) &#123;</span><br><span class="line">        _.isFunction = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> obj == <span class="string">'function'</span> || <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _.functions = _.methods = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> names = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_.isFunction(obj[key])) names.push(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> names.sort();</span><br><span class="line">    &#125;;</span><br><span class="line">    _.mixin = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        _.each(_.functions(obj), <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> func = _[name] = obj[name];</span><br><span class="line">            _.prototype[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> args = [<span class="keyword">this</span>._wrapped]; <span class="comment">//_ 保存的数据obj</span></span><br><span class="line">                push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">                <span class="comment">//原型方法中的数据和args合并到一个数组中</span></span><br><span class="line">                <span class="keyword">return</span> chainResult(<span class="keyword">this</span>, func.apply(_, args));</span><br><span class="line">                <span class="comment">//将_.prototype[name]的this指向 _ (func.apply(_,args)已经</span></span><br><span class="line">                <span class="comment">//将func的this指向了 _ ,并且传了参数),返回带链式的obj，即是 _ </span></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> _;</span><br><span class="line">    &#125;;</span><br><span class="line">    _.mixin(_);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 避免冲突</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    _.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        root._ = previousUnderscore;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p><strong>参考阅读：</strong></p><ul><li><a href="http://underscorejs.org/" target="_blank" rel="noopener">http://underscorejs.org/</a></li><li><a href="http://www.bootcss.com/p/underscore/" target="_blank" rel="noopener">underscorejs中文：http://www.bootcss.com/p/underscore/</a></li><li><a href="http://blog.fens.me/nodejs-underscore/" target="_blank" rel="noopener">UnderscoreJS精巧而强大工具包</a></li><li><a href="http://www.imooc.com/article/1566" target="_blank" rel="noopener">JS高手进阶之路：underscore源码经典</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 源码 </tag>
            
            <tag> js原生实现库 </tag>
            
            <tag> underscorejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP爬虫最全总结2-phpQuery，PHPcrawer，snoopy框架中文介绍</title>
      <link href="/2016/10/13/PHP%E7%88%AC%E8%99%AB%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%932-phpQuery%EF%BC%8CPHPcrawer%EF%BC%8Csnoopy%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%96%87%E4%BB%8B%E7%BB%8D/"/>
      <url>/2016/10/13/PHP%E7%88%AC%E8%99%AB%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%932-phpQuery%EF%BC%8CPHPcrawer%EF%BC%8Csnoopy%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%96%87%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>第一篇文章介绍了使用原生的PHP和PHP的扩展库实现了爬虫技术。本文尝试使用PHP爬虫框架来写，首先对三种爬虫技术<a href="https://github.com/punkave/phpQuery" target="_blank" rel="noopener">phpQuery</a>，<a href="http://phpcrawl.cuab.de/" target="_blank" rel="noopener">PHPcrawer</a>， snoopy进行对比，然后分析模拟浏览器行为的方式，重点介绍下snoopy</p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/PHPSpider" target="_blank" rel="noopener">github</a>上</p></blockquote><h1 id="1-几种常用的PHP爬虫框架对比"><a href="#1-几种常用的PHP爬虫框架对比" class="headerlink" title="1.几种常用的PHP爬虫框架对比"></a>1.几种常用的PHP爬虫框架对比</h1><h2 id="1-1-phpQuery"><a href="#1-1-phpQuery" class="headerlink" title="1.1 phpQuery"></a>1.1 <a href="https://github.com/punkave/phpQuery" target="_blank" rel="noopener">phpQuery</a></h2><p><strong>优势：</strong>类似jquery的强大搜索DOM的能力。<br>pq()是一个功能强大的搜索DOM的方法，跟jQuery的$()如出一辙，jQuery的选择器基本上都能使用在phpQuery上，只要把“.”变成“-&gt;”,Demo如下(对应我的github的Demo5)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="keyword">require</span>(<span class="string">'phpQuery/phpQuery.php'</span>);</span><br><span class="line"> phpQuery::newDocumentFile(<span class="string">'http://www.baidu.com/'</span>); </span><br><span class="line"> $menu_a = pq(<span class="string">"a"</span>); </span><br><span class="line"> <span class="keyword">foreach</span>($menu_a <span class="keyword">as</span> $a)&#123;</span><br><span class="line">    <span class="keyword">echo</span> pq($a)-&gt;html().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">foreach</span>($menu_a <span class="keyword">as</span> $a)&#123;</span><br><span class="line">    <span class="keyword">echo</span> pq($a)-&gt;attr(<span class="string">"href"</span>).<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-PHPcrawer"><a href="#1-2-PHPcrawer" class="headerlink" title="1.2 PHPcrawer"></a>1.2 <a href="http://phpcrawl.cuab.de/" target="_blank" rel="noopener">PHPcrawer</a></h2><p><strong>优势：</strong>过滤能力比较强。<br>官方给的Demo如下（我的github中对应demo4）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">include</span>(<span class="string">"PHPCrawl/libs/PHPCrawler.class.php"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyCrawler</span> <span class="keyword">extends</span> <span class="title">PHPCrawler</span> </span></span><br><span class="line"><span class="class">    </span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">handleDocumentInfo</span><span class="params">(PHPCrawlerDocumentInfo $PageInfo)</span> </span></span><br><span class="line"><span class="function">      </span>&#123; <span class="comment">// As example we just print out the URL of the document </span></span><br><span class="line">        <span class="keyword">echo</span> $PageInfo-&gt;url.<span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    $crawler = <span class="keyword">new</span> MyCrawler(); </span><br><span class="line">    $crawler-&gt;setURL(<span class="string">"www.baidu.com"</span>); </span><br><span class="line">    $crawler-&gt;addURLFilterRule(<span class="string">"#\.(jpg|gif)$# i"</span>);</span><br><span class="line">    <span class="comment">//过滤到含有这些图片格式的URL</span></span><br><span class="line">    $crawler-&gt;go();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-snoopy"><a href="#1-3-snoopy" class="headerlink" title="1.3 snoopy"></a>1.3 snoopy</h2><p><strong>优势：</strong>提交表单，设置代理等<br>Snoopy是一个php类，用来模拟浏览器的功能，可以获取网页内容，发送表单，<br>demo如下（对应github中的demo3）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">'Snoopy/Snoopy.class.php'</span>;</span><br><span class="line">$snoopy = <span class="keyword">new</span> Snoopy();</span><br><span class="line">$url = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line"><span class="comment">// $snoopy-&gt;fetch($url);</span></span><br><span class="line"><span class="comment">// $snoopy-&gt;fetchtext($url);//去除HTML标签和其他的无关数据</span></span><br><span class="line">$snoopy-&gt;fetchform($url);<span class="comment">//只获取表单</span></span><br><span class="line"><span class="comment">//只返回网页中链接 默认情况下，相对链接将自动补全，转换成完整的URL。</span></span><br><span class="line"><span class="comment">// $snoopy-&gt;fetchlinks($url);</span></span><br><span class="line">var_dump($snoopy-&gt;results);</span><br></pre></td></tr></table></figure><h2 id="1-4-phpspider"><a href="#1-4-phpspider" class="headerlink" title="1.4 phpspider"></a>1.4 <a href="http://www.sphider.eu/" target="_blank" rel="noopener">phpspider</a></h2><p><strong>优势：</strong>安装配置到数据库<br>提供了安装配置，能够直接连接mysql数据库，使用也是比较广泛，这里我们暂时不单独介绍。</p><h1 id="2-模拟用户行为"><a href="#2-模拟用户行为" class="headerlink" title="2.模拟用户行为"></a>2.模拟用户行为</h1><h2 id="2-1-file-get-contents"><a href="#2-1-file-get-contents" class="headerlink" title="2.1 file_get_contents"></a>2.1 file_get_contents</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$opts = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">'http'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'method'</span>=&gt;<span class="string">"GET"</span>,</span><br><span class="line">    <span class="string">'header'</span>=&gt;<span class="string">"Accept-language: en\r\n"</span> .</span><br><span class="line">              <span class="string">"Cookie: foo=bar\r\n"</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$context = stream_context_create($opts);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Sends an http request to www.example.com</span></span><br><span class="line"><span class="comment">   with additional headers shown above */</span></span><br><span class="line">$fp = fopen(<span class="string">'http://www.example.com'</span>, <span class="string">'r'</span>, <span class="keyword">false</span>, $context);</span><br><span class="line">fpassthru($fp);</span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-curl"><a href="#2-2-curl" class="headerlink" title="2.2 curl"></a>2.2 curl</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ch=curl_init();  <span class="comment">//初始化一个cURL会话</span></span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);<span class="comment">//设置需要获取的 URL 地址</span></span><br><span class="line"><span class="comment">// 设置浏览器的特定header</span></span><br><span class="line">curl_setopt($ch, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">"Host: www.baidu.com"</span>,</span><br><span class="line">  <span class="string">"Connection: keep-alive"</span>,</span><br><span class="line">  <span class="string">"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">  <span class="string">"Upgrade-Insecure-Requests: 1"</span>,</span><br><span class="line">  <span class="string">"DNT:1"</span>,</span><br><span class="line">  <span class="string">"Accept-Language: zh-CN,zh;q=0.8,en-GB;q=0.6,en;q=0.4,en-US;q=0.2"</span>,</span><br><span class="line">  <span class="string">"Cookie:_za=4540d427-eee1-435a-a533-66ecd8676d7d;"</span>    </span><br><span class="line">));</span><br><span class="line">$result=curl_exec($ch);<span class="comment">//执行一个cURL会话</span></span><br></pre></td></tr></table></figure><h2 id="2-3-snoopy"><a href="#2-3-snoopy" class="headerlink" title="2.3 snoopy"></a>2.3 snoopy</h2><ul><li>表单提交</li></ul><p>我们的一个例子<br>form-demo.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./form-demo.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密 码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form-demo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $userName = $_POST[<span class="string">'userName'</span>];</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">if</span>($userName===<span class="string">"admin"</span>&amp;&amp;$password===<span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"hello admin"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"login error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>提交表单<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'Snoopy/Snoopy.class.php'</span>;</span><br><span class="line">$snoopy = <span class="keyword">new</span> Snoopy();</span><br><span class="line">$formvars[<span class="string">"userName"</span>] = <span class="string">"admin"</span>;</span><br><span class="line"><span class="comment">//userName 与服务器端/表单的name属性一致</span></span><br><span class="line">$formvars[<span class="string">"password"</span>] = <span class="string">"admin"</span>;</span><br><span class="line">$action = <span class="string">"http://localhost:8000/spider/demo3/form-demo.php"</span>;<span class="comment">//表单提交地址</span></span><br><span class="line">$snoopy-&gt;submit($action,$formvars);</span><br><span class="line"><span class="keyword">echo</span> $snoopy-&gt;results;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>问题1：openssl extension required for HTTPS 增加对https的支持</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php.in ==&gt; ;extension=php_openssl.dll 去除注释</span><br></pre></td></tr></table></figure><blockquote><p>问题2：405 Not Allowed增加</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$snoopy-&gt;agent = <span class="string">"(compatible; MSIE 4.01; MSN 2.5; AOL 4.0; Windows 98)"</span>; <span class="comment">//伪装浏览器</span></span><br><span class="line">$snoopy-&gt;referer = <span class="string">"http://www.icultivator.com"</span>; <span class="comment">//伪装来源页地址 http_referer</span></span><br><span class="line">$snoopy-&gt;rawheaders[<span class="string">"Pragma"</span>] = <span class="string">"no-cache"</span>; <span class="comment">//cache 的http头信息</span></span><br><span class="line">$snoopy-&gt;rawheaders[<span class="string">"X_FORWARDED_FOR"</span>] = <span class="string">"122.0.74.166"</span>; <span class="comment">//伪装ip</span></span><br></pre></td></tr></table></figure><blockquote><p>问题3 : snoopy使用代理</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$snoopy-&gt;proxy_host = <span class="string">"http://www.icultivator.com"</span>;</span><br><span class="line"><span class="comment">// HTTPS connections over proxy are currently not supported</span></span><br><span class="line">$snoopy-&gt;proxy_port = <span class="string">"8080"</span>; <span class="comment">//使用代理</span></span><br><span class="line">$snoopy-&gt;maxredirs = <span class="number">2</span>; <span class="comment">//重定向次数</span></span><br><span class="line">$snoopy-&gt;expandlinks = <span class="keyword">true</span>; <span class="comment">//是否补全链接 在采集的时候经常用到</span></span><br><span class="line">$snoopy-&gt;maxframes = <span class="number">5</span>; <span class="comment">//允许的最大框架数</span></span><br></pre></td></tr></table></figure><p><strong>问题：</strong><br>其实尝试了网站进行提交表单是有问题的。这样简单的处理是不能提交表单的，使用代理也是有问题<br>的。snoopy框架确实会有很多问题，后面有解决思路了再说。</p><p><strong>参考阅读：</strong></p><ul><li><a href="https://my.oschina.net/junn/blog/147936" target="_blank" rel="noopener">cURL、file_get_contents、snoopy.class.php 优缺点</a></li><li><a href="http://www.oschina.net/project/lang/22?tag=64&amp;show=news" target="_blank" rel="noopener">开源中国-PHP爬虫框架列表</a></li><li><a href="http://blog.johnsonlu.org/phpphpquery/" target="_blank" rel="noopener">phpQuery</a></li><li><a href="https://sourceforge.net/projects/snoopy/" target="_blank" rel="noopener">Snoopy下载地址</a></li><li><a href="http://www.thinksaas.cn/topics/0/558/558466.html" target="_blank" rel="noopener">Snoopy —— 强大的PHP采集类使用详解及示例：采集、模拟登录及伪装浏览器</a></li><li><a href="https://www.oschina.net/search?scope=blog&amp;q=Snoopy" target="_blank" rel="noopener">开源中国-snoopy博客列表</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端自动化测试工具--使用karma进行javascript单元测试</title>
      <link href="/2016/10/11/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7--%E4%BD%BF%E7%94%A8karma%E8%BF%9B%E8%A1%8Cjavascript%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2016/10/11/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7--%E4%BD%BF%E7%94%A8karma%E8%BF%9B%E8%A1%8Cjavascript%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>前面我写了一篇博客是《前端自动化测试工具PhantomJS+CasperJS结合使用教程》其中使用CasperJS不仅可以进行单元测试，还可以进行浏览器测试，是个很不错的工具，今天介绍的工具是Karma+Jasmine+PhantomJS组合的前端javascript单元测试工具。</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><p>Karma是由Google团队开发的一套前端测试运行框架，karma会启动一个web服务器，将js源代码和测试脚本放到PhantomJS或者Chrome上执行。</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><ul><li>包管理package.json</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>一路回车下去即可</p><ul><li>在项目中安装karma包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i karma --save-dev</span><br></pre></td></tr></table></figure><ul><li>karma初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">karma init</span><br></pre></td></tr></table></figure><p>按照下面的选择好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">E:\javascript\auto-test\karma-demo&gt;karma init</span><br><span class="line"></span><br><span class="line">Which testing framework <span class="keyword">do</span> you want to use ?</span><br><span class="line">Press tab to list possible options. Enter to move to the next question.</span><br><span class="line">&gt; jasmine</span><br><span class="line"></span><br><span class="line">Do you want to use Require.js ?</span><br><span class="line">This will add Require.js plugin.</span><br><span class="line">Press tab to list possible options. Enter to move to the next question.</span><br><span class="line">&gt; no</span><br><span class="line"></span><br><span class="line">Do you want to capture any browsers automatically ?</span><br><span class="line">Press tab to list possible options. Enter empty string to move to the next question.</span><br><span class="line">&gt; PhantomJS</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">What is the location of your <span class="built_in">source</span> and <span class="built_in">test</span> files ?</span><br><span class="line">You can use glob patterns, eg. <span class="string">"js/*.js"</span> or <span class="string">"test/**/*Spec.js"</span>.</span><br><span class="line">Enter empty string to move to the next question.</span><br><span class="line">&gt; src/**/*.js</span><br><span class="line">&gt; <span class="built_in">test</span>/**/*.js</span><br><span class="line">14 10 2016 10:49:43.958:WARN [init]: There is no file matching this pattern.</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">Should any of the files included by the previous patterns be excluded ?</span><br><span class="line">You can use glob patterns, eg. <span class="string">"**/*.swp"</span>.</span><br><span class="line">Enter empty string to move to the next question.</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">Do you want Karma to watch all the files and run the tests on change ?</span><br><span class="line">Press tab to list possible options.</span><br><span class="line">&gt; yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Config file generated at <span class="string">"E:\javascript\auto-test\karma-demo\karma.conf.js"</span>.</span><br></pre></td></tr></table></figure><p>上图是选项的示例，这里使用jasmine测试框架，PhantomJS作为代码运行的环境（也可以选择其他浏览器作为运行环境，比如Chrome，IE等）。最后在项目中生成karma.conf.js文件</p><ul><li>安装jasmine-core</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jasmine-core --save-dev</span><br></pre></td></tr></table></figure><h1 id="3-demo1–ES5"><a href="#3-demo1–ES5" class="headerlink" title="3.demo1–ES5"></a>3.demo1–ES5</h1><p>目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">karma-example</span><br><span class="line">    ├──  src</span><br><span class="line">         ├──  index.js</span><br><span class="line">    ├──  test</span><br><span class="line">    ├──  package.json</span><br></pre></td></tr></table></figure></p><p>源码：src–index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试：test–index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'index.js: '</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'isNum() should work fine.'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(isNum(<span class="number">1</span>)).toBe(<span class="literal">true</span>)</span><br><span class="line">    expect(isNum(<span class="string">'1'</span>)).toBe(<span class="literal">false</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>运行，执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">karma start</span><br></pre></td></tr></table></figure></p><p>命令行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">14 10 2016 10:56:13.038:WARN [karma]: No captured browser, open http://localhost:9876/</span><br><span class="line">14 10 2016 10:56:13.067:INFO [karma]: Karma v1.3.0 server started at http://localhost:9876/</span><br><span class="line">14 10 2016 10:56:13.101:INFO [launcher]: Launching browser PhantomJS with unlimited concurrency</span><br><span class="line">14 10 2016 10:56:13.119:INFO [launcher]: Starting browser PhantomJS</span><br><span class="line">14 10 2016 10:56:16.207:INFO [PhantomJS 2.1.1 (Windows 8 0.0.0)]: Connected on socket /<span class="comment">#JoOdYxAeCS4xvhHHAAAA with id 87859111</span></span><br><span class="line">PhantomJS 2.1.1 (Windows 8 0.0.0): Executed 1 of 1 SUCCESS (0.009 secs / 0.004 secs)</span><br></pre></td></tr></table></figure><h1 id="4-demo2-ES6"><a href="#4-demo2-ES6" class="headerlink" title="4.demo2-ES6"></a>4.demo2-ES6</h1><p>安装<strong>使用Webpack+Babel</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i  karma-webpack --save-dev</span><br><span class="line">npm i  babel-loader babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure></p><p>源码src–index2.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> &#123;isNum&#125;;</span><br><span class="line"><span class="comment">// export default isNum;</span></span><br></pre></td></tr></table></figure></p><p>测试test–index2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;isNum&#125; <span class="keyword">from</span> <span class="string">'../src/index2'</span>;</span><br><span class="line"><span class="comment">// import isNum from '../src/index2';</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'index2.js:'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'isNum() should work fine.'</span>, () =&gt; &#123;</span><br><span class="line">    expect(isNum(<span class="number">1</span>)).toBe(<span class="literal">true</span>);</span><br><span class="line">    expect(isNum(<span class="string">'1'</span>)).toBe(<span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改配置文件<code>karma.conf.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">config.set(&#123;</span><br><span class="line">        basePath: <span class="string">''</span>,</span><br><span class="line">        frameworks: [<span class="string">'jasmine'</span>],</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        files: [</span><br><span class="line">            <span class="comment">// 'src/**/*.js',</span></span><br><span class="line">            <span class="string">'test/**/*.js'</span></span><br><span class="line">        ],</span><br><span class="line">        exclude: [],</span><br><span class="line">        preprocessors: &#123;</span><br><span class="line">            <span class="string">'test/**/*.js'</span>: [<span class="string">'webpack'</span>, <span class="string">'coverage'</span>] <span class="comment">//新增</span></span><br><span class="line">            <span class="comment">//coverage为覆盖率测试，这里不再介绍</span></span><br><span class="line">        &#125;,</span><br><span class="line">        reporters: [<span class="string">'progress'</span>, <span class="string">'coverage'</span>],</span><br><span class="line">        <span class="comment">// 新增--覆盖率测试</span></span><br><span class="line">        coverageReporter: &#123;</span><br><span class="line">            type: <span class="string">'html'</span>,</span><br><span class="line">            dir: <span class="string">'coverage/'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        port: <span class="number">9876</span>,</span><br><span class="line">        colors: <span class="literal">true</span>，</span><br><span class="line">        logLevel: config.LOG_INFO,</span><br><span class="line">        autoWatch: <span class="literal">true</span>,</span><br><span class="line">        browsers: [<span class="string">'PhantomJS'</span>],</span><br><span class="line">        singleRun: <span class="literal">false</span>,</span><br><span class="line">        concurrency: <span class="literal">Infinity</span>,</span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        webpack: &#123;</span><br><span class="line">            <span class="built_in">module</span>: &#123;</span><br><span class="line">                loaders: [&#123;</span><br><span class="line">                    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                    loader: <span class="string">'babel'</span>,</span><br><span class="line">                    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                    query: &#123;</span><br><span class="line">                        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>参考阅读：</strong></p><ul><li><a href="http://karma-runner.github.io/" target="_blank" rel="noopener">http://karma-runner.github.io/</a></li><li><a href="https://github.com/karma-runner/karma" target="_blank" rel="noopener">https://github.com/karma-runner/karma</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551281&amp;idx=2&amp;sn=a2c7e0c5ce40d3c76a77878bb059b247&amp;chksm=8025a1f0b75228e69ba643cba44872120d8a54c5ec240c36fd37f2d8b5a24d2e980464df651e&amp;scene=1&amp;srcid=0921IND89Hz7S81VX0ZCtsGf#rd" target="_blank" rel="noopener">前端单元测试之Karma环境搭建</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> PhantomJS </tag>
            
            <tag> 自动化测试 </tag>
            
            <tag> Jasmine </tag>
            
            <tag> Karma </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端自动化测试工具PhantomJS+CasperJS结合使用教程</title>
      <link href="/2016/10/11/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7PhantomJS+CasperJS%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2016/10/11/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7PhantomJS+CasperJS%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下面的安装测试基于window系统（win10）</p></blockquote><h1 id="1-PhantomJS"><a href="#1-PhantomJS" class="headerlink" title="1.PhantomJS"></a>1.PhantomJS</h1><p><a href="http://phantomjs.org/" title=" phantomjs " target="_blank" rel="noopener"><strong>PhantomJS</strong> </a>是一个基于 <strong>WebKit</strong> 的服务器端JavaScript API,它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 PhantomJS 可以用于 页面自动化， 网络监测 ， 网页截屏 ，以及 无界面测试 等</p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>下载地址为：<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">http://phantomjs.org/download.html</a> 解压之后，可以加到环境变量中</p><h2 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h2><ul><li>示例demo1.js–截图：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line">page.viewportSize = &#123;</span><br><span class="line">    width: <span class="number">1366</span>,</span><br><span class="line">    height: <span class="number">800</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> urls = [<span class="string">"https://www.baidu.com/"</span>, <span class="string">"https://zrysmt.github.io/"</span>];</span><br><span class="line">page.open(urls[<span class="number">0</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'welcome!'</span>);</span><br><span class="line">    page.render(<span class="string">'screen.png'</span>);</span><br><span class="line">    phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phantomjs demo1.js</span><br></pre></td></tr></table></figure></p><ul><li>示例demo2.js–DOM操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line">phantom.outputEncoding = <span class="string">"gbk"</span>; <span class="comment">//解决中文乱码</span></span><br><span class="line">page.open(<span class="string">"https://www.baidu.com/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(status);</span><br><span class="line">    page.render(<span class="string">'screen.png'</span>);</span><br><span class="line">    <span class="keyword">var</span> title = page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.title;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Page title: '</span> + title);</span><br><span class="line">    phantom.exit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行命令同上，得到结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">success</span><br><span class="line">Page title: 百度一下，你就知道</span><br></pre></td></tr></table></figure></p><p>所执行的DOM操作要在<code>page.evaluate</code>中，</p><ul><li>示例demo3.js–读取文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> system = <span class="built_in">require</span>(<span class="string">'system'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">phantom.outputEncoding = <span class="string">"gbk"</span>; <span class="comment">//解决中文乱码</span></span><br><span class="line"><span class="keyword">var</span> filePath = <span class="string">"url-02.txt"</span>;</span><br><span class="line"><span class="keyword">var</span> content = fs.read(filePath);</span><br><span class="line"><span class="built_in">console</span>.log(content);</span><br></pre></td></tr></table></figure><p>url-02.txt中如果是很多url，一个一个访问url的话，可能会这样实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">page.open(urlArr[<span class="number">0</span>], <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    page.open(urlArr[<span class="number">1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">       page.open(urlArr[<span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//... ...</span></span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这样写法就有很大的不方便，于是我们就引入了CasperJS</p><h1 id="2-CasperJS"><a href="#2-CasperJS" class="headerlink" title="2.CasperJS"></a>2.CasperJS</h1><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i casperjs --save-dev</span><br></pre></td></tr></table></figure><p>为方便使用也可以加入到环境变量中</p><h2 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h2><ul><li>示例demo:casper-test.js–打开网页截图</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create();</span><br><span class="line">casper.start();</span><br><span class="line">casper.thenOpen(<span class="string">'http://www.baidu.com/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    casper.captureSelector(<span class="string">'baidu.png'</span>, <span class="string">'html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">casper.run();</span><br></pre></td></tr></table></figure><p>执行命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">casperjs casper-test.js</span><br></pre></td></tr></table></figure></p><ul><li>示例demo:casper-test2.js–操作DOM，访问网页</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create();</span><br><span class="line"><span class="keyword">var</span> links;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// Scrape the links from top-right nav of the website</span></span><br><span class="line">    <span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul.navigation li a'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.map.call(links, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.getAttribute(<span class="string">'href'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Opens casperjs homepage</span></span><br><span class="line">casper.start(<span class="string">'http://casperjs.org/'</span>);</span><br><span class="line"></span><br><span class="line">casper.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    links = <span class="keyword">this</span>.evaluate(getLinks);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">casper.run(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> links) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(links[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    casper.done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行命令类比同上</p><ul><li>示例demo:casper-test3.js–单元测试</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mowed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.moo = <span class="function"><span class="keyword">function</span> <span class="title">moo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mowed = <span class="literal">true</span>; <span class="comment">// mootable state: don't do that at home</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'moo!'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">casper.test.begin(<span class="string">'Cow can moo'</span>, <span class="number">2</span>, <span class="function"><span class="keyword">function</span> <span class="title">suite</span>(<span class="params">test</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cow = <span class="keyword">new</span> Cow();</span><br><span class="line">    test.assertEquals(cow.moo(), <span class="string">'moo!'</span>);</span><br><span class="line">    test.assert(cow.mowed);</span><br><span class="line">    test.done();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">casperjs test casper-test3.js</span><br></pre></td></tr></table></figure></p><p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Test file: casper-test3.js</span><br><span class="line"># Cow can moo</span><br><span class="line">PASS Subject equals the expected value</span><br><span class="line">PASS Subject is strictly true</span><br><span class="line">PASS Cow can moo (2 tests)</span><br><span class="line">PASS 2 tests executed in 0.031s, 2 passed, 0 failed, 0 dubious, 0 skipped.</span><br></pre></td></tr></table></figure></p><ul><li>示例demo:casper-test4.js–浏览器测试</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">casper.test.begin(<span class="string">'Google search retrieves 10 or more results'</span>, <span class="number">5</span>, <span class="function"><span class="keyword">function</span> <span class="title">suite</span>(<span class="params">test</span>) </span>&#123;</span><br><span class="line">    casper.start(<span class="string">"http://www.google.fr/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        test.assertTitle(<span class="string">"Google"</span>, <span class="string">"google homepage title is the one expected"</span>);</span><br><span class="line">        test.assertExists(<span class="string">'form[action="/search"]'</span>, <span class="string">"main form is found"</span>);</span><br><span class="line">        <span class="keyword">this</span>.fill(<span class="string">'form[action="/search"]'</span>, &#123;</span><br><span class="line">            q: <span class="string">"casperjs"</span></span><br><span class="line">        &#125;, <span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    casper.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        test.assertTitle(<span class="string">"casperjs - Recherche Google"</span>, <span class="string">"google title is ok"</span>);</span><br><span class="line">        test.assertUrlMatch(<span class="regexp">/q=casperjs/</span>, <span class="string">"search term has been submitted"</span>);</span><br><span class="line">        test.assertEval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> __utils__.findAll(<span class="string">"h3.r"</span>).length &gt;= <span class="number">10</span>;</span><br><span class="line">        &#125;, <span class="string">"google search for \"casperjs\" retrieves 10 or more results"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    casper.run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        test.done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行命令如demo3类比</p><h1 id="3-PhantomJs-CasperJs"><a href="#3-PhantomJs-CasperJs" class="headerlink" title="3.PhantomJs+CasperJs"></a>3.PhantomJs+CasperJs</h1><p>实现异步操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create(); <span class="comment">//新建一个页面</span></span><br><span class="line"></span><br><span class="line">casper.start(url1); <span class="comment">//添加第一个URL</span></span><br><span class="line">casper.thenOpen(url2); <span class="comment">//添加第二个URL,依次类推</span></span><br><span class="line">casper.thenOpen(url3);</span><br><span class="line">casper.thenOpen(url4);</span><br><span class="line"></span><br><span class="line">casper.run(); <span class="comment">//开始导航</span></span><br></pre></td></tr></table></figure><p>demo(casper-phantomjs.js)如下–一次访问三十几个url：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> casper = <span class="built_in">require</span>(<span class="string">'casper'</span>).create();</span><br><span class="line">phantom.outputEncoding = <span class="string">"gbk"</span>; <span class="comment">//解决中文乱码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filePath = <span class="string">"url-02.txt"</span>;</span><br><span class="line"><span class="keyword">var</span> content = fs.read(filePath);</span><br><span class="line"><span class="keyword">var</span> urlArr = content.split(<span class="string">'\n'</span>);</span><br><span class="line">casper.start();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; urlArr.length; i++) &#123;</span><br><span class="line">    casper.thenOpen(urlArr[i], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.echo(<span class="string">'Page title: '</span> + <span class="keyword">this</span>.getTitle());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">casper.run();</span><br><span class="line"><span class="comment">// phantom.exit();</span></span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">casperjs casper-phantomjs.js</span><br></pre></td></tr></table></figure></p><p><strong>参考阅读：</strong></p><ul><li><a href="http://phantomjs.org/" target="_blank" rel="noopener">http://phantomjs.org/</a></li><li><a href="http://www.tuicool.com/articles/beeMNj/" target="_blank" rel="noopener">PhantomJS快速入门教程</a></li><li><a href="http://casperjs.org/" target="_blank" rel="noopener">http://casperjs.org/</a></li><li><a href="http://imweb.io/topic/55e46d8d771670e207a16bdc" target="_blank" rel="noopener">浏览器自动化测试初探 - 使用phantomjs与casperjs</a></li><li><a href="http://www.cnblogs.com/ziyunfei/archive/2012/09/27/2706254.html" target="_blank" rel="noopener">CasperJS,基于PhantomJS的工具包</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> PhantomJS </tag>
            
            <tag> CasperJS </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP爬虫最全总结1</title>
      <link href="/2016/10/10/PHP%E7%88%AC%E8%99%AB%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%931/"/>
      <url>/2016/10/10/PHP%E7%88%AC%E8%99%AB%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%931/</url>
      
        <content type="html"><![CDATA[<p>　爬虫是我一直以来跃跃欲试的技术，现在的爬虫框架很多，比较流行的是基于python，nodejs，java，C#，PHP的的框架，其中又以基于python的爬虫流行最为广泛，还有的已经是一套傻瓜式的软件操作，如八爪鱼，火车头等软件。</p><p>　今天我们首先尝试的是使用PHP实现一个爬虫程序，首先在不使用爬虫框架的基础上实践也是为了理解爬虫的原理，然后再利用PHP的lib，框架和扩展进行实践。</p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/PHPSpider" target="_blank" rel="noopener">github</a>上。</p></blockquote><h1 id="1-PHP简单的爬虫–原型"><a href="#1-PHP简单的爬虫–原型" class="headerlink" title="1.PHP简单的爬虫–原型"></a>1.PHP简单的爬虫–原型</h1><p><strong>爬虫的原理：</strong></p><ul><li>给定原始的url；</li><li>分析链接，根据设置的正则表达式获取链接中的内容；</li><li>有的会更新原始的url再进行分析链接，获取特定内容，周而复始。</li><li>将获取的内容保存在数据库中（mysql）或者本地文件中</li></ul><p>下面是网上一个例子，我们列下来然后分析<br>从<code>main</code>函数开始</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬虫程序 -- 原型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 从给定的url获取html内容</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getUrlContent</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    $handle = fopen($url, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> ($handle) &#123;</span><br><span class="line">        $content = stream_get_contents($handle, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">//读取资源流到一个字符串,第二个参数需要读取的最大的字节数。默认是-1（读取全部的缓冲数据）</span></span><br><span class="line">        <span class="comment">// $content = file_get_contents($url, 1024 * 1024);</span></span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从html内容中筛选链接</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $web_content </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_filterUrl</span><span class="params">($web_content)</span> </span>&#123;</span><br><span class="line">    $reg_tag_a = <span class="string">'/&lt;[a|A].*?href=[\'\"]&#123;0,1&#125;([^&gt;\'\"\ ]*).*?&gt;/'</span>;</span><br><span class="line">    $result = preg_match_all($reg_tag_a, $web_content, $match_result);</span><br><span class="line">    <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">        <span class="keyword">return</span> $match_result[<span class="number">1</span>];</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修正相对路径</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $base_url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $url_list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reviseUrl</span><span class="params">($base_url, $url_list)</span> </span>&#123;</span><br><span class="line">    $url_info = parse_url($base_url);<span class="comment">//解析url</span></span><br><span class="line">    $base_url = $url_info[<span class="string">"scheme"</span>] . <span class="string">'://'</span>;</span><br><span class="line">    <span class="keyword">if</span> ($url_info[<span class="string">"user"</span>] &amp;&amp; $url_info[<span class="string">"pass"</span>]) &#123;</span><br><span class="line">        $base_url .= $url_info[<span class="string">"user"</span>] . <span class="string">":"</span> . $url_info[<span class="string">"pass"</span>] . <span class="string">"@"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    $base_url .= $url_info[<span class="string">"host"</span>];</span><br><span class="line">    <span class="keyword">if</span> ($url_info[<span class="string">"port"</span>]) &#123;</span><br><span class="line">        $base_url .= <span class="string">":"</span> . $url_info[<span class="string">"port"</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    $base_url .= $url_info[<span class="string">"path"</span>];</span><br><span class="line">    print_r($base_url);</span><br><span class="line">    <span class="keyword">if</span> (is_array($url_list)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($url_list <span class="keyword">as</span> $url_item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/^http/'</span>, $url_item)) &#123;</span><br><span class="line">                <span class="comment">// 已经是完整的url</span></span><br><span class="line">                $result[] = $url_item;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不完整的url</span></span><br><span class="line">                $real_url = $base_url . <span class="string">'/'</span> . $url_item;</span><br><span class="line">                $result[] = $real_url;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬虫</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crawler</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    $content = _getUrlContent($url);</span><br><span class="line">    <span class="keyword">if</span> ($content) &#123;</span><br><span class="line">        $url_list = _reviseUrl($url, _filterUrl($content));</span><br><span class="line">        <span class="keyword">if</span> ($url_list) &#123;</span><br><span class="line">            <span class="keyword">return</span> $url_list;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用主程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $file_path = <span class="string">"url-01.txt"</span>;</span><br><span class="line">    $current_url = <span class="string">"http://www.baidu.com/"</span>; <span class="comment">//初始url</span></span><br><span class="line">    <span class="keyword">if</span>(file_exists($file_path))&#123;</span><br><span class="line">        unlink($file_path);</span><br><span class="line">    &#125;</span><br><span class="line">    $fp_puts = fopen($file_path, <span class="string">"ab"</span>); <span class="comment">//记录url列表</span></span><br><span class="line">    $fp_gets = fopen($file_path, <span class="string">"r"</span>); <span class="comment">//保存url列表</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $result_url_arr = crawler($current_url);</span><br><span class="line">        <span class="keyword">if</span> ($result_url_arr) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($result_url_arr <span class="keyword">as</span> $url) &#123;</span><br><span class="line">                fputs($fp_puts, $url . <span class="string">"\r\n"</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">while</span> ($current_url = fgets($fp_gets, <span class="number">1024</span>)); <span class="comment">//不断获得url</span></span><br><span class="line">&#125; </span><br><span class="line">main();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-使用crul-lib"><a href="#2-使用crul-lib" class="headerlink" title="2.使用crul lib"></a>2.使用crul lib</h1><p>Curl是比较成熟的一个lib，异常处理、http header、POST之类都做得很好，重要的是PHP下操作MySQL进行入库操作比较省心。关于curl的说明具体可以查看PHP官方文档说明<a href="http://php.net/manual/zh/book.curl.php" target="_blank" rel="noopener">http://php.net/manual/zh/book.curl.php</a><br>不过在多线程Curl（Curl_multi）方面比较麻烦。</p><p><strong>开启crul</strong><br>针对winow系统：</p><ul><li><p>php.in中修改（注释；去掉即可） </p><blockquote><p>extension=php_curl.dll</p></blockquote></li><li><p>php文件夹下的libeay32.dll, ssleay32.dll, libssh2.dll 还有 php/ext下的php_curl4个文件移入windows/system32</p></li></ul><p>使用crul爬虫的<strong>步骤：</strong></p><ul><li>使用cURL函数的基本思想是先使用curl_init()初始化一个cURL会话；</li><li>接着你可以通过curl_setopt()设置你需要的全部选项；</li><li>然后使用curl_exec()来执行会话；</li><li>当执行完会话后使用curl_close()关闭会话。</li></ul><p><strong>例子</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ch = curl_init(<span class="string">"http://www.example.com/"</span>);</span><br><span class="line">$fp = fopen(<span class="string">"example_homepage.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"></span><br><span class="line">curl_setopt($ch, CURLOPT_FILE, $fp);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个完整点的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将demo1-01换成curl爬虫</span></span><br><span class="line"><span class="comment"> * 爬虫程序 -- 原型</span></span><br><span class="line"><span class="comment"> * 从给定的url获取html内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_getUrlContent</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    $ch=curl_init();  <span class="comment">//初始化一个cURL会话</span></span><br><span class="line">    <span class="comment">/*curl_setopt 设置一个cURL传输选项*/</span></span><br><span class="line">    <span class="comment">//设置需要获取的 URL 地址</span></span><br><span class="line">    curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">    <span class="comment">//TRUE 将curl_exec()获取的信息以字符串返回，而不是直接输出</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//启用时会将头文件的信息作为数据流输出</span></span><br><span class="line">    curl_setopt($ch,CURLOPT_HEADER,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 设置浏览器的特定header</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"Host: www.baidu.com"</span>,</span><br><span class="line">        <span class="string">"Connection: keep-alive"</span>,</span><br><span class="line">        <span class="string">"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Upgrade-Insecure-Requests: 1"</span>,</span><br><span class="line">        <span class="string">"DNT:1"</span>,</span><br><span class="line">        <span class="string">"Accept-Language: zh-CN,zh;q=0.8,en-GB;q=0.6,en;q=0.4,en-US;q=0.2"</span>,</span><br><span class="line">        <span class="comment">/*'Cookie:_za=4540d427-eee1-435a-a533-66ecd8676d7d; */</span>    </span><br><span class="line">        ));</span><br><span class="line">    $result=curl_exec($ch);<span class="comment">//执行一个cURL会话</span></span><br><span class="line">    $code=curl_getinfo($ch,CURLINFO_HTTP_CODE);<span class="comment">// 最后一个收到的HTTP代码</span></span><br><span class="line">    <span class="keyword">if</span>($code!=<span class="string">'404'</span> &amp;&amp; $result)&#123;</span><br><span class="line">       <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line">    curl_close($ch);<span class="comment">//关闭cURL</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从html内容中筛选链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $web_content </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_filterUrl</span><span class="params">($web_content)</span> </span>&#123;</span><br><span class="line">    $reg_tag_a = <span class="string">'/&lt;[a|A].*?href=[\'\"]&#123;0,1&#125;([^&gt;\'\"\ ]*).*?&gt;/'</span>;</span><br><span class="line">    $result = preg_match_all($reg_tag_a, $web_content, $match_result);</span><br><span class="line">    <span class="keyword">if</span> ($result) &#123;</span><br><span class="line">        <span class="keyword">return</span> $match_result[<span class="number">1</span>];</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修正相对路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $base_url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $url_list </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reviseUrl</span><span class="params">($base_url, $url_list)</span> </span>&#123;</span><br><span class="line">    $url_info = parse_url($base_url);<span class="comment">//解析url</span></span><br><span class="line">    $base_url = $url_info[<span class="string">"scheme"</span>] . <span class="string">'://'</span>;</span><br><span class="line">    <span class="keyword">if</span> ($url_info[<span class="string">"user"</span>] &amp;&amp; $url_info[<span class="string">"pass"</span>]) &#123;</span><br><span class="line">        $base_url .= $url_info[<span class="string">"user"</span>] . <span class="string">":"</span> . $url_info[<span class="string">"pass"</span>] . <span class="string">"@"</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    $base_url .= $url_info[<span class="string">"host"</span>];</span><br><span class="line">    <span class="keyword">if</span> ($url_info[<span class="string">"port"</span>]) &#123;</span><br><span class="line">        $base_url .= <span class="string">":"</span> . $url_info[<span class="string">"port"</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    $base_url .= $url_info[<span class="string">"path"</span>];</span><br><span class="line">    print_r($base_url);</span><br><span class="line">    <span class="keyword">if</span> (is_array($url_list)) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($url_list <span class="keyword">as</span> $url_item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/^http/'</span>, $url_item)) &#123;</span><br><span class="line">                <span class="comment">// 已经是完整的url</span></span><br><span class="line">                $result[] = $url_item;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 不完整的url</span></span><br><span class="line">                $real_url = $base_url . <span class="string">'/'</span> . $url_item;</span><br><span class="line">                $result[] = $real_url;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬虫</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crawler</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    $content = _getUrlContent($url);</span><br><span class="line">    <span class="keyword">if</span> ($content) &#123;</span><br><span class="line">        $url_list = _reviseUrl($url, _filterUrl($content));</span><br><span class="line">        <span class="keyword">if</span> ($url_list) &#123;</span><br><span class="line">            <span class="keyword">return</span> $url_list;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用主程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $file_path = <span class="string">"./url-03.txt"</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($file_path))&#123;</span><br><span class="line">        unlink($file_path);</span><br><span class="line">    &#125;</span><br><span class="line">    $current_url = <span class="string">"http://www.baidu.com"</span>; <span class="comment">//初始url</span></span><br><span class="line">    <span class="comment">//记录url列表 　ab- 追加打开一个二进制文件，并在文件末尾写数据</span></span><br><span class="line">    $fp_puts = fopen($file_path, <span class="string">"ab"</span>); </span><br><span class="line">    <span class="comment">//保存url列表 r-只读方式打开，将文件指针指向文件头</span></span><br><span class="line">    $fp_gets = fopen($file_path, <span class="string">"r"</span>); </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $result_url_arr = crawler($current_url);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;$current_url&lt;/p&gt;"</span>;</span><br><span class="line">        <span class="keyword">if</span> ($result_url_arr) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($result_url_arr <span class="keyword">as</span> $url) &#123;</span><br><span class="line">                fputs($fp_puts, $url . <span class="string">"\r\n"</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">while</span> ($current_url = fgets($fp_gets, <span class="number">1024</span>)); <span class="comment">//不断获得url</span></span><br><span class="line">&#125; </span><br><span class="line">main();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要对https支持，需要在<code>_getUrlContent</code>函数中加入下面的设置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC ) ; </span><br><span class="line">curl_setopt($ch, CURLOPT_USERPWD, <span class="string">"username:password"</span>);    </span><br><span class="line">curl_setopt($ch, CURLOPT_SSLVERSION,<span class="number">3</span>); </span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>); </span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p><strong>结果疑惑：</strong><br>我们通过1和2部分得到的结果差异很大，第1部分能得到四千多条url数据，而第2部分却一直是45条数据。</p><p>还有我们获得url数据可能会有重复的，这部分处理在我的<a href="https://github.com/zrysmt/PHPSpider" target="_blank" rel="noopener">github</a>上，对应demo2-01.php，或者demo2-02.php</p><h1 id="3-file-get-contents-stream-get-contents与curl对比"><a href="#3-file-get-contents-stream-get-contents与curl对比" class="headerlink" title="3.file_get_contents/stream_get_contents与curl对比"></a>3.file_get_contents/stream_get_contents与curl对比</h1><h2 id="3-1-file-get-contents-stream-get-contents对比"><a href="#3-1-file-get-contents-stream-get-contents对比" class="headerlink" title="3.1 file_get_contents/stream_get_contents对比"></a>3.1 file_get_contents/stream_get_contents对比</h2><ul><li>stream_get_contents — 读取资源流到一个字符串<br>与 [file_get_contents()]一样，但是 <strong>stream_get_contents()</strong> 是对一个已经打开的资源流进行操作，并将其内容写入一个字符串返回</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$handle = fopen($url, <span class="string">"r"</span>);</span><br><span class="line">$content = stream_get_contents($handle, <span class="number">-1</span>);<span class="comment">//读取资源流到一个字符串,第二个参数需要读取的最大的字节数。默认是-1（读取全部的缓冲数据）</span></span><br></pre></td></tr></table></figure><ul><li>file_get_contents — 将整个文件读入一个字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content = file_get_contents($url, <span class="number">1024</span> * <span class="number">1024</span>);</span><br></pre></td></tr></table></figure><blockquote><p>【注】 如果要打开有特殊字符的 URL （比如说有空格），就需要使用进行 URL 编码。</p></blockquote><h2 id="3-2-file-get-contents-stream-get-contents与curl对比"><a href="#3-2-file-get-contents-stream-get-contents与curl对比" class="headerlink" title="3.2 file_get_contents/stream_get_contents与curl对比"></a>3.2 file_get_contents/stream_get_contents与curl对比</h2><p><a href="http://www.jb51.net/article/57238.htm" target="_blank" rel="noopener">php中file_get_contents与curl性能比较分析</a>一文中有详细的对比分析，主要的对比现在列下来：</p><ul><li><p>fopen /file_get_contents 每次请求都会重新做DNS查询，并不对 DNS信息进行缓存。但是CURL会自动对DNS信息进行缓存。对同一域名下的网页或者图片的请求只需要一次DNS查询。这大大减少了DNS查询的次数。所以CURL的性能比fopen /file_get_contents 好很多。</p></li><li><p>fopen /file_get_contents 在请求HTTP时，使用的是http_fopen_wrapper，不会keeplive。而curl却可以。这样在多次请求多个链接时，curl效率会好一些。</p></li><li><p>fopen / file_get_contents 函数会受到php.ini文件中allow_url_open选项配置的影响。如果该配置关闭了，则该函数也就失效了。而curl不受该配置的影响。</p></li><li><p>curl 可以模拟多种请求，例如：POST数据，表单提交等，用户可以按照自己的需求来定制请求。而fopen / file_get_contents只能使用get方式获取数据。</p></li></ul><h1 id="4-使用框架"><a href="#4-使用框架" class="headerlink" title="4.使用框架"></a>4.使用框架</h1><p>使用框架这一块打算以后单独研究，并拿出来单写一篇博客</p><blockquote><p>所有代码挂在我的<a href="https://github.com/zrysmt/PHPSpider" target="_blank" rel="noopener">github</a>上。</p></blockquote><p><strong>参考阅读：</strong></p><ul><li><a href="http://www.epooll.com/archives/806/" target="_blank" rel="noopener">我用爬虫一天时间“偷了”知乎一百万用户，只为证明PHP是世界上最好的语言</a></li><li><a href="https://www.zhihu.com/question/23643061" target="_blank" rel="noopener">知乎 – PHP, Python, Node.js 哪个比较适合写爬虫？</a></li><li><a href="http://qoofan.com/read/Pndwa54e8J.html" target="_blank" rel="noopener">最近关于对网络爬虫技术总结</a></li><li><a href="https://www.oschina.net/code/snippet_258733_12343" target="_blank" rel="noopener">PHP实现简单爬虫   (http://www.oschina.net/code/snippet_258733_12343)</a>]</li><li><a href="http://www.jb51.net/article/69108.htm" target="_blank" rel="noopener">一个PHP实现的轻量级简单爬虫</a></li><li><a href="http://www.jb51.net/article/57238.htm" target="_blank" rel="noopener">php中file_get_contents与curl性能比较分析</a></li><li><a href="http://www.cnblogs.com/freephp/p/4861184.html" target="_blank" rel="noopener">PHP curl之爬虫初步</a></li><li><a href="http://www.oschina.net/project/lang/22?tag=64&amp;show=news" target="_blank" rel="noopener">开源中国-PHP爬虫框架列表</a></li><li><a href="http://www.ido321.com/1158.html" target="_blank" rel="noopener">网页抓取：PHP实现网页爬虫方式小结，抓取爬虫</a></li><li><a href="http://phpcrawl.cuab.de/" target="_blank" rel="noopener">PHP爬虫框架–PHPCrawl</a></li><li><a href="http://www.chhua.com/web-note5277" title="链接到 php安装pcntl扩展实现多进程" target="_blank" rel="noopener">php安装pcntl扩展实现多进程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构6-字典 散列 集合</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%846-%E5%AD%97%E5%85%B8-%E6%95%A3%E5%88%97-%E9%9B%86%E5%90%88/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%846-%E5%AD%97%E5%85%B8-%E6%95%A3%E5%88%97-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="6-1-字典"><a href="#6-1-字典" class="headerlink" title="6.1 字典"></a>6.1 字典</h2><p>字典是一种以键- 值对形式存储数据的数据结构，就像电话号码簿里的名字和电话号码一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;字典sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function Dictionary()&#123;</span><br><span class="line">   this.add = add;</span><br><span class="line">   this.datastore = new Array();</span><br><span class="line">   this.find = find;</span><br><span class="line">   this.remove = remove;</span><br><span class="line">   this.showAll = showAll;</span><br><span class="line">   this.count = count;</span><br><span class="line">   this.clear = clear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function add(key, value) &#123;</span><br><span class="line">   this.datastore[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function find(key) &#123;</span><br><span class="line">   return this.datastore[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function remove(key) &#123;</span><br><span class="line">   delete this.datastore[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showAll() &#123;</span><br><span class="line">if(this.datastore!=null)&#123;</span><br><span class="line">   var datakeys=Array.prototype.slice.call(Object.keys(this.datastore));</span><br><span class="line">   for (var key in datakeys) &#123;</span><br><span class="line">      document.write(datakeys[key] + &quot; -&gt; &quot; + this.datastore[datakeys[key]]+&quot; &quot;);</span><br><span class="line">      // console.log(Object.keys(this.datastore));</span><br><span class="line">      console.log(key);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> document.write(&quot;字典为空&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function count() &#123;</span><br><span class="line">   var n = 0;</span><br><span class="line">   for  (var key in Object.keys(this.datastore)) &#123;</span><br><span class="line">      ++n;</span><br><span class="line">   &#125;</span><br><span class="line">   return n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function clear() &#123;</span><br><span class="line">   // for  (var key in Object.keys(this.datastore)) &#123;</span><br><span class="line">   //    delete this.datastore[key];</span><br><span class="line">   // &#125; </span><br><span class="line">   delete this.datastore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">var dic=new Dictionary();</span><br><span class="line">dic.add(&quot;123&quot;,&quot;R&quot;);</span><br><span class="line">dic.add(&quot;456&quot;,&quot;Python&quot;);</span><br><span class="line">dic.add(&quot;789&quot;,&quot;JavaScipt&quot;);</span><br><span class="line">document.write(&quot;&lt;/br&gt;**************字典数目**************&lt;/br&gt;&quot;);</span><br><span class="line">var n=dic.count();</span><br><span class="line">document.write(n);</span><br><span class="line">document.write(&quot;&lt;/br&gt;**************全部显示**************&lt;/br&gt;&quot;);</span><br><span class="line">dic.showAll();</span><br><span class="line">document.write(&quot;&lt;/br&gt;**************删除123---&gt;R*************&lt;/br&gt;&quot;);</span><br><span class="line">dic.remove(&quot;123&quot;);</span><br><span class="line">dic.showAll();</span><br><span class="line">document.write(&quot;&lt;/br&gt;**************清除**************&lt;/br&gt;&quot;);</span><br><span class="line">dic.clear();</span><br><span class="line">dic.showAll();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-散列（HashTable）"><a href="#6-2-散列（HashTable）" class="headerlink" title="6.2 散列（HashTable）"></a>6.2 散列（HashTable）</h2><p>它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度<br>使用：MD5 和 SHA-1 可以说是目前应用最广泛的Hash算法<br>    java中已经实现<br><img src="http://img.blog.csdn.net/20151110094955099" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;HashTable散列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function HashTable() &#123;</span><br><span class="line">   this.table = new Array(137); //为了避免碰撞，首先要确保散列表中用来存储数据的数组其大小是个质数。这一点很关</span><br><span class="line">键，这和计算散列值时使用的取余运算有关。</span><br><span class="line">   this.simpleHash = simpleHash;   //简单的散列表</span><br><span class="line">   this.betterHash = betterHash;   //更好的HashTable，避免碰撞</span><br><span class="line">   this.showDistro = showDistro;</span><br><span class="line">   this.put = put;</span><br><span class="line">   //this.get = get;</span><br><span class="line">&#125;</span><br><span class="line">function put(data) &#123;</span><br><span class="line">   var pos = this.simpleHash(data);</span><br><span class="line">   this.table[pos] = data;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">function simpleHash(data) &#123;</span><br><span class="line">   var total = 0;</span><br><span class="line">   for (var i = 0; i &lt; data.length; ++i) &#123;</span><br><span class="line">      total += data.charCodeAt(i);</span><br><span class="line">   &#125;</span><br><span class="line">   document.write(&quot;Hash value: &quot; + data + &quot; -&gt; &quot; + total+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">   return total % this.table.length;</span><br><span class="line">&#125;</span><br><span class="line">function showDistro() &#123;</span><br><span class="line">   var n = 0;</span><br><span class="line">   for (var i = 0; i &lt; this.table.length; ++i) &#123;</span><br><span class="line">      if (this.table[i] != undefined) &#123;</span><br><span class="line">         document.write(i + &quot;: &quot; + this.table[i]+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">function betterHash(string) &#123;</span><br><span class="line">   const H = 31;  //较小的质数  书上37不行 </span><br><span class="line">   var total = 0;</span><br><span class="line">   for (var i = 0; i &lt; string.length; ++i) &#123;</span><br><span class="line">      total += H * total + string.charCodeAt(i);</span><br><span class="line">   &#125;</span><br><span class="line">   total = total % this.table.length;</span><br><span class="line">   if (total &lt; 0) &#123;</span><br><span class="line">      total += this.table.length-1;</span><br><span class="line">   &#125;</span><br><span class="line">   return parseInt(total);</span><br><span class="line">&#125;</span><br><span class="line">var someNames = [&quot;David&quot;, &quot;Jennifer&quot;, &quot;Donnie&quot;, &quot;Raymond&quot;,</span><br><span class="line">                 &quot;Cynthia&quot;, &quot;Mike&quot;, &quot;Clayton&quot;, &quot;Danny&quot;, &quot;Jonathan&quot;];</span><br><span class="line">var hTable = new HashTable();</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; someNames.length; ++i) &#123;</span><br><span class="line">   hTable.put(someNames[i]);</span><br><span class="line">&#125;</span><br><span class="line">hTable.showDistro();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20151110095013990" alt="这里写图片描述"><br>这就是碰撞，为避免碰撞，使用betterHash<br>修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// var pos = this.simpleHash(data);</span></span><br><span class="line">   <span class="keyword">var</span> pos = <span class="keyword">this</span>.betterHash(data);</span><br><span class="line">   <span class="keyword">this</span>.table[pos] = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构8-图（Graph）</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%848-%E5%9B%BE%EF%BC%88Graph%EF%BC%89/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%848-%E5%9B%BE%EF%BC%88Graph%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p> <strong>图（graph）</strong><br>图由边的集合及顶点的集合组成<br><strong>有向图：</strong><br><img src="http://img.blog.csdn.net/20151208125116430" alt="有向图"><br><strong>无向图：</strong><br><img src="http://img.blog.csdn.net/20151208125202948" alt="这里写图片描述"><br><strong>代码：</strong>        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Graph&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function Graph(v)&#123;</span><br><span class="line">      this.vertices=v;</span><br><span class="line">      this.edges=0;</span><br><span class="line">      this.adj=[];</span><br><span class="line">     for(var i=0;i&lt;this.vertices;++i)&#123;</span><br><span class="line">        this.adj[i]=[];</span><br><span class="line">          // this.adj[i].push(&quot;&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      this.addEdge=addEdge;</span><br><span class="line">      this.showGraph=showGraph;</span><br><span class="line">      </span><br><span class="line">      //深度优先搜索</span><br><span class="line">      this.dfs=dfs;</span><br><span class="line">      this.marked=[];</span><br><span class="line">      for(var i=0;i&lt;this.vertices;++i)&#123;</span><br><span class="line">        this.marked[i]=false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 广度搜索</span><br><span class="line">      this.bfs=bfs;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">//   增加顶点</span><br><span class="line">  function addEdge(v,w)&#123;</span><br><span class="line">      this.adj[v].push(w);</span><br><span class="line">      this.adj[w].push(v);</span><br><span class="line">    this.edges++;      </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  //遍历</span><br><span class="line">  function showGraph()&#123;</span><br><span class="line">      for(var i=0;i&lt;this.vertices;++i)&#123;</span><br><span class="line">          document.write(&apos;&lt;br/&gt;&apos;);</span><br><span class="line">          document.write(i+&quot;--&gt;&quot;);</span><br><span class="line">          for(var j=0;j&lt;this.vertices;++j)&#123;</span><br><span class="line">              if(this.adj[i][j]!=undefined)&#123;</span><br><span class="line">                  document.write(this.adj[i][j]+&apos; &apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  //深度优先搜索</span><br><span class="line">  function dfs(v)&#123;</span><br><span class="line">  //var w;</span><br><span class="line">  this.marked[v]=true;</span><br><span class="line">    if(this.adj[v]!=undefined)&#123;</span><br><span class="line">        document.write(&quot;&lt;br/&gt;访问的节点:&quot;+v);</span><br><span class="line">      &#125;</span><br><span class="line">      // for(var w in this.adj[v])&#123;</span><br><span class="line">      //console.log(this.adj[0].length);    </span><br><span class="line">          var w=this.adj[v].shift();</span><br><span class="line">          while(w!=undefined)&#123;</span><br><span class="line">              if(!this.marked[w])&#123;</span><br><span class="line">              this.dfs(w);</span><br><span class="line">              &#125;</span><br><span class="line">              w=this.adj[v].shift();</span><br><span class="line">          &#125;</span><br><span class="line">     </span><br><span class="line">          //console.log(w);</span><br><span class="line">          //console.log(this.adj[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 广度搜索</span><br><span class="line">    function bfs(s)&#123;</span><br><span class="line">        var queue=[];</span><br><span class="line">        this.marked[s]=true;</span><br><span class="line">        queue.push(s);//添加到队尾</span><br><span class="line">        var w;  //存放邻接表</span><br><span class="line">        while(queue.length&gt;0)&#123;</span><br><span class="line"></span><br><span class="line">           var v=queue.shift();//从队首删除</span><br><span class="line">           if(v!=undefined)&#123;</span><br><span class="line">              document.write(&quot;&lt;br/&gt;访问的节点:&quot;+v);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">             w=this.adj[v].shift();</span><br><span class="line">             while(w!=undefined)&#123;</span><br><span class="line">                if(!this.marked[w])&#123;</span><br><span class="line">                    this.marked[w]=true;</span><br><span class="line">                    queue.push(w);</span><br><span class="line">                &#125;</span><br><span class="line">                 w=this.adj[v].shift();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  //测试</span><br><span class="line">  var  graph=new Graph(5);</span><br><span class="line">  graph.addEdge(0,1);  </span><br><span class="line">  graph.addEdge(0,2);  </span><br><span class="line">  graph.addEdge(1,3);  </span><br><span class="line">  graph.addEdge(2,4);  </span><br><span class="line">    //console.log(graph);</span><br><span class="line">  //console.log(graph.adj);</span><br><span class="line">  graph.showGraph();</span><br><span class="line">    document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">    document.write(&quot;======深度度优先搜索=====&quot;);</span><br><span class="line">    graph.dfs(0);</span><br><span class="line">    document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">    document.write(&quot;======广度优先搜索=====&quot;);</span><br><span class="line">    var  graph1=new Graph(5);</span><br><span class="line">    graph1.addEdge(0,1);  </span><br><span class="line">    graph1.addEdge(0,2);  </span><br><span class="line">    graph1.addEdge(1,3);  </span><br><span class="line">    graph1.addEdge(2,4);  </span><br><span class="line">    graph1.bfs(0);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><blockquote></blockquote><p>0–&gt;1 2<br>1–&gt;0 3<br>2–&gt;0 4<br>3–&gt;1<br>4–&gt;2<br>======深度度优先搜索=====<br>访问的节点:0<br>访问的节点:1<br>访问的节点:3<br>访问的节点:2<br>访问的节点:4<br>======广度优先搜索=====<br>访问的节点:0<br>访问的节点:1<br>访问的节点:2<br>访问的节点:3<br>访问的节点:4            </p><p>深度搜索的含义：<br><img src="http://img.blog.csdn.net/20151208125306927" alt="深度搜索"><br>广度搜索的含义：<br><img src="http://img.blog.csdn.net/20151208125325697" alt="广度搜索"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构7-二叉搜索树（BST）</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树-："><a href="#二叉树-：" class="headerlink" title="二叉树 ："></a>二叉树 ：</h2><p><img src="http://img.blog.csdn.net/20151110101942285" alt="这里写图片描述"></p><p>闲话少说，直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;BST&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //结点</span><br><span class="line">    function Node(data,left,right)&#123;</span><br><span class="line">        this.data=data;</span><br><span class="line">        this.left=left;</span><br><span class="line">        this.right=right;</span><br><span class="line">        this.floor=floor;  //层数</span><br><span class="line">        this.show=show;</span><br><span class="line">    &#125;</span><br><span class="line">    function floor()&#123;</span><br><span class="line">      return this.floor;</span><br><span class="line">    &#125;</span><br><span class="line">    function show()&#123;</span><br><span class="line">        return this.data;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function BST()&#123;</span><br><span class="line">        this.root=null;</span><br><span class="line">        this.insert=insert; //插入数据</span><br><span class="line">        this.inOrder=inOrder; //中序排列，详细见后面解释</span><br><span class="line">        this.preOrder=preOrder; //先序排序</span><br><span class="line">        this.postOrder=postOrder; //后续排序</span><br><span class="line">        this.getMax=getMax; //得到最大值</span><br><span class="line">      this.getMin=getMin; //得到最小值</span><br><span class="line">      this.find=find; //查找</span><br><span class="line">      this.remove=remove; //删除节点</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function insert(data)&#123;</span><br><span class="line">       var n=new Node(data,null,null);</span><br><span class="line">        if(this.root==null)&#123;</span><br><span class="line">            this.root=n;</span><br><span class="line">            this.root.floor=1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            var current=this.root;</span><br><span class="line">            var parent;</span><br><span class="line">                var c=1;    </span><br><span class="line">            while(true)&#123;</span><br><span class="line">                parent=current;  </span><br><span class="line">                if(data&lt;current.data)&#123;</span><br><span class="line">                        current=current.left;</span><br><span class="line">                        c++;  //计算层数的计数器加1</span><br><span class="line">                    if(current==null)&#123;</span><br><span class="line">                        parent.left=n;</span><br><span class="line">                        parent.left.floor=c;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    current=current.right;</span><br><span class="line">                        c++;   //加1</span><br><span class="line">                    if(current==null)&#123;</span><br><span class="line">                        parent.right=n;</span><br><span class="line">                        //rHeight++;</span><br><span class="line">                        // console.log(&quot;**&quot;+rHeight+&quot;**&quot;);</span><br><span class="line">                        parent.right.floor=c;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  //中序遍历</span><br><span class="line">  function inOrder(node)&#123;</span><br><span class="line">      if(!(node==null))&#123;</span><br><span class="line">          inOrder(node.left);</span><br><span class="line">          document.write(node.show()+&quot; &quot;);</span><br><span class="line">          document.write(&quot;层数&quot;+node.floor+&quot;&lt;br/&gt;&quot;);</span><br><span class="line">          inOrder(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">       //console.count(&quot;inOrder被执行的次数&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  //先序遍历</span><br><span class="line">   function preOrder(node)&#123;</span><br><span class="line">      if(!(node==null))&#123;</span><br><span class="line">          document.write(node.show()+&quot; &quot;);</span><br><span class="line">          preOrder(node.left);</span><br><span class="line">          preOrder(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //后序遍历</span><br><span class="line">   function postOrder(node)&#123;</span><br><span class="line">      if(!(node==null))&#123;</span><br><span class="line">          postOrder(node.left);        </span><br><span class="line">          postOrder(node.right);</span><br><span class="line">            document.write(node.show()+&quot; &quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //查找最大值</span><br><span class="line">  function getMax()&#123;</span><br><span class="line">     var current=this.root;</span><br><span class="line">    while(!(current.right==null))&#123;</span><br><span class="line">          current=current.right;</span><br><span class="line">        &#125;</span><br><span class="line">    return current.data;</span><br><span class="line">  &#125;</span><br><span class="line">  //查找最小值</span><br><span class="line">   function getMin()&#123;</span><br><span class="line">     var current=this.root;</span><br><span class="line">    while(!(current.left==null))&#123;</span><br><span class="line">          current=current.left;</span><br><span class="line">        &#125;</span><br><span class="line">    return current.data;</span><br><span class="line">  &#125;</span><br><span class="line">  //带参数---查找最小值</span><br><span class="line">  function getSmallest(node)&#123;</span><br><span class="line">  while(!(node.left==null))&#123;</span><br><span class="line">  node=node.left;</span><br><span class="line">  &#125;</span><br><span class="line">   return node;</span><br><span class="line">  &#125;</span><br><span class="line">  //查找</span><br><span class="line">  function find(data)&#123;</span><br><span class="line">    var current=this.root;</span><br><span class="line">    while(current!=null)&#123;</span><br><span class="line">          if(current.data==data)&#123;</span><br><span class="line">              document.write(&quot;&lt;br/&gt;找到【&quot;+data+&quot;】节点&lt;br/&gt;&quot;);</span><br><span class="line">              return current;</span><br><span class="line">            &#125;else if(data&lt;current.data)&#123;</span><br><span class="line">               current=current.left;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">               current=current.right;</span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">     document.write(&quot;&lt;br/&gt;没有找到【&quot;+data+&quot;】 节点&lt;br/&gt;&quot;);</span><br><span class="line">//     return current;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //删除节点-详细解释见后后面</span><br><span class="line">     function remove(data) &#123;</span><br><span class="line">root = removeNode(this.root, data);</span><br><span class="line">       //其实root=没有用处，只是保留了函数执行的地址</span><br><span class="line">&#125;</span><br><span class="line">function removeNode(node, data) &#123;</span><br><span class="line">          if (node == null) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">if (data == node.data) &#123;</span><br><span class="line">// 没有子节点的节点</span><br><span class="line">if (node.left == null &amp;&amp; node.right == null) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">// 没有左子节点的节点</span><br><span class="line">if (node.left == null) &#123;</span><br><span class="line">return node.right;</span><br><span class="line">&#125;</span><br><span class="line">// 没有右子节点的节点</span><br><span class="line">if (node.right == null) &#123;</span><br><span class="line">return node.left;</span><br><span class="line">&#125;</span><br><span class="line">// 有两个子节点的节点</span><br><span class="line">var tempNode = getSmallest(node.right);</span><br><span class="line">node.data = tempNode.data;</span><br><span class="line">node.right = removeNode(node.right, tempNode.data);</span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line">else if (data &lt; node.data) &#123;</span><br><span class="line">node.left = removeNode(node.left, data);</span><br><span class="line">               </span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">node.right = removeNode(node.right, data);</span><br><span class="line">              // console.log(node);</span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  //测试</span><br><span class="line">      var nums=new BST();</span><br><span class="line">      nums.insert(56);</span><br><span class="line">      nums.insert(22);  </span><br><span class="line">      nums.insert(81);</span><br><span class="line">      nums.insert(10);</span><br><span class="line">      nums.insert(30);</span><br><span class="line">      nums.insert(77);</span><br><span class="line">      nums.insert(92);</span><br><span class="line">      nums.insert(100);</span><br><span class="line">      document.write(&quot;*****************中序遍历***************&lt;/br&gt;&quot;);</span><br><span class="line">      inOrder(nums.root);</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************先序遍历***************&lt;/br&gt;&quot;);</span><br><span class="line">      preOrder(nums.root);</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************后序遍历***************&lt;/br&gt;&quot;);</span><br><span class="line">      postOrder(nums.root);</span><br><span class="line">      //nums.show();</span><br><span class="line">      //console.log(nums);  </span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************最大值/最小值************&lt;/br&gt;&quot;);</span><br><span class="line">      document.write(nums.getMax()+&quot;/&quot;+nums.getMin());</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************查找************&lt;/br&gt;&quot;);</span><br><span class="line">    nums.find(100);</span><br><span class="line">      document.write(&quot;&lt;/br&gt;***************删除节点81后************&lt;/br&gt;&quot;);</span><br><span class="line">      nums.remove(81);</span><br><span class="line">      console.log(nums);</span><br><span class="line">      preOrder(nums.root);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://img.blog.csdn.net/20151110102901708" alt="这里写图片描述"></p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>中序遍历：<br><img src="http://img.blog.csdn.net/20151110102019745" alt="这里写图片描述"><br>理解双层递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(node == <span class="literal">null</span>)) &#123;</span><br><span class="line">        inOrder(node.left);                             <span class="comment">//@1</span></span><br><span class="line">        <span class="built_in">document</span>.document(node.show() + <span class="string">" "</span>);           <span class="comment">//@2</span></span><br><span class="line">        inOrder(node.right);                            <span class="comment">//@3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inOrder(nums.root);    <span class="comment">//开始执行</span></span><br></pre></td></tr></table></figure><p>从根节点开始：<br><img src="http://img.blog.csdn.net/20151110102238331" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20151110102715132" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151110102731867" alt="这里写图片描述"></p><h2 id="删除节点："><a href="#删除节点：" class="headerlink" title="删除节点："></a>删除节点：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">root = removeNode(<span class="keyword">this</span>.root, data);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单接受待删除的数据，具体执行是removeNode函数；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNode</span>(<span class="params">node, data</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>待删除的节点是：</strong><br><strong>1.叶子结点</strong>，只需要将从父节点只想它的链接指向null；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;   <span class="comment">//递归，找到节点置为空即可</span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//其他情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (data &lt; node.data) &#123;</span><br><span class="line">node.left = removeNode(node.left, data);  <span class="comment">//#1            </span></span><br><span class="line"><span class="keyword">return</span> node; <span class="comment">//#2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">node.right = removeNode(node.right, data);<span class="comment">//#3</span></span><br><span class="line"><span class="keyword">return</span> node; <span class="comment">//#4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过if else逻辑找到node节点</p><hr><pre><code>//#1  node.left=null(后面的函数递归后返回的值)//#3  node.right=null(后面的函数递归后返回的值)</code></pre><hr><p><strong>2.只包含一个子节点</strong>，原本指向它的节点指向它的子节点。<br><strong>3.左右子树都有的时候</strong>。两种做法：找到左子树的最大值或者右子树的最小值。这里我们用第二种。</p><ul><li>查找右子树的最小值，创建一个临时的节点tempNode。</li><li>将临时节点的值赋值给待删除节点</li><li>删除临时节点</li></ul><p>注意：</p><hr><p>//#2 //#4必须有，如果没有，则删除节点下面的所有子树都将被删除。<br>真个过程举个形象的说明，遍历的时候把节点之间的链条解开进行查询，return node；递归查询到最后一级后，由下向上对链条进行缝合。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构5-链表（包括循环链表 双向链表）</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8C%85%E6%8B%AC%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8C%85%E6%8B%AC%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-一般链表"><a href="#1-一般链表" class="headerlink" title="1.一般链表"></a>1.一般链表</h2><p>图解链表：<br><img src="http://img.blog.csdn.net/20151020163459524" alt="这里写图片描述"><br>链表<br><img src="http://img.blog.csdn.net/20151020163616943" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20151020163716990" alt="这里写图片描述"></p><p>实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; &gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    function Node(ele) &#123;</span><br><span class="line">        this.ele=ele;</span><br><span class="line">        this.next=null;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    function LList()&#123;</span><br><span class="line">       this.head=new Node(&quot;head&quot;);</span><br><span class="line">        this.find=find;</span><br><span class="line">         this.insert=insert;</span><br><span class="line">           this.findPrevious=findPrevious;</span><br><span class="line">           this.remove=remove;</span><br><span class="line">           this.display=display;</span><br><span class="line">       // this.Node=Node;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      function find(item)&#123;</span><br><span class="line">        var currNode=this.head;</span><br><span class="line">      // document.write(currNode);</span><br><span class="line">       // console.log(currNode);</span><br><span class="line">            while(currNode.ele!=item)</span><br><span class="line">        &#123;currNode=currNode.next;&#125;</span><br><span class="line">        return currNode;</span><br><span class="line">      &#125;</span><br><span class="line">      function insert(newElement,item)</span><br><span class="line">      &#123;</span><br><span class="line">      var newNode=new Node(newElement);</span><br><span class="line">      var current=this.find(item);</span><br><span class="line">       newNode.next=current.next;</span><br><span class="line">       current.next=newNode;</span><br><span class="line">      &#125;</span><br><span class="line">      function display()&#123;</span><br><span class="line">      var currNode=this.head;</span><br><span class="line">        while(!(currNode.next==null))</span><br><span class="line">        &#123;document.write(currNode.next.ele+&quot; &quot;);</span><br><span class="line">         currNode=currNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      function findPrevious(item)&#123;</span><br><span class="line">        var currNode=this.head;</span><br><span class="line">        while(!(currNode.next==null)&amp;&amp;(currNode.next.ele != item))&#123;</span><br><span class="line">            currNode=currNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">           return currNode;</span><br><span class="line">      &#125;</span><br><span class="line">      function remove(item)&#123;</span><br><span class="line">         var prevNode=this.findPrevious(item);</span><br><span class="line">       // document.write(prevNode.ele);</span><br><span class="line">        if(!(prevNode.next==null))&#123;</span><br><span class="line">           prevNode.next=prevNode.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     var cities=new LList();</span><br><span class="line">      document.write(&quot;=========插入数据==========&lt;br/&gt;&quot;);</span><br><span class="line">      cities.insert(&quot;Con&quot;,&quot;head&quot;);</span><br><span class="line">      cities.insert(&quot;Rus&quot;,&quot;Con&quot;);</span><br><span class="line">      cities.insert(&quot;Alm&quot;,&quot;Rus&quot;);</span><br><span class="line">      cities.insert(&quot;Tom&quot;,&quot;Alm&quot;);</span><br><span class="line">      cities.display();</span><br><span class="line">      document.write(&quot;&lt;br/&gt;=========删除数据==========&lt;br/&gt;&quot;);</span><br><span class="line">      cities.remove(&quot;Rus&quot;);</span><br><span class="line">      cities.display();</span><br><span class="line">      </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>对比：find()  findPrevious()<br>while语句多了条件<strong>!(currNode.next==null)</strong><br>这个能保证remove()调用时候，删除链表中没有的节点，会返回最后一个节点，这样remove()执行没有任何结果，而链表能够正常的显示。find()中不能使用，原理一样，想一想为什么？</p><h2 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2.双向链表"></a>2.双向链表</h2><p><img src="http://img.blog.csdn.net/20151020164155783" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;无标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function Node(element) &#123;</span><br><span class="line">this.element = element;</span><br><span class="line">this.next = null;</span><br><span class="line">this.previous = null;</span><br><span class="line">&#125;</span><br><span class="line">function LList() &#123;</span><br><span class="line">this.head = new Node(&quot;head&quot;);</span><br><span class="line">this.find = find;</span><br><span class="line">this.insert = insert;</span><br><span class="line">this.display = display;</span><br><span class="line">this.remove = remove;</span><br><span class="line">this.findLast = findLast;</span><br><span class="line">this.dispReverse = dispReverse;</span><br><span class="line">&#125;</span><br><span class="line">function dispReverse() &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">currNode = this.findLast();</span><br><span class="line">while (!(currNode.previous == null)) &#123;</span><br><span class="line">document.write(currNode.element+&quot; &quot;);</span><br><span class="line">currNode = currNode.previous;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function findLast() &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">while (!(currNode.next == null)) &#123;</span><br><span class="line">currNode = currNode.next;</span><br><span class="line">&#125;</span><br><span class="line">return currNode;</span><br><span class="line">&#125;</span><br><span class="line">function remove(item) &#123;</span><br><span class="line">var currNode = this.find(item);</span><br><span class="line">if (!(currNode.next == null)) &#123;</span><br><span class="line">currNode.previous.next = currNode.next;</span><br><span class="line">currNode.next.previous = currNode.previous;</span><br><span class="line">currNode.next = null;</span><br><span class="line">currNode.previous = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//findPrevious 没用了，注释掉</span><br><span class="line">/*function findPrevious(item) &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">while (!(currNode.next == null) &amp;&amp;</span><br><span class="line">(currNode.next.element != item)) &#123;</span><br><span class="line">currNode = currNode.next;</span><br><span class="line">&#125;</span><br><span class="line">return currNode;</span><br><span class="line">&#125;*/</span><br><span class="line">function display() &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">while (!(currNode.next == null)) &#123;</span><br><span class="line">document.write(currNode.next.element+&quot; &quot;);</span><br><span class="line">currNode = currNode.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function find(item) &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">while (currNode.element != item) &#123;</span><br><span class="line">currNode = currNode.next;</span><br><span class="line">&#125;</span><br><span class="line">return currNode;</span><br><span class="line">&#125;</span><br><span class="line">function insert(newElement, item) &#123;</span><br><span class="line">var newNode = new Node(newElement);</span><br><span class="line">var current = this.find(item);</span><br><span class="line">newNode.next = current.next;  //1</span><br><span class="line">newNode.previous = current;   //2</span><br><span class="line">current.next = newNode;       //3</span><br><span class="line">&#125;</span><br><span class="line">var cities = new LList();</span><br><span class="line">cities.insert(&quot;Conway&quot;, &quot;head&quot;);</span><br><span class="line">cities.insert(&quot;Russellville&quot;, &quot;Conway&quot;);</span><br><span class="line">cities.insert(&quot;Carlisle&quot;, &quot;Russellville&quot;);</span><br><span class="line">cities.insert(&quot;Alma&quot;, &quot;Carlisle&quot;);</span><br><span class="line">//cities.insert(&quot;C&quot;, &quot;Russellville&quot;); //按照原程序写的话，出现很大问题</span><br><span class="line">cities.display();</span><br><span class="line">document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">cities.remove(&quot;Carlisle&quot;);</span><br><span class="line">cities.display();</span><br><span class="line">document.write(&quot;&lt;br/&gt;&quot;);</span><br><span class="line">cities.dispReverse();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这是可以完全运行，但是加上黄色的一句话（从中间随便插入一句）就会出现问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Conway Russellville C Carlisle Alma </span><br><span class="line">Conway Russellville Alma   //C不显示了</span><br><span class="line">Alma Russellville Conway</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20151020164454697" alt="这里写图片描述"><br>看链表结构：<br>1,2,3条线都有，但是从中间插入的时候，会发现缺少4是不行的，于是insert()函数加上这句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(newNode.next!=null)&#123;</span><br><span class="line">newNode.next.previous=newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就行了。同样书中的删除节点图解，也是知识考虑了在尾部删除</p><p><img src="http://img.blog.csdn.net/20151020163955246" alt="这里写图片描述"></p><p>存储一个对象的时候：点对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">function Node(element)&#123;</span><br><span class="line">  this.element=element;</span><br><span class="line">  this.next=null;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function Point(x,y)&#123;</span><br><span class="line">   this.x=x;</span><br><span class="line">    this.y=y;</span><br><span class="line">  &#125;</span><br><span class="line">  function LList()&#123;</span><br><span class="line">    this.head=new Node(&apos;head&apos;);</span><br><span class="line">    //this.head.next=this.head;</span><br><span class="line">    this.find=find;</span><br><span class="line">    this.insert=insert;</span><br><span class="line">    this.display=display;</span><br><span class="line">    this.remove=remove;</span><br><span class="line">    this.findPrevious=findPrevious;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function display()&#123;</span><br><span class="line">    var curr=this.head;</span><br><span class="line">    while(!(curr.next==null))&#123;</span><br><span class="line">       document.write(curr.next.element.x+&apos;/&apos;+curr.next.element.y);</span><br><span class="line">      curr=curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return curr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    function find(item)&#123;</span><br><span class="line">      var currNode=this.head;</span><br><span class="line">      while(!(currNode.element==item))&#123;currNode=currNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return currNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function insert(newElement, item) &#123;</span><br><span class="line">   var newNode = new Node(newElement);</span><br><span class="line">   var current = this.find(item);</span><br><span class="line">   newNode.next = current.next;</span><br><span class="line">   current.next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function  findPrevious(item)&#123;</span><br><span class="line">    var currNode=this.head;</span><br><span class="line">    while(!(currNode.next==null)&amp;&amp;(currNode.next.element!=item))&#123;</span><br><span class="line">      currNode=currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return currNode;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   function remove(item)&#123;</span><br><span class="line">     var prevNode=this.findPrevious(item);</span><br><span class="line">     if((prevNode.next!=null))&#123;</span><br><span class="line">       prevNode.next=prevNode.next.next;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   var p1=new Point(1,2);</span><br><span class="line">   var p2=new Point(3,4);</span><br><span class="line">   </span><br><span class="line">   //document.write(p2.x);</span><br><span class="line">  // console.log(p1);</span><br><span class="line">   var points=new LList();</span><br><span class="line">    points.insert(p1,&apos;head&apos;);</span><br><span class="line">    points.insert(p2,p1);</span><br><span class="line">    points.display();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-循环链表"><a href="#3-循环链表" class="headerlink" title="3.循环链表"></a>3.循环链表</h2><p><img src="http://img.blog.csdn.net/20151020164724099" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;循环链表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function Node(element) &#123;</span><br><span class="line">this.element = element;</span><br><span class="line">this.next = null;</span><br><span class="line">&#125;</span><br><span class="line">function LList() &#123;</span><br><span class="line">this.head = new Node(&quot;head&quot;);</span><br><span class="line">this.head.next=this.head;</span><br><span class="line">this.find = find;</span><br><span class="line">this.insert = insert;</span><br><span class="line">this.display = display;</span><br><span class="line">this.remove = remove;</span><br><span class="line">&#125;</span><br><span class="line">function remove(item) &#123;</span><br><span class="line">var currNode = this.find(item);</span><br><span class="line">if (!(currNode.next == null)) &#123;</span><br><span class="line">currNode.previous.next = currNode.next;</span><br><span class="line">currNode.next.previous = currNode.previous;</span><br><span class="line">currNode.next = null;</span><br><span class="line">currNode.previous = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function display() &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">while (!(currNode.next.element==&quot;head&quot;)&amp;&amp;!(currNode.next == null)) &#123;</span><br><span class="line">document.write(currNode.next.element+&quot; &quot;);</span><br><span class="line">currNode = currNode.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">function find(item) &#123;</span><br><span class="line">var currNode = this.head;</span><br><span class="line">while (!(currNode.next.element==&quot;head&quot;)&amp;&amp;(currNode.element != item)) &#123;</span><br><span class="line">currNode = currNode.next;</span><br><span class="line">&#125;</span><br><span class="line">return currNode;</span><br><span class="line">&#125;</span><br><span class="line">function insert(newElement, item) &#123;</span><br><span class="line">var newNode = new Node(newElement);</span><br><span class="line">var currNode = this.find(item);</span><br><span class="line">if(!(currNode.next.element==&quot;head&quot;))&#123;</span><br><span class="line">newNode.next=currNode.next;  //从中间插入</span><br><span class="line">currNode.next=newNode;</span><br><span class="line">&#125;else&#123; //从尾部插入</span><br><span class="line">newNode.next=this.head;  //从中间插入</span><br><span class="line">currNode.next=newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var cities = new LList();</span><br><span class="line">cities.insert(&quot;Conway&quot;, &quot;head&quot;);</span><br><span class="line">cities.insert(&quot;Russellville&quot;, &quot;Conway&quot;);</span><br><span class="line">cities.insert(&quot;Carlisle&quot;, &quot;Russellville&quot;);</span><br><span class="line">cities.insert(&quot;Alma&quot;, &quot;Carlisle&quot;);</span><br><span class="line">cities.insert(&quot;C&quot;, &quot;Russellville&quot;); </span><br><span class="line">//cities.insert(&quot;D&quot;, &quot;Rus&quot;); </span><br><span class="line">cities.display();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构4-队列2-基数排序</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%972-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%972-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>第一次按个位上的数字进行排序，第二次按十位上的数字进行排序  </p><p>排序：91, 46, 85, 15, 92, 35, 31, 22<br><strong>经过基数排序第一次扫描</strong>之后，数字被分配到如下盒子中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bin 0:</span><br><span class="line">Bin 1: 91, 31</span><br><span class="line">Bin 2: 92, 22</span><br><span class="line">Bin 3:</span><br><span class="line">Bin 4:</span><br><span class="line">Bin 5: 85, 15, 35</span><br><span class="line">Bin 6: 46</span><br><span class="line">Bin 7:</span><br><span class="line">Bin 8:</span><br><span class="line">Bin 9:</span><br></pre></td></tr></table></figure><p>根据盒子的顺序，对数字进行第一次排序的结果如下：<br>91, 31, 92, 22, 85, 15, 35, 46<br>然后根据<strong>十位上的数值再将上次排序</strong>的结果分配到不同的盒子中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bin 0:</span><br><span class="line">Bin 1: 15</span><br><span class="line">Bin 2: 22</span><br><span class="line">Bin 3: 31, 35</span><br><span class="line">Bin 4: 46</span><br><span class="line">Bin 5:</span><br><span class="line">Bin 6:</span><br><span class="line">Bin 7:</span><br><span class="line">Bin 8: 85</span><br><span class="line">Bin 9: 91, 92</span><br></pre></td></tr></table></figure><p>Javascript实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-8 /&gt; </span><br><span class="line">&lt;title&gt;Queue Sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       /*定义队列*/</span><br><span class="line">       function Queue()&#123;</span><br><span class="line">       this.dataStore=[];</span><br><span class="line">       this.enqueue=enqueue;</span><br><span class="line">       this.dequeue=dequeue;</span><br><span class="line">          this.front=front;</span><br><span class="line">          this.back=back;</span><br><span class="line">          this.toStr=toStr;</span><br><span class="line">          this.isEmpty=isEmpty;</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">     function enqueue(element)&#123;</span><br><span class="line">         this.dataStore.push(element);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function dequeue()&#123;</span><br><span class="line">        return this.dataStore.shift();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function front()&#123;</span><br><span class="line">     return this.dataStore[0];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function back()&#123;</span><br><span class="line">     return this.dataStore[this.dataStore.length-1];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function toStr()&#123;</span><br><span class="line">      var retStr=&quot;&quot;;</span><br><span class="line">        for(var i=0;i&lt;this.dataStore.length;i++)&#123;</span><br><span class="line">        retStr+=this.dataStore[i]+&quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(retStr);</span><br><span class="line">         return retStr;</span><br><span class="line">     &#125;</span><br><span class="line">     //判断是否为空</span><br><span class="line">     function isEmpty()&#123;</span><br><span class="line">        if(this.dataStore.length==0)&#123;</span><br><span class="line">          return true;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">           return false;   </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  //========================================================================</span><br><span class="line">     function distribute(nums, queues, n, digit) &#123;</span><br><span class="line">        for (var i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">          if (digit == 1) &#123;  //个位</span><br><span class="line">              queues[nums[i]%10].enqueue(nums[i]);</span><br><span class="line">            &#125; else &#123;  //十位</span><br><span class="line">              queues[Math.floor(nums[i] / 10)].enqueue(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    function collect(queues, nums) &#123;</span><br><span class="line">        var i = 0;</span><br><span class="line">        for (var digit = 0; digit &lt; 10; ++digit) &#123;</span><br><span class="line">            while (!queues[digit].isEmpty()) &#123;  </span><br><span class="line">            nums[i++] = queues[digit].dequeue();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     function dispArray(arr)&#123;</span><br><span class="line">       for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">         document.write(arr[i]+&quot; &quot;);</span><br><span class="line">         // document.write(&apos;&lt;br/&gt;&apos;);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">    var  N=200;//N是要排序的个数 基数排序测试时间：: 4.000ms</span><br><span class="line">    var queues=[];</span><br><span class="line">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">      queues[i]=new Queue(); //分别存储Bin0--bin9</span><br><span class="line">     &#125;;</span><br><span class="line">    var nums=[];</span><br><span class="line">    for (var i = 0; i &lt; N; i++) &#123;</span><br><span class="line">       nums[i]=Math.floor(Math.random()*101);</span><br><span class="line">       // document.write(nums[i]);</span><br><span class="line">       // document.write(&apos;&lt;br/&gt;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*********************/</span><br><span class="line">    /*测试一下时间*/</span><br><span class="line">    console.time(&quot;基数排序测试时间：&quot;);//改变N的值进行测试</span><br><span class="line">    document.write(&quot;原数据：&quot;);</span><br><span class="line">    dispArray(nums);</span><br><span class="line">    distribute(nums,queues,N,1);</span><br><span class="line">    collect(queues,nums);   //nums分散了，收集起来</span><br><span class="line">    document.write(&quot;&lt;br/&gt;个位排序后：&quot;);</span><br><span class="line">    dispArray(nums);</span><br><span class="line">    distribute(nums,queues,N,10);</span><br><span class="line">    collect(queues,nums); </span><br><span class="line">    document.write(&quot;&lt;br/&gt;基数排序后：&quot;);  </span><br><span class="line">    dispArray(nums);</span><br><span class="line">    console.timeEnd(&quot;基数排序测试时间：&quot;);</span><br><span class="line">    </span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构4-队列</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%97/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>队列是一种先进先出（FIFO，first-in-first-out）的数据结构</p><p><strong>javascript代码实现队列：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-8 /&gt; </span><br><span class="line">&lt;title&gt;Queue Sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       /*定义队列*/</span><br><span class="line">       function Queue()&#123;</span><br><span class="line">       this.dataStore=[];</span><br><span class="line">       this.enqueue=enqueue;</span><br><span class="line">       this.dequeue=dequeue;</span><br><span class="line">          this.front=front;</span><br><span class="line">          this.back=back;</span><br><span class="line">          this.toStr=toStr;</span><br><span class="line">          this.isEmpty=isEmpty;</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">     function enqueue(element)&#123;</span><br><span class="line">         this.dataStore.push(element);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function dequeue()&#123;</span><br><span class="line">        return this.dataStore.shift();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function front()&#123;</span><br><span class="line">     return this.dataStore[0];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function back()&#123;</span><br><span class="line">     return this.dataStore[this.dataStore.length-1];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function toStr()&#123;</span><br><span class="line">      var retStr=&quot;&quot;;</span><br><span class="line">        for(var i=0;i&lt;this.dataStore.length;i++)&#123;</span><br><span class="line">        retStr+=this.dataStore[i]+&quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(retStr);</span><br><span class="line">         return retStr;</span><br><span class="line">     &#125;</span><br><span class="line">     //判断是否为空</span><br><span class="line">     function isEmpty()&#123;</span><br><span class="line">        if(this.dataStore.length==0)&#123;</span><br><span class="line">          return true;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">           return false;   </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     var que=new Queue();</span><br><span class="line">     que.enqueue(&quot;Tom&quot;);</span><br><span class="line">     que.enqueue(&quot;Sam&quot;);</span><br><span class="line">     que.enqueue(&quot;Pom&quot;);</span><br><span class="line">     console.log(que.dataStore.length);</span><br><span class="line">     document.write(que.toStr());</span><br><span class="line">     que.dequeue();</span><br><span class="line">     document.write(que.toStr());</span><br><span class="line">    console.log(que.toStr);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>举个案例：</strong><br>常用队列模拟排队的人。下面我们使用队列来模拟跳方块舞的人。<br>当男男女女来到舞池，他们按照自己的性别排成两队。当舞池中有地方空出来时，选两个队列中的第一个人组成舞伴。他们身后的人各自向前移动一位，变成新的队首。当一对舞伴迈入舞池时，主持人会大声喊出他们的名字。当一对舞伴走出舞池，且两排队伍中有任意一队没人时，主持人也会把这个情况告诉大家。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=utf-8 /&gt; </span><br><span class="line">&lt;title&gt;Queue Sample&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       /*定义队列*/</span><br><span class="line">       function Queue()&#123;</span><br><span class="line">       this.dataStore=[];</span><br><span class="line">       this.enqueue=enqueue;</span><br><span class="line">       this.dequeue=dequeue;</span><br><span class="line">          this.front=front;</span><br><span class="line">          this.back=back;</span><br><span class="line">          this.toStr=toStr;</span><br><span class="line">          this.isEmpty=isEmpty;</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">     function enqueue(element)&#123;</span><br><span class="line">         this.dataStore.push(element);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function dequeue()&#123;</span><br><span class="line">        return this.dataStore.shift();</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function front()&#123;</span><br><span class="line">     return this.dataStore[0];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function back()&#123;</span><br><span class="line">     return this.dataStore[this.dataStore.length-1];</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     function toStr()&#123;</span><br><span class="line">      var retStr=&quot;&quot;;</span><br><span class="line">        for(var i=0;i&lt;this.dataStore.length;i++)&#123;</span><br><span class="line">        retStr+=this.dataStore[i]+&quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        //console.log(retStr);</span><br><span class="line">         return retStr;</span><br><span class="line">     &#125;</span><br><span class="line">     //判断是否为空</span><br><span class="line">     function isEmpty()&#123;</span><br><span class="line">        if(this.dataStore.length==0)&#123;</span><br><span class="line">          return true;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">           return false;   </span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">      //舞蹈员性别  姓名</span><br><span class="line">    var  allStr=&quot;F Shun F Tim M Huipin M Lanlan F Ping F Li F Lou M Funr F Sun M Pop&quot;;  </span><br><span class="line">     </span><br><span class="line">      function Dancer(name,sex)&#123;</span><br><span class="line">      this.name=name;</span><br><span class="line">        this.sex=sex;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">     //男女分队</span><br><span class="line">     function getDancers(males,females)&#123;</span><br><span class="line">          var numbers=allStr.split(&quot; &quot;);</span><br><span class="line">         //document.write(numbers);</span><br><span class="line">          //console.log(numbers);</span><br><span class="line">          for(var i=0;i&lt;numbers.length-1;++i)&#123;</span><br><span class="line">             //var dances=numbers[i].trim();</span><br><span class="line">             var sex=numbers[i];</span><br><span class="line">             i++;</span><br><span class="line">             var name=numbers[i]; </span><br><span class="line">            //console.log(name);</span><br><span class="line">            //console.log(sex);</span><br><span class="line">            if(sex == &quot;F&quot;)&#123;  //??????</span><br><span class="line">             famaleDances.enqueue(new Dancer(name,sex));</span><br><span class="line">                 console.log(famaleDances);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">             maleDances.enqueue(new Dancer(name,sex));//整体对象存在队列中</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; </span><br><span class="line">       //队首男女就是要出队的</span><br><span class="line">       function dance(males,famales)&#123;</span><br><span class="line">       document.write(&quot;The dance parter are: &quot;);</span><br><span class="line">            document.write(&quot;&lt;br /&gt;&quot;);</span><br><span class="line">            while(!males.isEmpty() &amp;&amp; !famales.isEmpty())&#123;</span><br><span class="line">                fperson=famales.dequeue();</span><br><span class="line">               // console.log(fperson);</span><br><span class="line">                document.write(&quot;The Famale dance  is:&quot;+fperson.name);               </span><br><span class="line">                person=males.dequeue();</span><br><span class="line">                document.write(&quot; and The Male dance  is:&quot;+person.name);</span><br><span class="line">              document.write(&quot;&lt;br /&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125; </span><br><span class="line">      var maleDances=new Queue();</span><br><span class="line">      var famaleDances=new Queue();</span><br><span class="line">         // document.write(&quot;1&quot;);</span><br><span class="line">      getDancers(maleDances,famaleDances);</span><br><span class="line">      dance(maleDances,famaleDances);</span><br><span class="line">     </span><br><span class="line">       if(!famaleDances.isEmpty())&#123;</span><br><span class="line">          document.write(famaleDances.front().name+&quot;is waiting&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       if(!maleDances.isEmpty())&#123;</span><br><span class="line">          document.write(maleDances.front().name+&quot;is waiting&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构3-栈</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%843-%E6%A0%88/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%843-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>后进先出（LIFO,last-in-first-out）的数据结构<br>类比：堆叠盘子，只能从上面拿走盘子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;栈&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function Stack() &#123;</span><br><span class="line">   this.dataStore = [];</span><br><span class="line">   this.pos = 0;</span><br><span class="line">   this.push=push;</span><br><span class="line">   this.pop=pop;</span><br><span class="line">   this.peek=peek;</span><br><span class="line">   this.clear = clear;</span><br><span class="line">   this.length=length;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        function push(element)&#123;</span><br><span class="line">        this.dataStore[this.pos++]=element;</span><br><span class="line">        &#125;</span><br><span class="line">        function peek()&#123;</span><br><span class="line">        return this.dataStore[this.top-1];</span><br><span class="line">        &#125;</span><br><span class="line">        function pop()&#123;</span><br><span class="line">        return this.dataStore[--this.top];</span><br><span class="line">        &#125;</span><br><span class="line">        function clear()&#123;</span><br><span class="line">        this.top=0;</span><br><span class="line">        &#125;</span><br><span class="line">        function length()&#123;</span><br><span class="line">        return this.top;</span><br><span class="line">        &#125;</span><br><span class="line">       /************************************************************************/</span><br><span class="line">       var s=new Stack();</span><br><span class="line">       s.push(&quot;Tom&quot;);</span><br><span class="line">       s.push(&quot;Som&quot;);</span><br><span class="line">       s.push(&quot;Dom&quot;);</span><br><span class="line">       s.push(&quot;Fom&quot;);</span><br><span class="line">       // document.write(s.dataStore);</span><br><span class="line">       console.log(s);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子：<br>十进制转化为二进制，使用栈实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*数制间的相互转换*/</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">mulBase</span>(<span class="params">num,base</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s=<span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">        s.push(num% base);</span><br><span class="line">        num=<span class="built_in">Math</span>.floor(num /=base);</span><br><span class="line">        &#125;<span class="keyword">while</span>(num &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">var</span> cov=<span class="string">""</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(s.length());</span><br><span class="line">        <span class="keyword">while</span>(s.length() &gt;<span class="number">0</span>)&#123;</span><br><span class="line">        cov += s.pop();</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cov;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">var</span> num=<span class="number">32</span>;</span><br><span class="line">       <span class="keyword">var</span> newNum=mulBase(<span class="number">32</span>,<span class="number">2</span>);  <span class="comment">//十进制转换为二进制</span></span><br><span class="line">       <span class="built_in">console</span>.log(newNum);</span><br><span class="line">       <span class="built_in">document</span>.write(newNum);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构2-列表</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842-%E5%88%97%E8%A1%A8/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类型定义"><a href="#1-类型定义" class="headerlink" title="1. 类型定义"></a>1. 类型定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">listSize（属性）         列表的元素个数</span><br><span class="line">pos（ 属性）             列表的当前位置</span><br><span class="line">length（ 属性）    返回列表中元素的个数</span><br><span class="line">clear（ 方法）    清空列表中的所有元素</span><br><span class="line">toString（ 方法）    返回列表的字符串形式</span><br><span class="line">getElement（ 方法）   返回当前位置的元素</span><br><span class="line">insert（ 方法）    在现有元素后插入新元素</span><br><span class="line">append（ 方法）   在列表的末尾添加新元素</span><br><span class="line">remove（ 方法）   从列表中删除元素</span><br><span class="line">front（ 方法）    将列表的当前位置设移动到第一个元素</span><br><span class="line">end（ 方法）    将列表的当前位置移动到最后一个元素</span><br><span class="line">prev（方法）    将当前位置后移一位</span><br><span class="line">next（ 方法）        将当前位置前移一位</span><br><span class="line">currPos（ 方法）    返回列表的当前位置</span><br><span class="line">moveTo（方法）       将当前位置移动到指定位置</span><br></pre></td></tr></table></figure><h2 id="2-实现列表类"><a href="#2-实现列表类" class="headerlink" title="2.实现列表类"></a>2.实现列表类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;实现列表类&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function List() &#123;</span><br><span class="line">   this.listSize = 0;</span><br><span class="line">   this.pos = 0;</span><br><span class="line">   this.dataStore = [];</span><br><span class="line">   //this.clear = clear;</span><br><span class="line">   this.find = find;</span><br><span class="line">   this.toString = toString;</span><br><span class="line">   //this.insert = insert;</span><br><span class="line">   this.append = append;</span><br><span class="line">   this.remove = remove;</span><br><span class="line">   this.front = front;</span><br><span class="line">   //this.end = end;</span><br><span class="line">  // this.prev = prev;</span><br><span class="line">   //this.next = next;</span><br><span class="line">   this.length = length;</span><br><span class="line">   //this.currPos = currPos;</span><br><span class="line">   //this.moveTo = moveTo;</span><br><span class="line">   this.getElement = getElement;</span><br><span class="line">  // this.length = length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function append(element) &#123;</span><br><span class="line">   this.dataStore[this.listSize++] = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function find(element) &#123;</span><br><span class="line">   for (var i = 0; i &lt; this.dataStore.length; ++i) &#123;</span><br><span class="line">      if (this.dataStore[i] == element) &#123;</span><br><span class="line">         return i;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function remove(element) &#123;</span><br><span class="line">   var foundAt = this.find(element);</span><br><span class="line">   if (foundAt &gt; -1) &#123;</span><br><span class="line">      this.dataStore.splice(foundAt,1);</span><br><span class="line">      --this.listSize;</span><br><span class="line">      return true;</span><br><span class="line">   &#125;</span><br><span class="line">   return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function toString() &#123;</span><br><span class="line">    return this.dataStore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> function front()&#123;</span><br><span class="line">  // return this.dataStore[0];</span><br><span class="line">  //或者</span><br><span class="line">   this.pos=0;</span><br><span class="line">  &#125;</span><br><span class="line">function getElement()&#123;</span><br><span class="line">return this.dataStore[this.pos];</span><br><span class="line">&#125;</span><br><span class="line">var names = new List();</span><br><span class="line">names.append(&quot;Cynthia&quot;);</span><br><span class="line">names.append(&quot;Raymond&quot;);</span><br><span class="line">names.append(&quot;Barbara&quot;);</span><br><span class="line">console.log(names.toString());</span><br><span class="line">names.remove(&quot;Raymond&quot;);</span><br><span class="line">console.log(names.toString());</span><br><span class="line">// console.log(names.front());</span><br><span class="line">names.front();</span><br><span class="line">console.log(names.getElement());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-实际例子"><a href="#3-实际例子" class="headerlink" title="3.实际例子"></a>3.实际例子</h2><p>从txt文件中读取数据（注意：这种方法只是适合在IE浏览器）<br>文档内容：</p><blockquote><p>1.sam<br>2.tim<br>3.jom<br>4.dim<br>5.pop<br>6.hello<br>7.ming</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;无标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  function List()&#123;</span><br><span class="line">   this.listSize = 0;</span><br><span class="line">   this.pos = 0;</span><br><span class="line">   this.dataStore = [];</span><br><span class="line">   //this.clear = clear;</span><br><span class="line">   this.find = find;</span><br><span class="line">   this.toString = toString;</span><br><span class="line">   //this.insert = insert;</span><br><span class="line">   this.append = append;</span><br><span class="line">   this.remove = remove;</span><br><span class="line">   this.front = front;</span><br><span class="line">   this.end = end;</span><br><span class="line">   //this.prev = prev;</span><br><span class="line">   this.next = next;</span><br><span class="line">   this.length = length;</span><br><span class="line">   this.currPos = currPos;</span><br><span class="line">   //this.moveTo = moveTo;</span><br><span class="line">   this.getElement = getElement;</span><br><span class="line">   this.length = length;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function append(element)&#123;</span><br><span class="line">  this.dataStore[this.listSize++]=element;</span><br><span class="line">  &#125;</span><br><span class="line">  function find(element)&#123;</span><br><span class="line">  for (var i = 0; i &lt; this.dataStore.length; i++) &#123;</span><br><span class="line">  if(this.dataStore[i]==element)&#123;</span><br><span class="line">  return i;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  return -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function remove(element)&#123;</span><br><span class="line">  var foundAt=this.find(element);</span><br><span class="line">  if(foundAt &gt; -1)&#123;</span><br><span class="line">  this.dataStore.splice(foundAt,1);</span><br><span class="line">  --this.listSize;</span><br><span class="line">  return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function toString()&#123;</span><br><span class="line">  return this.dataStore;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function front()&#123;</span><br><span class="line">  // return this.dataStore[0];</span><br><span class="line">   this.pos=0;</span><br><span class="line">  &#125;</span><br><span class="line">    function end()&#123;</span><br><span class="line">  // return this.dataStore[0];</span><br><span class="line">   this.pos=this.listSize-1;</span><br><span class="line">  &#125;</span><br><span class="line">  function currPos()&#123;</span><br><span class="line">  return this.pos;</span><br><span class="line">  &#125;</span><br><span class="line">  function next()&#123;</span><br><span class="line">  if(this.pos&lt;this.listSize-1)&#123;</span><br><span class="line">  ++this.pos();</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">function getElement()&#123;</span><br><span class="line">return this.dataStore[this.pos];</span><br><span class="line">&#125;</span><br><span class="line">  function createArr()&#123;</span><br><span class="line">  // var arr=read(file).split(&quot;/n&quot;);</span><br><span class="line">  //读取文件</span><br><span class="line">  var s=[],arr=[];</span><br><span class="line">    var fso, f1, ts;</span><br><span class="line">      var ForReading = 1;</span><br><span class="line">      var src=&quot;E:\\jsDS\\test.txt&quot;;</span><br><span class="line">      fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);</span><br><span class="line">      ts = fso.OpenTextFile(src,1,true); </span><br><span class="line">      // document.all.mailbdy.value=ts.ReadAll();</span><br><span class="line">      while (!ts.AtEndOfStream) </span><br><span class="line">&#123; </span><br><span class="line">str=ts.Readline(); </span><br><span class="line">          // s=str.split(&quot;\n&quot;);</span><br><span class="line">          s.push(str);</span><br><span class="line">&#125;  </span><br><span class="line">/*console.log(&quot;==================&quot;);</span><br><span class="line">console.log(s);</span><br><span class="line">console.log(&quot;==================&quot;);*/</span><br><span class="line">  for (var i = 0; i &lt; s.length; i++) &#123;</span><br><span class="line">   arr[i]=s[i].trim();</span><br><span class="line">  &#125;;</span><br><span class="line">  return arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function displayList(list)&#123;</span><br><span class="line">  // for (list.front();list.currPos()&lt;list.length();list.next()) &#123;</span><br><span class="line">  var lists=[];</span><br><span class="line">  list.front();</span><br><span class="line">  while(list.currPos() &lt; list.length)&#123;</span><br><span class="line">  lists.push(list.getElement());</span><br><span class="line">  list.next();</span><br><span class="line">  &#125;</span><br><span class="line">         return lists;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var movies=createArr();</span><br><span class="line">  var mlist=new List();</span><br><span class="line">  for (var i = 0; i &lt; movies.length; i++) &#123;</span><br><span class="line">   console.log(movies[i]);</span><br><span class="line">  mlist.append(movies[i]);</span><br><span class="line">  &#125;;</span><br><span class="line">  console.log(mlist);</span><br><span class="line">   //console.log(displayList(mlist));</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构1-数组</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841-%E6%95%B0%E7%BB%84/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>书籍：</p><blockquote><p>数据结构与算法javascript描述</p></blockquote><p>数组比较简单，这里只是简单介绍：</p><h2 id="1-使用数组"><a href="#1-使用数组" class="headerlink" title="1.使用数组"></a>1.使用数组</h2><h3 id="1-1-创建数组"><a href="#1-1-创建数组" class="headerlink" title="1.1 创建数组"></a>1.1 创建数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种形式</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//第二种形式</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">7</span>,<span class="number">4</span>,<span class="number">1776</span>];</span><br></pre></td></tr></table></figure><p>大多数JavaScript 专家推荐使用[]操作符，和使用Array 的构造函数相比，这种方式被认为效率更高（new创建的对象，会一直存在于内存中）</p><h3 id="1-2-读写数组"><a href="#1-2-读写数组" class="headerlink" title="1.2 读写数组"></a>1.2 读写数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; ++i) &#123;</span><br><span class="line">sum += numbers[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-字符串生成数组"><a href="#1-3-字符串生成数组" class="headerlink" title="1.3 字符串生成数组"></a>1.3 字符串生成数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的这一小段程序演示了split() 方法的工作原理：</span></span><br><span class="line"><span class="keyword">var</span> sentence = <span class="string">"the quick brown fox jumped over the lazy dog"</span>;</span><br><span class="line"><span class="keyword">var</span> words = sentence.split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; words.length; ++i) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"word "</span> + i + <span class="string">": "</span> + words[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-对数组的整体性操作"><a href="#1-4-对数组的整体性操作" class="headerlink" title="1.4 对数组的整体性操作"></a>1.4 对数组的整体性操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">nums[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> samenums = nums;</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">400</span>;</span><br><span class="line"><span class="built_in">console</span>.log(samenums[<span class="number">0</span>]); <span class="comment">// 显示400</span></span><br></pre></td></tr></table></figure><p>这种行为被称为<strong>浅复制</strong>，新数组依然指向原来的数组。一个更好的方案是使用<strong>深复制</strong>，将<br>原数组中的每一个元素都复制一份到新数组中。可以写一个深复制函数来做这件事：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; ++i) &#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样，下述代码片段的输出就和我们希望的一样了：</span></span><br><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">nums[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> samenums = [];</span><br><span class="line">copy(nums, samenums);</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">400</span>;</span><br><span class="line"><span class="built_in">console</span>.log(samenums[<span class="number">0</span>]); <span class="comment">// 显示 1</span></span><br></pre></td></tr></table></figure><h2 id="2-存取函数"><a href="#2-存取函数" class="headerlink" title="2. 存取函数"></a>2. 存取函数</h2><h3 id="2-1-查找元素"><a href="#2-1-查找元素" class="headerlink" title="2.1 查找元素"></a>2.1 查找元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"David"</span>, <span class="string">"Cynthia"</span>, <span class="string">"Raymond"</span>, <span class="string">"Clayton"</span>, <span class="string">"Jennifer"</span>];</span><br><span class="line">putstr(<span class="string">"Enter a name to search for: "</span>);</span><br><span class="line"><span class="keyword">var</span> name = readline();</span><br><span class="line"><span class="keyword">var</span> position = names.indexOf(name);</span><br><span class="line"><span class="keyword">if</span> (position &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Found "</span> + name + <span class="string">" at position "</span> + position);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">" not found in array."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-两个函数使用"><a href="#2-2-两个函数使用" class="headerlink" title="2.2 两个函数使用"></a>2.2 两个函数使用</h3><p>concat  连接<br>splice 截取<br>join() 和toString()  将数组转化为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cisDept = [<span class="string">"Mike"</span>, <span class="string">"Clayton"</span>, <span class="string">"Terrill"</span>, <span class="string">"Danny"</span>, <span class="string">"Jennifer"</span>];</span><br><span class="line"><span class="keyword">var</span> dmpDept = [<span class="string">"Raymond"</span>, <span class="string">"Cynthia"</span>, <span class="string">"Bryan"</span>];</span><br><span class="line"><span class="keyword">var</span> itDiv = cis.concat(dmp);</span><br><span class="line"><span class="built_in">console</span>.log(itDiv);</span><br><span class="line">itDiv = dmp.concat(cisDept);</span><br><span class="line"><span class="built_in">console</span>.log(itDiv);</span><br><span class="line"><span class="comment">//输出为：</span></span><br><span class="line">Mike,Clayton,Terrill,Danny,Jennifer,Raymond,Cynthia,Bryan</span><br><span class="line">Raymond,Cynthia,Bryan,Mike,Clayton,Terrill,Danny,Jennifer</span><br></pre></td></tr></table></figure><h2 id="3-可变函数"><a href="#3-可变函数" class="headerlink" title="3. 可变函数"></a>3. 可变函数</h2><p><strong>简单函数：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push()          末尾增加元素</span><br><span class="line">unshift()       在开头添加元素</span><br><span class="line">pop()           在末尾删除元素</span><br><span class="line">shift()         在开头删除元素</span><br></pre></td></tr></table></figure></p><p><strong>从数组中间删除元素：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> newElements = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">nums.splice(<span class="number">3</span>,<span class="number">0</span>,newElements);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// 1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure><p><strong>排序函数：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">nums.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"David"</span>,<span class="string">"Mike"</span>,<span class="string">"Cynthia"</span>,<span class="string">"Clayton"</span>,<span class="string">"Bryan"</span>,<span class="string">"Raymond"</span>];</span><br><span class="line">names.sort();</span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">// Bryan,Clayton,Cynthia,David,Mike,Raymond</span></span><br></pre></td></tr></table></figure><p>自定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>];</span><br><span class="line">nums.sort(compare);</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// 1,2,3,4,100,200</span></span><br><span class="line"><span class="comment">//sort() 函数使用了compare() 函数对数组按照数字大小进行排序，而不是按照字典顺序。</span></span><br></pre></td></tr></table></figure><h2 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4.迭代器"></a>4.迭代器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   函数      说明                           是否生成新数组</span><br><span class="line">foreach()    全部遍历                           否    </span><br><span class="line">every()      全部返回true，才返回true            否    </span><br><span class="line">some()       只要一个返回true，就返回true         否    </span><br><span class="line">reduce()     不断调用累加值                      否    </span><br><span class="line">map()        符合条件的，类比foreach()           是    </span><br><span class="line">filter()     返回结果为true的函数                是</span><br></pre></td></tr></table></figure><h2 id="5-二维数组和多维数组"><a href="#5-二维数组和多维数组" class="headerlink" title="5.二维数组和多维数组"></a>5.二维数组和多维数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.matrix = <span class="function"><span class="keyword">function</span>(<span class="params">numrows, numcols, initial</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numrows; ++i) &#123;</span><br><span class="line"><span class="keyword">var</span> columns = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; numcols; ++j) &#123;</span><br><span class="line">columns[j] = initial;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = columns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="6-两种特殊的数组"><a href="#6-两种特殊的数组" class="headerlink" title="6.两种特殊的数组"></a>6.两种特殊的数组</h2><p>数组的函数同样适用</p><p><strong>对象数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>对象中的数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">weekTemps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dataStore = [];</span><br><span class="line"><span class="keyword">this</span>.add = add;</span><br><span class="line"><span class="keyword">this</span>.average = average;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">temp</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dataStore.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">total += <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total / <span class="keyword">this</span>.dataStore.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> thisWeek = <span class="keyword">new</span> weekTemps();</span><br><span class="line">thisWeek.add(<span class="number">52</span>);</span><br><span class="line">thisWeek.add(<span class="number">55</span>);</span><br><span class="line">thisWeek.add(<span class="number">61</span>);</span><br><span class="line">thisWeek.add(<span class="number">65</span>);</span><br><span class="line">thisWeek.add(<span class="number">55</span>);</span><br><span class="line">thisWeek.add(<span class="number">50</span>);</span><br><span class="line">thisWeek.add(<span class="number">52</span>);</span><br><span class="line">thisWeek.add(<span class="number">49</span>);</span><br><span class="line"><span class="built_in">console</span>.log(thisWeek.average()); <span class="comment">// 显示54.875</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构9-排序</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%849-%E6%8E%92%E5%BA%8F/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%849-%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>排序算法</p><ol><li>基本排序            <ul><li>冒泡排序            </li><li>选择排序                </li><li>插入排序                </li></ul></li><li>高级排序            <ul><li>希尔排序            </li><li>归并排序            </li><li>快速排序            </li><li>基数排序    （见【Javascript】四、JS数据结构-队列2-基数排序）                </li></ul></li></ol><p><strong>注释：完整例子在最后，可以copy运行。</strong><br><strong>测试数据平台：</strong>                </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组平台</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">CArray</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dataStore = [];</span><br><span class="line">       <span class="keyword">this</span>.pos = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.numElements = numElements;</span><br><span class="line">       <span class="keyword">this</span>.insert = insert;</span><br><span class="line">       <span class="keyword">this</span>.toString = toString;</span><br><span class="line">       <span class="keyword">this</span>.clear = clear;</span><br><span class="line">       <span class="keyword">this</span>.setData = setData;</span><br><span class="line">       <span class="keyword">this</span>.swap = swap;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numElements; ++i) &#123;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[i] = i;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//排序算法</span></span><br><span class="line">       <span class="keyword">this</span>.bubbleSort = bubbleSort; <span class="comment">//冒泡排序</span></span><br><span class="line">       <span class="keyword">this</span>.selectionSort = selectionSort; <span class="comment">//选择排序</span></span><br><span class="line">       <span class="keyword">this</span>.insertionSort = insertionSort; <span class="comment">//插入排序</span></span><br><span class="line">       <span class="keyword">this</span>.shellSort = shellSort; <span class="comment">//希尔排序</span></span><br><span class="line">       <span class="keyword">this</span>.gaps = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.numElements; ++i) &#123;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.numElements + <span class="number">1</span>));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[i] = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.pos++] = element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> retstr = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">           retstr += <span class="keyword">this</span>.dataStore[i] + <span class="string">" "</span>;</span><br><span class="line">           <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp; i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               retstr += <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> retstr;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, index1, index2</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> temp = arr[index1];</span><br><span class="line">       arr[index1] = arr[index2];</span><br><span class="line">       arr[index2] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1-冒泡排序"></a>1-冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本排序算法</span></span><br><span class="line">    <span class="comment">//1-冒泡排序  时间复杂度 n2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> numElements = <span class="keyword">this</span>.dataStore.length;</span><br><span class="line">        <span class="keyword">var</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = numElements; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[j] &gt; <span class="keyword">this</span>.dataStore[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(<span class="keyword">this</span>.dataStore, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bubbleSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;冒泡排序过程：【最大的先冒出来排在最后一位】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.bubbleSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">        <span class="comment">//document.write(myNums.toString());</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2-选择排序"></a>2-选择排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2-选择排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> min, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[j] &lt; <span class="keyword">this</span>.dataStore[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(<span class="keyword">this</span>.dataStore, i, min);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectionSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;选择排序过程：【最小的选择出来放在第一位】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.selectionSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">        <span class="comment">//document.write(myNums.toString());</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3-插入排序"></a>3-插入排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3-插入排序</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> temp, j;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">           temp = <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">           j = i; <span class="comment">//j=1</span></span><br><span class="line">           <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">this</span>.dataStore[j - <span class="number">1</span>] &gt; temp)) &#123;</span><br><span class="line">               <span class="keyword">this</span>.dataStore[j] = <span class="keyword">this</span>.dataStore[j - <span class="number">1</span>];</span><br><span class="line">               --j;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">this</span>.dataStore[j] = temp;</span><br><span class="line">           <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">           <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insertionSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//var numElements = 10;</span></span><br><span class="line">       <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">       myNums.setData();</span><br><span class="line">       <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;插入排序过程：【从首位开始一个一个插入比较】&lt;br/&gt;'</span>);</span><br><span class="line">       <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       myNums.insertionSort();</span><br><span class="line">       <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="keyword">var</span> time = stop - start;</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4-希尔排序"></a>4-希尔排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高级排序算法</span></span><br><span class="line">    <span class="comment">//4-shell排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//gaps的长度，分为三大步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt; <span class="keyword">this</span>.gaps.length; ++g) &#123; <span class="comment">//3层 </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.gaps[g]; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt;= <span class="keyword">this</span>.gaps[g] &amp;&amp; <span class="keyword">this</span>.dataStore[j - <span class="keyword">this</span>.gaps[g]] &gt; temp; j -= <span class="keyword">this</span>.gaps[g]) &#123; <span class="comment">//第一次循环:j=5 如果第1个数【序号0】 &gt; 第6个数【temp序号5】</span></span><br><span class="line">                    <span class="keyword">this</span>.dataStore[j] = <span class="keyword">this</span>.dataStore[j - <span class="keyword">this</span>.gaps[g]]; <span class="comment">//第一次循环j=5  那么第6个数【序号5】 = 第1个数【序号0】</span></span><br><span class="line">                    <span class="comment">//小的排在前面</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.dataStore[j] = temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shellSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;希尔排序过程：&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.shellSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'排序结果是:&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5-快速排序"></a>5-快速排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5-快速排序</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">qSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> [];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> left = [];</span><br><span class="line">       <span class="keyword">var</span> right = [];</span><br><span class="line">       <span class="keyword">var</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">               left.push(arr[i]);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               right.push(arr[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> qSort(left).concat(pivot, qSort(right));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">qSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;</span><br><span class="line">           a[i] = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * numElements) + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">document</span>.write(a);</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">       <span class="keyword">var</span> start= <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="built_in">document</span>.write(qSort(a));</span><br><span class="line">       <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;需要时间是："</span>);</span><br><span class="line">       <span class="keyword">var</span> stop= <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">       <span class="keyword">var</span> time=stop-start;</span><br><span class="line">       <span class="built_in">document</span>.write(time);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="完整例子："><a href="#完整例子：" class="headerlink" title="完整例子："></a><strong>完整例子：</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;排序算法总结&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"冒泡排序过程查看"</span> onclick=<span class="string">"bubbleSortTest(10)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"选择排序过程查看"</span> onclick=<span class="string">"selectionSortTest(10)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"插入排序过程查看"</span> onclick=<span class="string">"insertionSortTest(10)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"希尔排序过程查看"</span> onclick=<span class="string">"shellSortTest(10)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"快速排序过程查看"</span> onclick=<span class="string">"qSortTest(10)"</span>&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;p&gt;查看执行函数，建议先删除排序函数中的<span class="built_in">document</span>.write过程打印,即是:<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"冒泡排序执行时间"</span> onclick=<span class="string">"bubbleSortTest(10000)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"选择排序执行时间"</span> onclick=<span class="string">"selectionSortTest(10000)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"插入排序执行时间"</span> onclick=<span class="string">"insertionSortTest(10000)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"希尔排序执行时间"</span> onclick=<span class="string">"shellSortTest(10000)"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"快速排序执行时间"</span> onclick=<span class="string">"qSortTest(10000)"</span>&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//===========================================</span></span><br><span class="line">    <span class="comment">//数组平台</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CArray</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataStore = [];</span><br><span class="line">        <span class="keyword">this</span>.pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.numElements = numElements;</span><br><span class="line">        <span class="keyword">this</span>.insert = insert;</span><br><span class="line">        <span class="keyword">this</span>.toString = toString;</span><br><span class="line">        <span class="keyword">this</span>.clear = clear;</span><br><span class="line">        <span class="keyword">this</span>.setData = setData;</span><br><span class="line">        <span class="keyword">this</span>.swap = swap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numElements; ++i) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataStore[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序算法</span></span><br><span class="line">        <span class="keyword">this</span>.bubbleSort = bubbleSort; <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="keyword">this</span>.selectionSort = selectionSort; <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">this</span>.insertionSort = insertionSort; <span class="comment">//插入排序</span></span><br><span class="line">        <span class="keyword">this</span>.shellSort = shellSort; <span class="comment">//希尔排序</span></span><br><span class="line">        <span class="keyword">this</span>.gaps = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.numElements; ++i) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataStore[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.numElements + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">this</span>.dataStore[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.pos++] = element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> retstr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">            retstr += <span class="keyword">this</span>.dataStore[i] + <span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp; i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                retstr += <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retstr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, index1, index2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[index1];</span><br><span class="line">        arr[index1] = arr[index2];</span><br><span class="line">        arr[index2] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用测试平台类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=================================================================</span></span><br><span class="line">    <span class="comment">//基本排序算法</span></span><br><span class="line">    <span class="comment">//1-冒泡排序  时间复杂度 n2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> numElements = <span class="keyword">this</span>.dataStore.length;</span><br><span class="line">        <span class="keyword">var</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = numElements; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[j] &gt; <span class="keyword">this</span>.dataStore[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(<span class="keyword">this</span>.dataStore, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bubbleSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;冒泡排序过程：【最大的先冒出来排在最后一位】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.bubbleSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">        <span class="comment">//document.write(myNums.toString());</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2-选择排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> min, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.dataStore[j] &lt; <span class="keyword">this</span>.dataStore[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(<span class="keyword">this</span>.dataStore, i, min);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">selectionSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;选择排序过程：【最小的选择出来放在第一位】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.selectionSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">        <span class="comment">//document.write(myNums.toString());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-插入排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp, j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.dataStore.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            temp = <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">            j = i; <span class="comment">//j=1</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">this</span>.dataStore[j - <span class="number">1</span>] &gt; temp)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.dataStore[j] = <span class="keyword">this</span>.dataStore[j - <span class="number">1</span>];</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.dataStore[j] = temp;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">insertionSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var numElements = 10;</span></span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;插入排序过程：【从首位开始一个一个插入比较】&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.insertionSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//高级排序算法</span></span><br><span class="line">    <span class="comment">//4-shell排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//gaps的长度，分为三大步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt; <span class="keyword">this</span>.gaps.length; ++g) &#123; <span class="comment">//3层 </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.gaps[g]; i &lt; <span class="keyword">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = <span class="keyword">this</span>.dataStore[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt;= <span class="keyword">this</span>.gaps[g] &amp;&amp; <span class="keyword">this</span>.dataStore[j - <span class="keyword">this</span>.gaps[g]] &gt; temp; j -= <span class="keyword">this</span>.gaps[g]) &#123; <span class="comment">//第一次循环:j=5 如果第1个数【序号0】 &gt; 第6个数【temp序号5】</span></span><br><span class="line">                    <span class="keyword">this</span>.dataStore[j] = <span class="keyword">this</span>.dataStore[j - <span class="keyword">this</span>.gaps[g]]; <span class="comment">//第一次循环j=5  那么第6个数【序号5】 = 第1个数【序号0】</span></span><br><span class="line">                    <span class="comment">//小的排在前面</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.dataStore[j] = temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="keyword">this</span>.toString());</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shellSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myNums = <span class="keyword">new</span> CArray(numElements);</span><br><span class="line">        myNums.setData();</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;希尔排序过程：&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        myNums.shellSort();</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time = stop - start;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'排序结果是:&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(myNums.toString());</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"所需要的时间是："</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5-快速排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> left = [];</span><br><span class="line">        <span class="keyword">var</span> right = [];</span><br><span class="line">        <span class="keyword">var</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">                left.push(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> qSort(left).concat(pivot, qSort(right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qSortTest</span>(<span class="params">numElements</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;</span><br><span class="line">            a[i] = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * numElements) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(a);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</span><br><span class="line">        <span class="keyword">var</span> start= <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="built_in">document</span>.write(qSort(a));</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;需要时间是："</span>);</span><br><span class="line">        <span class="keyword">var</span> stop= <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">var</span> time=stop-start;</span><br><span class="line">        <span class="built_in">document</span>.write(time);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript数据结构5-链表2 存放点数据（x,y）</title>
      <link href="/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%93%BE%E8%A1%A82%20%E5%AD%98%E6%94%BE%E7%82%B9%E6%95%B0%E6%8D%AE%EF%BC%88x,y%EF%BC%89/"/>
      <url>/2016/10/09/javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%93%BE%E8%A1%A82%20%E5%AD%98%E6%94%BE%E7%82%B9%E6%95%B0%E6%8D%AE%EF%BC%88x,y%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">function Node(element)&#123;</span><br><span class="line">  this.element=element;</span><br><span class="line">  this.next=null;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function Point(x,y)&#123;</span><br><span class="line">   this.x=x;</span><br><span class="line">    this.y=y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function LList()&#123;</span><br><span class="line">    this.head=new Node(&apos;head&apos;);</span><br><span class="line">    //this.head.next=this.head;</span><br><span class="line">    this.find=find;</span><br><span class="line">    this.insert=insert;</span><br><span class="line">    this.display=display;</span><br><span class="line">    this.remove=remove;</span><br><span class="line">    this.findPrevious=findPrevious;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function display()&#123;</span><br><span class="line">    var curr=this.head;</span><br><span class="line">    while(!(curr.next==null))&#123;</span><br><span class="line">       document.write(curr.next.element.x+&apos;/&apos;+curr.next.element.y);</span><br><span class="line">      curr=curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return curr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    function find(item)&#123;</span><br><span class="line">      var currNode=this.head;</span><br><span class="line">      while(!(currNode.element==item))&#123;currNode=currNode.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return currNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function insert(newElement, item) &#123;</span><br><span class="line">   var newNode = new Node(newElement);</span><br><span class="line">   var current = this.find(item);</span><br><span class="line">   newNode.next = current.next;</span><br><span class="line">   current.next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  function  findPrevious(item)&#123;</span><br><span class="line">    var currNode=this.head;</span><br><span class="line">    while(!(currNode.next==null)&amp;&amp;(currNode.next.element!=item))&#123;</span><br><span class="line">      currNode=currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return currNode;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   function remove(item)&#123;</span><br><span class="line">     var prevNode=this.findPrevious(item);</span><br><span class="line">     if((prevNode.next!=null))&#123;</span><br><span class="line">       prevNode.next=prevNode.next.next;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   var p1=new Point(1,2);</span><br><span class="line">   var p2=new Point(3,4);</span><br><span class="line">   </span><br><span class="line">   //document.write(p2.x);</span><br><span class="line">  // console.log(p1);</span><br><span class="line">   var points=new LList();</span><br><span class="line">    points.insert(p1,&apos;head&apos;);</span><br><span class="line">    points.insert(p2,p1);</span><br><span class="line">    points.display();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY jQuery库3-引入sizzle引擎</title>
      <link href="/2016/10/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20jQuery%E5%BA%933-%E5%BC%95%E5%85%A5sizzle%E5%BC%95%E6%93%8E/"/>
      <url>/2016/10/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20jQuery%E5%BA%933-%E5%BC%95%E5%85%A5sizzle%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>【注】所有代码挂在我的<a href="https://github.com/zrysmt/DIY-jQuery" target="_blank" rel="noopener">github</a>上</p><p>在前两篇的基础上，正式引入sizzle引擎，这里不详细介绍sizzle引擎。</p><p>我们在前两篇的<code>jQuery.fn.init</code>的方法是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">            <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里得到的结果是个数组，而不是我们需要的类数组结构的DOM集合<strong>HTMLCollection</strong></p><h1 id="1-引入Sizzle引擎"><a href="#1-引入Sizzle引擎" class="headerlink" title="1.引入Sizzle引擎"></a>1.引入Sizzle引擎</h1><p>下载Sizzle，将<code>sizzle.js</code>文件复制在<code>src/sizzle</code>中，并且改造Sizzle成模块化的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1-头部注释</span></span><br><span class="line"><span class="comment">//(function( window ) &#123; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2-最后尾部注释</span></span><br><span class="line"><span class="comment">/*if ( typeof define === "function" &amp;&amp; define.amd ) &#123;</span></span><br><span class="line"><span class="comment">    define(function() &#123; return Sizzle; &#125;);</span></span><br><span class="line"><span class="comment">// Sizzle requires that there be a global window in Common-JS like environments</span></span><br><span class="line"><span class="comment">&#125; else if ( typeof module !== "undefined" &amp;&amp; module.exports ) &#123;</span></span><br><span class="line"><span class="comment">    module.exports = Sizzle;</span></span><br><span class="line"><span class="comment">&#125; else &#123;</span></span><br><span class="line"><span class="comment">    window.Sizzle = Sizzle;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">// EXPOSE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;)( window );*/</span><span class="comment">//修改点2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3-增加</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Sizzle;</span><br></pre></td></tr></table></figure><p>同时增加一个初始化文件<code>src/sizzle/init.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Sizzle <span class="keyword">from</span> <span class="string">'./sizzle.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selectorInit  = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    jQuery.find = Sizzle;  <span class="comment">// Sizzle 赋予静态接口 jQuery.find</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> selectorInit;</span><br></pre></td></tr></table></figure><p>我们可以在jquery源码中找到全部将sizzle赋值的语句，这些我们暂时先不管</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jQuery.find = Sizzle;</span><br><span class="line">jQuery.expr = Sizzle.selectors;</span><br><span class="line">jQuery.expr[<span class="string">":"</span>] = jQuery.expr.pseudos;</span><br><span class="line">jQuery.unique = Sizzle.uniqueSort;</span><br><span class="line">jQuery.text = Sizzle.getText;</span><br><span class="line">jQuery.isXMLDoc = Sizzle.isXML;</span><br><span class="line">jQuery.contains = Sizzle.contains;</span><br></pre></td></tr></table></figure><p>修改<code>jquery.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">'./core'</span>;</span><br><span class="line"><span class="keyword">import</span> global <span class="keyword">from</span> <span class="string">'./global'</span>;</span><br><span class="line"><span class="keyword">import</span> init <span class="keyword">from</span> <span class="string">'./init'</span>;</span><br><span class="line"><span class="keyword">import</span> sizzleInit <span class="keyword">from</span> <span class="string">'./sizzle/init'</span>;  <span class="comment">//新增</span></span><br><span class="line"> </span><br><span class="line">global(jQuery);</span><br><span class="line">init(jQuery);</span><br><span class="line">sizzleInit(jQuery);  <span class="comment">//新增</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> jQuery;</span><br></pre></td></tr></table></figure><p>测试：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br></pre></td></tr></table></figure><p>最后的结果仍然是个DOM集合数组</p><h1 id="2-merger方法"><a href="#2-merger方法" class="headerlink" title="2.$.merger方法"></a>2.<code>$.merger</code>方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">    length: <span class="number">0</span>,  <span class="comment">// 修改点1，jQuery实例.length 默认为0,这句一定要有，否则length会NAN</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend(&#123;</span><br><span class="line">    merge: <span class="function"><span class="keyword">function</span>(<span class="params">first, second</span>) </span>&#123;<span class="comment">//新增</span></span><br><span class="line">        <span class="keyword">var</span> len = +second.length,</span><br><span class="line">            j = <span class="number">0</span>,</span><br><span class="line">            i = first.length;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; len; j++) &#123;</span><br><span class="line">            first[i++] = second[j];</span><br><span class="line">        &#125;</span><br><span class="line">        first.length = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = $.find(<span class="string">'div'</span>); <span class="comment">//纯数组</span></span><br><span class="line"><span class="keyword">var</span> $div1 = $.merge([<span class="string">'hi'</span>], divs); <span class="comment">//右边的数组合并到左边的数组，形成一个新数组</span></span><br><span class="line"><span class="keyword">var</span> $div2 = $.merge(&#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">'hi'</span>,</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">&#125;, divs); <span class="comment">//右边的数组合并到左边的对象，形成一个新的类数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log($div1);</span><br><span class="line"><span class="built_in">console</span>.log($div2);</span><br></pre></td></tr></table></figure></p><p>我们发现，只需要将<code>$.merger</code>的第一个参数first设置为this（jQuery的示例对象，length已经默认设置为0），第二个参数second设置为搜索到的DOM集合就可以得到DOM集合类数组对象。<br>修改<code>src/init.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elemList = jQuery.find(selector);</span><br><span class="line">            <span class="keyword">if</span> (elemList.length) &#123;</span><br><span class="line">                jQuery.merge( <span class="keyword">this</span>, elemList );  <span class="comment">//this是jQuery实例，默认实例属性 .length 为0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> init;</span><br></pre></td></tr></table></figure></p><h1 id="3-扩展-fn-find"><a href="#3-扩展-fn-find" class="headerlink" title="3.扩展 $.fn.find"></a>3.扩展 <code>$.fn.find</code></h1><p>我们虽然能使用$.find方法，但是它并不支持链式，所以我们需要扩展之。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend(&#123;</span><br><span class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i, ret,</span><br><span class="line">            len = <span class="keyword">this</span>.length,</span><br><span class="line">            self = <span class="keyword">this</span>;</span><br><span class="line">        ret = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            jQuery.find(selector, self[i], ret); <span class="comment">// //直接利用 Sizzle 接口，把结果注入到 ret 数组中去</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jQuery.merger(<span class="keyword">this</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-记录栈-pushStack方法"><a href="#4-记录栈-pushStack方法" class="headerlink" title="4.记录栈-pushStack方法"></a>4.记录栈-pushStack方法</h1><p>参考浏览器的历史记录栈，将检索到的jQuery实例放入到栈中，方便存取数据，其中jquery中有一个方法<code>$.end</code>放回上次检索的jQuery对象，使用记录栈能够很方便的实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">    <span class="comment">/**新增：</span></span><br><span class="line"><span class="comment">     * [pushStack 入栈操作]</span></span><br><span class="line"><span class="comment">     * @param  &#123;[Array]&#125; elems </span></span><br><span class="line"><span class="comment">     * @return &#123;[*]&#125;  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    pushStack: <span class="function"><span class="keyword">function</span>(<span class="params">elems</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = jQuery.merge(<span class="keyword">this</span>.constructor(), elems); <span class="comment">//this.constructor() 返回了一个 length 为0的jQuery对象</span></span><br><span class="line">        ret.prevObject = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重新修改第3部分的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend(&#123;</span><br><span class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i, ret,</span><br><span class="line">            len = <span class="keyword">this</span>.length,</span><br><span class="line">            self = <span class="keyword">this</span>;</span><br><span class="line">        ret =[];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            jQuery.find(selector, self[i], ret); <span class="comment">// //直接利用 Sizzle 接口，把结果注入到 ret 数组中去</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">this</span>.pushStack(ret);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从性能上考虑，改为这样，建设merge里面的遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend(&#123;</span><br><span class="line">    find: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i, ret,</span><br><span class="line">            len = <span class="keyword">this</span>.length,</span><br><span class="line">            self = <span class="keyword">this</span>;</span><br><span class="line">        ret = <span class="keyword">this</span>.pushStack([]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            jQuery.find(selector, self[i], ret); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="5-fn-end、-fn-eq-和-fn-get"><a href="#5-fn-end、-fn-eq-和-fn-get" class="headerlink" title="5.$.fn.end、$.fn.eq 和 $.fn.get"></a>5.<code>$.fn.end</code>、<code>$.fn.eq</code> 和 <code>$.fn.get</code></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.extend(&#123;</span><br><span class="line">    end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor();<span class="comment">//this.prevObject记录栈中存在</span></span><br><span class="line">    &#125;,</span><br><span class="line">    eq: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">        <span class="keyword">var</span> j = +i + (i &lt; <span class="number">0</span> ? len : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [<span class="keyword">this</span>[j]] : []);</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num != <span class="literal">null</span> ?</span><br><span class="line">            <span class="comment">// 支持倒序搜索，num可以是负数</span></span><br><span class="line">            (num &lt; <span class="number">0</span> ? <span class="keyword">this</span>[num + <span class="keyword">this</span>.length] : <span class="keyword">this</span>[num]) :</span><br><span class="line">            <span class="comment">// 克隆一个新数组，避免指向相同</span></span><br><span class="line">            [].slice.call(<span class="keyword">this</span>); </span><br><span class="line">    &#125;,</span><br><span class="line">    first: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    last: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="6-todolist"><a href="#6-todolist" class="headerlink" title="6.todolist"></a>6.todolist</h1><p>我们花了三篇博客写到这里，其实还是有很多没有完全实现，后面的部分也是参照jquery的源码，DIY一个自己的jquery，还有一些没有实现的点</p><ul><li><code>$.fn.init</code>第二个参数context上下文还没实现</li><li><p><code>$.fn.find</code>返回结果中可能带着重复的DOM<br>例如：    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span>  $span = $(<span class="string">'div'</span>).find(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($span);  <span class="comment">//返回两个span</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>下面的部分留作再写几篇博客</p><p>参考阅读：</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551118&amp;idx=1&amp;sn=be4df567418db97c9b3d8a7ab5314e01&amp;scene=1&amp;srcid=0810SD0bcpyNFVUcmgsy5kh7#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（1）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551123&amp;idx=2&amp;sn=26ddfeb73928eded3a63f05ca5273d66&amp;scene=1&amp;srcid=0811ZOMbQiHHtIIHRBceFbp7#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（2）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551144&amp;idx=2&amp;sn=78d8eec17bcdfa5bf51b5ec14c15c474&amp;scene=1&amp;srcid=0817O7pEiReCTSKGByB8SSIq#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（3）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> jQuery </tag>
            
            <tag> js原生实现库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY jQuery库2-使用es6模块化</title>
      <link href="/2016/10/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20jQuery%E5%BA%932-%E4%BD%BF%E7%94%A8es6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2016/10/05/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20jQuery%E5%BA%932-%E4%BD%BF%E7%94%A8es6%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>本博文使用了rollup打包，这里同时提供了简明的搭建环境的说明，通过第一部分<code>1.环境搭建</code>就可以在本地配置搭建环境。有关rollup的详细安装使用说明可以查看我的另外一篇博客：<a href="http://blog.csdn.net/future_todo/article/details/52725176" target="_blank" rel="noopener">《rollup + es6最佳实践》</a></p><p>我们首先把《一步一步DIY一个自己jQuery库1》的代码使用es6模块化的方式打包好</p><p>【注】所有代码挂在我的<a href="https://github.com/zrysmt/DIY-jQuery" target="_blank" rel="noopener">github</a>上</p><h1 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h1><h2 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1 目录结构"></a>1.1 目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- src</span><br><span class="line">  + .babelrc</span><br><span class="line">  + core.js</span><br><span class="line">  + global.js</span><br><span class="line">  + init.js</span><br><span class="line">  + jquery.js</span><br><span class="line">  + util.js</span><br><span class="line">bundle.js</span><br><span class="line">package.json</span><br><span class="line">rollup.config.dev.js</span><br><span class="line">test.html</span><br></pre></td></tr></table></figure><ul><li>src是源代码文件夹，其中<code>jquery.js</code>是入口文件</li><li>bundle是编译后的文件</li><li>package.json是包管理文件</li><li><code>rollup.config.dev.js</code>是rollup的配置文件</li><li><code>test.html</code>是测试文件,引入<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code>即可测试</li></ul><h2 id="1-2-npm安装"><a href="#1-2-npm安装" class="headerlink" title="1.2 npm安装"></a>1.2 npm安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i rollup rollup-plugin-babel babel-preset-es2015-rollup --save-dev</span><br></pre></td></tr></table></figure><h2 id="1-3-使用配置编译"><a href="#1-3-使用配置编译" class="headerlink" title="1.3 使用配置编译"></a>1.3 使用配置编译</h2><p>新建文件，文件名为<code>rollup.config.dev.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/jquery.js'</span>,</span><br><span class="line">  format: <span class="string">'umd'</span>,</span><br><span class="line">  moduleName: <span class="string">'jQuery'</span>,</span><br><span class="line">  plugins: [babel() ],</span><br><span class="line">  dest: <span class="string">'bundle.js'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>src中<code>.babelrc</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [<span class="string">"es2015"</span>, &#123; <span class="string">"modules"</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>{ &quot;modules&quot;: false }</code>一定要有，否则一直报错<br><strong>执行命令：</strong><code>rollup -c rollup.config.dev.js</code>,就能得到编译后的文件<code>bundle.js</code>。这里使用的是【umd】的形式，这是jquery的发布版本的格式，当然还有其他的一些格式，amd / es6 / cjs / iife</p><h1 id="2-打包"><a href="#2-打包" class="headerlink" title="2.打包"></a>2.打包</h1><p><code>jquery.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出口</span></span><br><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">'./core'</span>;</span><br><span class="line"><span class="keyword">import</span> global <span class="keyword">from</span> <span class="string">'./global'</span>;</span><br><span class="line"><span class="keyword">import</span> init <span class="keyword">from</span> <span class="string">'./init'</span>;</span><br><span class="line"> </span><br><span class="line">global(jQuery);</span><br><span class="line">init(jQuery);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> jQuery;</span><br></pre></td></tr></table></figure><p><code>core.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> version = <span class="string">"0.0.1"</span>,</span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">    jquery: version,</span><br><span class="line">    <span class="keyword">constructor</span>: jQuery,</span><br><span class="line">    setBackground: function() &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="number">0</span>].style.background = <span class="string">'yellow'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    setColor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="number">0</span>].style.color = <span class="string">'blue'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Object]"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Array]"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> name, clone, copy, copyIsArray ,options, i = <span class="number">1</span>,</span><br><span class="line">        length = <span class="built_in">arguments</span>.length,</span><br><span class="line">        target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,</span><br><span class="line">        deep = <span class="literal">false</span>; <span class="comment">//默认为浅复制</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">        deep = target;</span><br><span class="line">        target = <span class="built_in">arguments</span>[i] || &#123;&#125;;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> target !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        target = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//target后面没有其他参数了(要拷贝的对象)，直接扩展jQuery自身，target并入jQuery</span></span><br><span class="line">    <span class="keyword">if</span> (i === length) &#123;</span><br><span class="line">        target = <span class="keyword">this</span>;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                src = target[name]; <span class="comment">//jQuery是否已经有该属性</span></span><br><span class="line">                copy = options[name];</span><br><span class="line">                <span class="keyword">if</span> (target === copy) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//深拷贝，且确保被拷属性为对象/数组</span></span><br><span class="line">                <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; isObject(copy) || (copyIsArray = isArray(copy))) &#123;</span><br><span class="line">                    <span class="comment">//被拷贝属性为数组</span></span><br><span class="line">                    <span class="keyword">if</span> (copyIsArray) &#123;</span><br><span class="line">                        copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                        <span class="comment">//被合并属性</span></span><br><span class="line">                        clone = src &amp;&amp; isArray(src) ? src : [];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//被拷贝属性为对象</span></span><br><span class="line">                        clone = src &amp;&amp; isObject(src) ? src : &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//右侧递归，直到内部属性值是非对象</span></span><br><span class="line">                    target[name] = jQuery.extend(deep, clone, copy);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123; <span class="comment">//非对象/数组，或者浅复制的情况</span></span><br><span class="line">                    target[name] = copy; <span class="comment">//递归结束</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回修改后的target</span></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> jQuery;</span><br></pre></td></tr></table></figure><p><code>init.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context, root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">            <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> init;</span><br></pre></td></tr></table></figure><p><code>global.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//走模块化形式的直接绕过</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$; </span><br><span class="line">    jQuery.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"> deep </span>) </span>&#123;</span><br><span class="line">        <span class="comment">//确保window.$没有再次被改写</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">window</span>.$ === jQuery ) &#123;</span><br><span class="line">            <span class="built_in">window</span>.$ = _$;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确保window.jQuery没有再次被改写</span></span><br><span class="line">        <span class="keyword">if</span> ( deep&amp;&amp;<span class="built_in">window</span>.jQuery === jQuery ) &#123;</span><br><span class="line">            <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jQuery;  <span class="comment">//返回 jQuery 接口引用</span></span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> global;</span><br></pre></td></tr></table></figure><p>打包后<code>bundle.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> ? <span class="built_in">module</span>.exports = factory() :</span><br><span class="line">    <span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class="line">    (global.jQuery = factory());</span><br><span class="line">&#125;(<span class="keyword">this</span>, (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _typeof = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">"symbol"</span> ? <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj; &#125; : <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span> &amp;&amp; obj.constructor === <span class="built_in">Symbol</span> ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> obj; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">"0.0.1"</span>;</span><br><span class="line"><span class="keyword">var</span> jQuery$<span class="number">1</span> = <span class="function"><span class="keyword">function</span> <span class="title">jQuery$1</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery$<span class="number">1.</span>fn.init(selector, context);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery$<span class="number">1.</span>fn = jQuery$<span class="number">1.</span>prototype = &#123;</span><br><span class="line">    jquery: version,</span><br><span class="line">    <span class="keyword">constructor</span>: jQuery$1,</span><br><span class="line">    setBackground: function setBackground() &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="number">0</span>].style.background = <span class="string">'yellow'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    setColor: <span class="function"><span class="keyword">function</span> <span class="title">setColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="number">0</span>].style.color = <span class="string">'blue'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery$<span class="number">1.</span>extend = jQuery$<span class="number">1.</span>fn.extend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isObject = <span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Object]"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> isArray = <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Array]"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> name, clone, copy, copyIsArray, options,</span><br><span class="line">        i = <span class="number">1</span>,</span><br><span class="line">        length = <span class="built_in">arguments</span>.length,</span><br><span class="line">        target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,</span><br><span class="line">        deep = <span class="literal">false</span>; <span class="comment">//默认为浅复制</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">        deep = target;</span><br><span class="line">        target = <span class="built_in">arguments</span>[i] || &#123;&#125;;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> target === <span class="string">'undefined'</span> ? <span class="string">'undefined'</span> : _typeof(target)) !== <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> target !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        target = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//target后面没有其他参数了(要拷贝的对象)，直接扩展jQuery自身，target并入jQuery</span></span><br><span class="line">    <span class="keyword">if</span> (i === length) &#123;</span><br><span class="line">        target = <span class="keyword">this</span>;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> name, clone, copy;</span><br><span class="line">            <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                src = target[name]; <span class="comment">//jQuery是否已经有该属性</span></span><br><span class="line">                copy = options[name];</span><br><span class="line">                <span class="keyword">if</span> (target === copy) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//深拷贝，且确保被拷属性为对象/数组</span></span><br><span class="line">                <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; isObject(copy) || (copyIsArray = isArray(copy))) &#123;</span><br><span class="line">                    <span class="comment">//被拷贝属性为数组</span></span><br><span class="line">                    <span class="keyword">if</span> (copyIsArray) &#123;</span><br><span class="line">                        copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                        <span class="comment">//被合并属性</span></span><br><span class="line">                        clone = src &amp;&amp; isArray(src) ? src : [];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//被拷贝属性为对象</span></span><br><span class="line">                        clone = src &amp;&amp; isObject(src) ? src : &#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//右侧递归，直到内部属性值是非对象</span></span><br><span class="line">                    target[name] = jQuery$<span class="number">1.</span>extend(deep, clone, copy);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="comment">//非对象/数组，或者浅复制的情况</span></span><br><span class="line">                    target[name] = copy; <span class="comment">//递归结束</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回修改后的target</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _typeof$<span class="number">1</span> = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">"symbol"</span> ? <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj; &#125; : <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span> &amp;&amp; obj.constructor === <span class="built_in">Symbol</span> ? <span class="string">"symbol"</span> : <span class="keyword">typeof</span> obj; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> global = <span class="function"><span class="keyword">function</span> <span class="title">global</span>(<span class="params">jQuery</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//走模块化形式的直接绕过</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> exports === <span class="string">'undefined'</span> ? <span class="string">'undefined'</span> : _typeof$<span class="number">1</span>(exports)) === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$;</span><br><span class="line"></span><br><span class="line">    jQuery.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params">deep</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//确保window.$没有再次被改写</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">            <span class="built_in">window</span>.$ = _$;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确保window.jQuery没有再次被改写</span></span><br><span class="line">        <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">            <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jQuery; <span class="comment">//返回 jQuery 接口引用</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">jQuery</span>) </span>&#123;</span><br><span class="line">    jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context, root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">            <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出口</span></span><br><span class="line">global(jQuery$<span class="number">1</span>);</span><br><span class="line">init(jQuery$<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jQuery$<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><h1 id="3-增加基础工具模块-amp-完善extend方法"><a href="#3-增加基础工具模块-amp-完善extend方法" class="headerlink" title="3.增加基础工具模块&amp;完善extend方法"></a>3.增加基础工具模块&amp;完善extend方法</h1><p>我们在《一步一步DIY一个自己jQuery库1》中说过extend方法的不完善的地方</p><ul><li>使用<code>isObject</code>,<code>isArray</code>并不严谨。在某些浏览器中，像 document 在 Object.toSting 调用时也会返回和 Object 相同结果；</li></ul><p>新增一个<code>util.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> class2type = &#123;&#125;; <span class="comment">//在core.js中会被赋予各类型属性值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toString = class2type.toString; <span class="comment">//等同于 Object.prototype.toString</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getProto = <span class="built_in">Object</span>.getPrototypeOf;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hasOwn = class2type.hasOwnProperty;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fnToString = hasOwn.toString; <span class="comment">//等同于 Object.toString/Function.toString</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ObjectFunctionString = fnToString.call(<span class="built_in">Object</span>); <span class="comment">//顶层Object构造函数字符串"function Object() &#123; [native code] &#125;"，用于判断 plainObj</span></span><br></pre></td></tr></table></figure><p>在<code>core.js</code>中修改/新增代码</p><ul><li>导入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; class2type, toString, getProto, hasOwn, fnToString, ObjectFunctionString &#125; <span class="keyword">from</span> <span class="string">'./util.js'</span>;</span><br></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> target !== <span class="string">"function"</span>   <span class="comment">//修改为!jQuery.isFunction(target)</span></span><br><span class="line">isArray                        <span class="comment">//均修改为jQuery.isArray</span></span><br><span class="line">isObject                       <span class="comment">//均修改为jQuery.isObject</span></span><br></pre></td></tr></table></figure><ul><li>新增</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增修改点1，class2type注入各JS类型键值对，配合 jQuery.type 使用，后面会用上</span></span><br><span class="line"><span class="string">"Boolean Number String Function Array Date RegExp Object Error Symbol"</span>.split(<span class="string">" "</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    class2type[<span class="string">"[object "</span> + name + <span class="string">"]"</span>] = name.toLowerCase();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//新增修改点2</span></span><br><span class="line">jQuery.extend(&#123;</span><br><span class="line">    isArray: <span class="built_in">Array</span>.isArray || <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jQuery.type(obj) === <span class="string">"array"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    isFunction: <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jQuery.type(obj) === <span class="string">"function"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    isPainObject: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> proto, Ctor;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!obj || toString.call(obj) !== <span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proto = getProto(obj);</span><br><span class="line">        <span class="comment">// 通过 Object.create( null ) 形式创建的 &#123;&#125; 是没有prototype的</span></span><br><span class="line">        <span class="keyword">if</span> (!proto) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单对象的构造函数等于最顶层Object构造</span></span><br><span class="line">        Ctor = hasOwn.call(proto, <span class="string">"constructor"</span>) &amp;&amp; proto.constructor;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> Ctor === <span class="string">"function"</span> &amp;&amp; fnToString.call(Ctor) === ObjectFunctionString;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    type: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123; <span class="comment">//不能用 === </span></span><br><span class="line">            <span class="keyword">return</span> obj + <span class="string">""</span>; <span class="comment">//undefined or null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span> ?</span><br><span class="line">            <span class="comment">//兼容安卓2.3- 函数表达式类型不正确情况</span></span><br><span class="line">            class2type[toString.call(obj)] || <span class="string">"object"</span> :</span><br><span class="line">            <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改后的文件我已经挂在了我的<a href="https://github.com/zrysmt/DIY-jQuery" target="_blank" rel="noopener">github</a>中，对应文件夹是<code>v2</code>.</p><p>参考阅读：</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551118&amp;idx=1&amp;sn=be4df567418db97c9b3d8a7ab5314e01&amp;scene=1&amp;srcid=0810SD0bcpyNFVUcmgsy5kh7#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（1）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551123&amp;idx=2&amp;sn=26ddfeb73928eded3a63f05ca5273d66&amp;scene=1&amp;srcid=0811ZOMbQiHHtIIHRBceFbp7#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（2）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551144&amp;idx=2&amp;sn=78d8eec17bcdfa5bf51b5ec14c15c474&amp;scene=1&amp;srcid=0817O7pEiReCTSKGByB8SSIq#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（3）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> jQuery </tag>
            
            <tag> js原生实现库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rollup + es6最佳实践</title>
      <link href="/2016/10/02/rollup+es6%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2016/10/02/rollup+es6%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>简单说下rollup就是只将调用过的模块打包，做到尽量精简的打包。</p><p>使用webpack 1.X 版本是无法利用该特性来避免引入冗余模块代码的</p><p>webpack2 已经出来好几款 beta 版本了，同样也加上了对 Tree-shaking 的支持</p><h1 id="1-src中的文件"><a href="#1-src中的文件" class="headerlink" title="1.src中的文件"></a>1.src中的文件</h1><p>jquery.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出口</span></span><br><span class="line"><span class="keyword">import</span> init <span class="keyword">from</span> <span class="string">'./init'</span>;</span><br><span class="line">init(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> jQuery;</span><br></pre></td></tr></table></figure><p>init.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context, root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">            <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> init;</span><br></pre></td></tr></table></figure><h1 id="2-安装包"><a href="#2-安装包" class="headerlink" title="2.安装包"></a>2.安装包</h1><p>pakage.json 包管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p><p>开始安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i rollup rollup-plugin-babel babel-preset-es2015-rollup --save-dev</span><br></pre></td></tr></table></figure></p><h1 id="3-编译"><a href="#3-编译" class="headerlink" title="3.编译"></a>3.编译</h1><h2 id="3-1-命令行编译"><a href="#3-1-命令行编译" class="headerlink" title="3.1 命令行编译"></a>3.1 命令行编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup src/jquery.js --output bundle.js -f cjs</span><br></pre></td></tr></table></figure><h3 id="3-1-1-编译成commonjs格式的文件"><a href="#3-1-1-编译成commonjs格式的文件" class="headerlink" title="3.1.1 编译成commonjs格式的文件"></a>3.1.1 编译成commonjs格式的文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">jQuery</span>)</span>&#123;</span><br><span class="line">    jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context, root</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">            <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = jQuery;</span><br></pre></td></tr></table></figure><p>另外还有几种格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amd /  es6 / iife / umd</span><br></pre></td></tr></table></figure></p><h3 id="3-1-2-umd"><a href="#3-1-2-umd" class="headerlink" title="3.1.2 umd"></a>3.1.2 <strong>umd</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup src/jquery.js --output bundle.js -f umd</span><br></pre></td></tr></table></figure><p>会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You must supply options.moduleName for UMD bundles</span><br></pre></td></tr></table></figure></p><p>这是因为我们在<code>jquery.js</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default jQuery;</span><br></pre></td></tr></table></figure></p><p>我们使用配置方式进行编译,就能指定导出的模块名<code>moduleName: &#39;jQuery&#39;</code></p><h2 id="3-2-配置编译–rollup-c-rollup-config-dev-js"><a href="#3-2-配置编译–rollup-c-rollup-config-dev-js" class="headerlink" title="3.2 配置编译–rollup -c rollup.config.dev.js"></a>3.2 配置编译–rollup -c rollup.config.dev.js</h2><p><code>rollup.config.dev.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/jquery.js'</span>,</span><br><span class="line">  format: <span class="string">'iife'</span>,</span><br><span class="line">  moduleName: <span class="string">'jQuery'</span>,</span><br><span class="line">  plugins: [babel() ],</span><br><span class="line">  dest: <span class="string">'bundle.js'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>src中<code>.babelrc</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意<code>{ &quot;modules&quot;: false }</code>一定要有，否则一直报错，错误如下所示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Error transforming E:\javascript\rollup-demo\src\jquery.js with <span class="string">'babel'</span> plugin:                                        It looks like your Babel configuration specifies a module transformer. Please                                        <span class="built_in">disable</span> it. If you<span class="string">'re using the "es2015" preset, consider using "es2015-rollup"                                        instead. See https://github.com/rollup/rollup-plugin-babel#configuring-babel f                                       or more information</span></span><br><span class="line"><span class="string">Error: Error transforming E:\javascript\rollup-demo\src\jquery.js with '</span>babel<span class="string">'                                        plugin: It looks like your Babel configuration specifies a module transformer.                                        Please disable it. If you'</span>re using the <span class="string">"es2015"</span> preset, consider using <span class="string">"es2015-                                       rollup"</span> instead. See https://github.com/rollup/rollup-plugin-babel<span class="comment">#configuring-                                       babel for more information</span></span><br><span class="line">    at preflightCheck (E:\javascript\rollup-demo\node_modules\rollup-plugin-bab                                       el\dist\rollup-plugin-babel.cjs.js:43:102)</span><br><span class="line">    at Object.transform<span class="variable">$1</span> [as transform] (E:\javascript\rollup-demo\node_module                                       s\rollup-plugin-babel\dist\rollup-plugin-babel.cjs.js:104:18)</span><br><span class="line">    at C:\Users\Ruyi\AppData\Roaming\npm\node_modules\rollup\src\utils\transfor                                       m.js:19:35</span><br><span class="line">    at process._tickCallback (node.js:379:9)</span><br><span class="line">    at Function.Module.runMain (module.js:459:11)</span><br><span class="line">    at startup (node.js:138:18)</span><br><span class="line">    at node.js:974:3</span><br></pre></td></tr></table></figure></p><p>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c rollup.config.dev.js</span><br></pre></td></tr></table></figure></p><h2 id="3-3-配置编译–node-rollup-config-dev-js"><a href="#3-3-配置编译–node-rollup-config-dev-js" class="headerlink" title="3.3 配置编译–node rollup.config.dev.js"></a>3.3 配置编译–node rollup.config.dev.js</h2><p><code>rollup.config.dev.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rollup = <span class="built_in">require</span>( <span class="string">'rollup'</span> );</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'rollup-plugin-babel'</span>);</span><br><span class="line"> </span><br><span class="line">rollup.rollup(&#123;</span><br><span class="line">    entry: <span class="string">'src/jquery.js'</span>,</span><br><span class="line">    plugins: [ babel() ]</span><br><span class="line">&#125;).then( <span class="function"><span class="keyword">function</span> (<span class="params"> bundle </span>) </span>&#123;</span><br><span class="line">    bundle.write(&#123;</span><br><span class="line">        format: <span class="string">'umd'</span>,</span><br><span class="line">        moduleName: <span class="string">'jQuery'</span>, <span class="comment">//umd或iife模式下，若入口文件含 export，必须加上该属性</span></span><br><span class="line">        dest: <span class="string">'bundle.js'</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span> </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考阅读：</p><ul><li><a href="https://github.com/rollup/rollup-plugin-babel/issues/72" target="_blank" rel="noopener">Issue rollup -c</a></li><li><a href="http://rollupjs.org/guide/" target="_blank" rel="noopener">rollup.js官网 http://rollupjs.org/guide/</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651550907&amp;idx=2&amp;sn=4acac6d96a0ce4fc61e37b798dd90fd8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">## 冗余代码都走开——前端模块打包利器 Rollup.js 入门</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
            <tag> es6 </tag>
            
            <tag> rollup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一步一步DIY jQuery库1</title>
      <link href="/2016/10/02/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20jQuery%E5%BA%931/"/>
      <url>/2016/10/02/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5DIY%20jQuery%E5%BA%931/</url>
      
        <content type="html"><![CDATA[<p>前一段时间，看到一篇系列文章《从零开始，DIY一个jQuery 1-3》三篇文章从头讲解如何DIY一个jQuery，感觉挺有意思，今天想试一试看看。</p><p>我在前端已经有了一年的经验，jquery几乎是每天都会使用到，但是现在还没时间去研究一下它的源码，即使这样我也想动手尝试下DIY一个JQuery库，我相信这可以加深我对jquery的理解，当然我也试着去学习jquery的源码，这很可能会写成一个系列的文章，这个系列文章以一个入门的jquery原理探索者的视角。当然，这篇文章作为入门的入门。</p><p>【注】所有代码挂在我的<a href="https://github.com/zrysmt/DIY-jQuery" target="_blank" rel="noopener">github</a>上</p><h1 id="1-实现一个基本的框架"><a href="#1-实现一个基本的框架" class="headerlink" title="1.实现一个基本的框架"></a>1.实现一个基本的框架</h1><h2 id="1-1-整体"><a href="#1-1-整体" class="headerlink" title="1.1 整体"></a>1.1 整体</h2><ul><li>整体是个闭包，独立作用域，避免污染全局变量</li><li>不用new，是因为使用了工厂模式，new放在了内部<code>return new jQuery.fn.init(selector)</code></li><li>jQuery是最基础的对象，方法放在了<code>jQuery.prototype</code>中，即是<code>jQuery.fn</code></li><li>$.extend / $.fn.extend 来扩展静态方法和原型方法</li><li>使用全局变量<code>window.$</code>, <code>window.jQuery</code>即可调用</li><li><code>return this</code>为了链式调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IIFE 独立作用域</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> version = <span class="string">'0.0.1'</span>;</span><br><span class="line"></span><br><span class="line">        jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector); <span class="comment">//jQuery实例的构造函数已经变成了 jQuery.fn.init </span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*jQuery.fn   主要方法*/</span></span><br><span class="line">        jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">            jquery: version,</span><br><span class="line">            construct: jQuery,</span><br><span class="line">            <span class="comment">//方法</span></span><br><span class="line">            setBackground: <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>].style.background = color;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;  <span class="comment">//链式调用</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">                <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                    <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.info(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        init.prototype = jQuery.prototype; <span class="comment">//把 jQuery.fn.init 的原型指向 jQuery 的原型（jQuery.prototype / jQuery.fn）即可</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery = jQuery;</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure><p><strong>测试</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var $div = $(&apos;div&apos;);</span><br><span class="line">console.log($div);</span><br><span class="line">$div.setBackground(&apos;blue&apos;);</span><br><span class="line">console.log($div.jquery); //0.0.1</span><br><span class="line">console.log($.fn.jquery); //0.0.1</span><br></pre></td></tr></table></figure></p><p>$div的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- j…y.fn.init &#123;0: div, length: 1&#125;</span><br><span class="line">  + 0:div</span><br><span class="line">  + length:1</span><br></pre></td></tr></table></figure><h2 id="1-2-冲突处理"><a href="#1-2-冲突处理" class="headerlink" title="1.2 冲突处理"></a>1.2 冲突处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*冲突处理*/</span></span><br><span class="line"><span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">_$ = <span class="built_in">window</span>.$;</span><br><span class="line"><span class="comment">//deep 参数类型为 Boolean，若为真，表示要求连window.jQuery 变量都需要吐回去</span></span><br><span class="line">jQuery.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params">deep</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">    <span class="built_in">window</span>.$ = _$;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确保window.jQuery没有再次被改写</span></span><br><span class="line"><span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">    <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jQuery; <span class="comment">//返回 jQuery 接口引用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>测试</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var $$$ = jQuery.noConflict();</span><br><span class="line">$$$(&apos;div&apos;).setBackground(&apos;red&apos;);</span><br></pre></td></tr></table></figure></p><h2 id="1-3-extend-fn-extend-来扩展静态方法和原型方法"><a href="#1-3-extend-fn-extend-来扩展静态方法和原型方法" class="headerlink" title="1.3 $.extend / $.fn.extend 来扩展静态方法和原型方法"></a>1.3 <code>$.extend</code> / <code>$.fn.extend</code> 来扩展静态方法和原型方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> target)&#123;</span><br><span class="line">         jQuery.fn[key] = target[key];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是调用必须是<code>$().min</code>而不能是<code>$.min</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend(&#123;</span><br><span class="line">    min: function(a, b) &#123;</span><br><span class="line">        return a &lt; b ? a : b;</span><br><span class="line">    &#125;,</span><br><span class="line">    max: function(a, b) &#123;</span><br><span class="line">        return a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log($().min(3,5));</span><br></pre></td></tr></table></figure></p><p>当然这只是个人的一些想法，我们来仿照jquery源码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Object]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> options, i = <span class="number">1</span>,</span><br><span class="line">length = <span class="built_in">arguments</span>.length,</span><br><span class="line">target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,</span><br><span class="line">deep = <span class="literal">false</span>; <span class="comment">//默认为浅复制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">    deep = target;</span><br><span class="line">    taeget = <span class="built_in">arguments</span>[i] || &#123;&#125;;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> target !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    target = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//target后面没有其他参数了(要拷贝的对象)，直接扩展jQuery自身，target并入jQuery</span></span><br><span class="line"><span class="keyword">if</span> (i === length) &#123;</span><br><span class="line">    target = <span class="keyword">this</span>;</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name, clone, copy;</span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">        src = target[name]; <span class="comment">//jQuery是否已经有该属性</span></span><br><span class="line">        copy = options[name];</span><br><span class="line">        <span class="keyword">if</span> (target === copy) &#123;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="comment">//1-深拷贝，且确保被拷属性为对象/数组</span></span><br><span class="line">       <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; (isObject(copy)||(copyIsArray = isArray(copy))))&#123;</span><br><span class="line">       <span class="comment">//被拷贝属性为数组</span></span><br><span class="line">          <span class="keyword">if</span>(copyIsArray)&#123;</span><br><span class="line">              copyIsArray = <span class="literal">false</span>;</span><br><span class="line">              <span class="comment">//被合并属性</span></span><br><span class="line">              clone = src &amp;&amp; isArray(src)?src:[];</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;<span class="comment">//被拷贝属性为对象</span></span><br><span class="line">              clone = src &amp;&amp; isArray(src)?src:&#123;&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="comment">//右侧递归，直到内部属性值是非对象</span></span><br><span class="line">         target[name] = jQuery.extend(deep,clone,copy);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(copy!==<span class="literal">undefined</span>)&#123;<span class="comment">//2-非对象/数组，或者浅复制的情况</span></span><br><span class="line">         target[name] = copy;<span class="comment">//递归结束</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回修改后的target</span></span><br><span class="line"><span class="keyword">return</span> target;</span><br></pre></td></tr></table></figure><p>拷贝主要分为两个部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1-深拷贝，且确保被拷属性为对象/数组</span></span><br><span class="line"><span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; isObject(copy)||(copyIsArray = isArray(copy)))&#123;</span><br><span class="line">    <span class="comment">/*...*/</span>&#125;</span><br><span class="line"><span class="comment">//2-非对象/数组，或者浅复制的情况</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(copy!==<span class="literal">undefined</span>)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的几种情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.extend(  targetObj,  copyObj1[,  copyObj2...]  )</span><br><span class="line">$.extend(  <span class="literal">true</span>,  targetObj,  copyObj1[,  copyObj2...]  )</span><br><span class="line">$.extend(  copyObj  )</span><br><span class="line">$.extend(  <span class="literal">true</span>,  copyObj</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> jQuery.extend(&#123;</span><br><span class="line">     min: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">     &#125;,</span><br><span class="line">     max: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($.min(<span class="number">3</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>注意：这个时候只是使用<code>isObject</code>,<code>isArray</code>并不严谨<br>在某些浏览器中，像 document 在 Object.toSting 调用时也会返回和 Object 相同结果；<br>这些我们将在《一步一步DIY一个自己jQuery库2》中进行补充。</p><h1 id="2-全部代码"><a href="#2-全部代码" class="headerlink" title="2.全部代码"></a>2.全部代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IIFE 独立作用域</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> version = <span class="string">'0.0.1'</span>;</span><br><span class="line"></span><br><span class="line">        jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector); <span class="comment">//jQuery实例的构造函数已经变成了 jQuery.fn.init </span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*冲突处理*/</span></span><br><span class="line">        <span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">            _$ = <span class="built_in">window</span>.$;</span><br><span class="line">        <span class="comment">//deep 参数类型为 Boolean，若为真，表示要求连window.jQuery 变量都需要吐回去</span></span><br><span class="line">        jQuery.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params">deep</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">                <span class="built_in">window</span>.$ = _$;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//确保window.jQuery没有再次被改写</span></span><br><span class="line">            <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">                <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jQuery; <span class="comment">//返回 jQuery 接口引用</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*jQuery.fn   主要方法*/</span></span><br><span class="line">        jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">            jquery: version,</span><br><span class="line">            construct: jQuery,</span><br><span class="line">            <span class="comment">//方法</span></span><br><span class="line">            setBackground: <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>[<span class="number">0</span>].style.background = color;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!selector) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">                <span class="keyword">if</span> (elem) &#123;</span><br><span class="line">                    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">                    <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.info(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        init.prototype = jQuery.prototype; <span class="comment">//把 jQuery.fn.init 的原型指向 jQuery 的原型（jQuery.prototype / jQuery.fn）即可</span></span><br><span class="line"></span><br><span class="line">        jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> isObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Object]"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">"[object Array]"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> options, i = <span class="number">1</span>,</span><br><span class="line">                length = <span class="built_in">arguments</span>.length,</span><br><span class="line">                target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,</span><br><span class="line">                deep = <span class="literal">false</span>; <span class="comment">//默认为浅复制</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">                deep = target;</span><br><span class="line">                taeget = <span class="built_in">arguments</span>[i] || &#123;&#125;;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> target !== <span class="string">"function"</span>) &#123;</span><br><span class="line">                target = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//target后面没有其他参数了(要拷贝的对象)，直接扩展jQuery自身，target并入jQuery</span></span><br><span class="line">            <span class="keyword">if</span> (i === length) &#123;</span><br><span class="line">                target = <span class="keyword">this</span>;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> name, clone, copy;</span><br><span class="line">                    <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">                        src = target[name]; <span class="comment">//jQuery是否已经有该属性</span></span><br><span class="line">                        copy = options[name];</span><br><span class="line">                        <span class="keyword">if</span> (target === copy) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//深拷贝，且确保被拷属性为对象/数组</span></span><br><span class="line">                        <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; (isObject(copy) || (copyIsArray = isArray(copy)))) &#123;</span><br><span class="line">                            <span class="comment">//被拷贝属性为数组</span></span><br><span class="line">                            <span class="keyword">if</span> (copyIsArray) &#123;</span><br><span class="line">                                copyIsArray = <span class="literal">false</span>;</span><br><span class="line">                                <span class="comment">//被合并属性</span></span><br><span class="line">                                clone = src &amp;&amp; isArray(src) ? src : [];</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123; <span class="comment">//被拷贝属性为对象</span></span><br><span class="line">                                clone = src &amp;&amp; isArray(src) ? src : &#123;&#125;;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//右侧递归，直到内部属性值是非对象</span></span><br><span class="line">                            target[name] = jQuery.extend(deep, clone, copy);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123; <span class="comment">//非对象/数组，或者浅复制的情况</span></span><br><span class="line">                            target[name] = copy; <span class="comment">//递归结束</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回修改后的target</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery = jQuery;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="keyword">var</span> $div = $(<span class="string">'div'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log($div);</span><br><span class="line">    $div.setBackground(<span class="string">'blue'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log($div.jquery); <span class="comment">//0.0.1</span></span><br><span class="line">    <span class="built_in">console</span>.log($.fn.jquery); <span class="comment">//0.0.1</span></span><br><span class="line">    <span class="built_in">console</span>.log(jQuery.extend());</span><br><span class="line">    <span class="built_in">console</span>.log($.extend.jquery);</span><br><span class="line">    <span class="comment">//冲突</span></span><br><span class="line">    <span class="comment">/*var $$$ = jQuery.noConflict();</span></span><br><span class="line"><span class="comment">    $$$('div').setBackground('red');*/</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        min: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">        &#125;,</span><br><span class="line">        max: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.info(jQuery.prototype);</span><br><span class="line">    <span class="built_in">console</span>.info(jQuery);</span><br><span class="line">    <span class="comment">// console.log($().min(3,5));</span></span><br><span class="line">    <span class="comment">// console.log($.prototype.min(3, 5));</span></span><br><span class="line">    <span class="built_in">console</span>.log($.min(<span class="number">3</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>参考阅读：</p><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551118&amp;idx=1&amp;sn=be4df567418db97c9b3d8a7ab5314e01&amp;scene=1&amp;srcid=0810SD0bcpyNFVUcmgsy5kh7#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（1）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551123&amp;idx=2&amp;sn=26ddfeb73928eded3a63f05ca5273d66&amp;scene=1&amp;srcid=0811ZOMbQiHHtIIHRBceFbp7#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（2）</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651551144&amp;idx=2&amp;sn=78d8eec17bcdfa5bf51b5ec14c15c474&amp;scene=1&amp;srcid=0817O7pEiReCTSKGByB8SSIq#rd" target="_blank" rel="noopener">从零开始，DIY一个jQuery（3）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> jQuery </tag>
            
            <tag> js原生实现库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究2-ol3基础入门案例</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B62/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B62/</url>
      
        <content type="html"><![CDATA[<p>【注】所有代码挂在我的<a href="https://github.com/zrysmt/openlayers-3" target="_blank" rel="noopener">github</a>上</p><h1 id="0-实例"><a href="#0-实例" class="headerlink" title="0.实例"></a>0.实例</h1><p>在OpenLayers3官网的<a href="http://openlayers.org/download/" target="_blank" rel="noopener">下载页面</a>下载我们在开发工程中需要的文件(如：v3.17.1-dist.zip)，实际工程中包含两个文件<code>ol.js</code>,<code>ol.css</code><br>先看一个实例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>1-TileWMS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/ol.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/ol-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*初始化地图*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">        target: <span class="string">'map'</span>, <span class="comment">//document.getElementById("map")</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        layers: [</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">                title: <span class="string">"Global Imagery"</span>,</span></span><br><span class="line"><span class="javascript">                source: <span class="keyword">new</span> ol.source.TileWMS(&#123;</span></span><br><span class="line"><span class="javascript">                    url: <span class="string">'http://demo.boundlessgeo.com/geoserver/wms'</span>,</span></span><br><span class="line"><span class="undefined">                    params: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">'LAYERS'</span>: <span class="string">'ne:NE1_HR_LC_SR_W_DR'</span></span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        ],</span></span><br><span class="line"><span class="javascript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="javascript">            projection: <span class="string">'EPSG:4326'</span>, <span class="comment">//WGS 84</span></span></span><br><span class="line"><span class="undefined">            center: [0, 0],</span></span><br><span class="line"><span class="undefined">            zoom: 2,</span></span><br><span class="line"><span class="undefined">            maxResolution: 0.703125</span></span><br><span class="line"><span class="undefined">        &#125;),</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E8%AE%B2%E8%A7%A3%E7%A4%BA%E4%BE%8B1.jpg" alt="ol3讲解实例效果图"></p><p>通过api的overview我们可以看到ol3的核心部件<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3-api-overview.png" alt="ol3-api-overview"></p><h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%85%B3%E7%B3%BB.png" alt="ol3基本概念的关系"></p><h2 id="1-1-Map"><a href="#1-1-Map" class="headerlink" title="1.1 Map"></a>1.1 Map</h2><p>Map(ol.Map)是OL3的核心部件，它被呈现在target容器上(div)。也可以使用setTarget方法。<br>位置：<code>ol/ol/map.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;<span class="attr">target</span>: <span class="string">'map'</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="1-2-View"><a href="#1-2-View" class="headerlink" title="1.2 View"></a>1.2 View</h2><p><code>ol.View</code>负责地图的中心点，放大，投影之类的设置。<br>一个ol.View实例包含投影projection，该投影决定中心center 的坐标系以及分辨率的单位，如果没有指定（如下面的代码段），默认的投影是球墨卡托（EPSG：3857），以米为地图单位。 </p><p>放大zoom 选项是一种方便的方式来指定地图的分辨率，可用的缩放级别由maxZoom （默认值为28）、zoomFactor （默认值为2）、maxResolution （默认由投影在256×256像素瓦片的有效成都来计算） 决定。起始于缩放级别0，以每像素maxResolution 的单位为分辨率，后续的缩放级别是通过zoomFactor区分之前的缩放级别的分辨率来计算的，直到缩放级别达到maxZoom 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">target: <span class="string">'map'</span>,</span><br><span class="line">view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">            projection: <span class="string">'EPSG:4326'</span>, <span class="comment">//WGS 84</span></span><br><span class="line">            center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            zoom: <span class="number">2</span>,</span><br><span class="line">            maxResolution: <span class="number">0.703125</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="1-3-Source"><a href="#1-3-Source" class="headerlink" title="1.3 Source"></a>1.3 Source</h2><p>OpenLayers 3使用ol.source.Source子类获取远程数据图层，包含免费的和商业的地图瓦片服务，如OpenStreetMap、Bing、OGC资源（WMS或WMTS）、矢量数据（GeoJSON格式、KML格式…）等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span><br></pre></td></tr></table></figure><h2 id="1-4-Layer"><a href="#1-4-Layer" class="headerlink" title="1.4 Layer"></a>1.4 Layer</h2><p>一个图层是资源中数据的可视化显示，OpenLayers 3包含三种基本图层类型：<code>ol.layer.Tile（瓦片）</code>、<code>ol.layer.Image（图片样式的图层</code>）和 <code>ol.layer.Vector（矢量图层）</code>。</p><ul><li><code>ol.layer.Tile</code> 用于显示瓦片资源，这些瓦片提供了预渲染，并且由特定分别率的缩放级别组织的瓦片图片网格组成。 </li><li><code>ol.layer.Image</code>用于显示支持渲染服务的图片，这些图片可用于任意范围和分辨率。 </li><li><code>ol.layer.Vector</code>用于显示在客户端渲染的矢量数据。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> osmLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="attr">source</span>: osmSource&#125;); map.addLayer(osmLayer);</span><br></pre></td></tr></table></figure><h2 id="1-5-控件与交互"><a href="#1-5-控件与交互" class="headerlink" title="1.5 控件与交互"></a>1.5 控件与交互</h2><h3 id="1-5-1-控件"><a href="#1-5-1-控件" class="headerlink" title="1.5.1 控件"></a>1.5.1 控件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    controls: ol.control.defaults().extend([</span><br><span class="line">        <span class="keyword">new</span> ol.control.FullScreen(), <span class="comment">//全屏控件</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.ScaleLine(), <span class="comment">//比例尺</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.OverviewMap(), <span class="comment">//鹰眼控件</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.Zoom(),</span><br><span class="line">    ]),</span><br><span class="line">    layers: [bglayer, vector], <span class="comment">//添加两个图层</span></span><br><span class="line">    target: <span class="string">'map'</span>, <span class="comment">//div#id='map'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-5-2-交互"><a href="#1-5-2-交互" class="headerlink" title="1.5.2 交互"></a>1.5.2 交互</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> select = <span class="keyword">new</span> ol.interaction.Select(&#123;</span><br><span class="line">wrapX: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> modify = <span class="keyword">new</span> ol.interaction.Modify(&#123;</span><br><span class="line">features: select.getFeatures()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    layers: [bglayer, vector], <span class="comment">//添加两个图层</span></span><br><span class="line">    target: <span class="string">'map'</span>, <span class="comment">//div#id='map'</span></span><br><span class="line">    interaction:ol.interaction.defaults().extend([select, modify])</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者用方法的方式添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">draw = <span class="keyword">new</span> ol.interaction.Draw(&#123;</span><br><span class="line">        source: source,</span><br><span class="line">        type: <span class="comment">/** @type &#123;ol.geom.GeometryType&#125; */</span> (shapeName),</span><br><span class="line">        geometryFunction: geometryFunction,</span><br><span class="line">        maxPoints: maxPoints</span><br><span class="line">    &#125;);</span><br><span class="line">map.addInteraction(draw); <span class="comment">//增加的交互</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>this指针总结</title>
      <link href="/2016/09/28/this/"/>
      <url>/2016/09/28/this/</url>
      
        <content type="html"><![CDATA[<p>文章只是简单列举了方式和一些会改变this指针的情况     </p><h1 id="1-探寻之，必昭然若揭"><a href="#1-探寻之，必昭然若揭" class="headerlink" title="1.探寻之，必昭然若揭"></a>1.探寻之，必昭然若揭</h1><ol><li>new绑定            this–&gt;新创建的对象<br><code>var bar = new foo()</code>   </li><li>call/bind 硬绑定      this–&gt;指定的对象<br> <code>var bar = foo.call(obj2)</code>   </li><li>隐式绑定       this–&gt;上下文对象<br> <code>var bar = obj1.foo()</code>   </li><li>默认绑定       this–&gt;全局对象window    </li></ol><p>四种情况也是按照优先级排列的    </p><h1 id="2-实践之，定了然于胸"><a href="#2-实践之，定了然于胸" class="headerlink" title="2.实践之，定了然于胸"></a>2.实践之，定了然于胸</h1><h2 id="2-1-回掉函数会改变this指针"><a href="#2-1-回掉函数会改变this指针" class="headerlink" title="2.1 回掉函数会改变this指针"></a>2.1 回掉函数会改变this指针</h2><p>  绑定<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbTools.queryUsrDB2Datas(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    usrResDiv.fyDiv.apply(usrResDiv,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分"><a href="#2-2-setTimeout-setinterval函数会改变this指针-例子见第三部分" class="headerlink" title="2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)"></a>2.2 setTimeout/setinterval函数会改变this指针(例子见第三部分)</h2><h2 id="2-3-绑定的例外"><a href="#2-3-绑定的例外" class="headerlink" title="2.3 绑定的例外"></a>2.3 绑定的例外</h2><ul><li><p><code>foo.call(null)</code> 使用<code>null</code>或者<code>undefined</code>,忽略传入对象的<code>this</code>,实际运用的是默认绑定，这也是这样方法的弊端，this指向<code>window</code>。<br>修改<code>var DMZ = Object.create(null); foo.apply(DMZ,[2,3]);</code></p></li><li><p>间接引用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">foo</span>:foo&#125;;</span><br><span class="line"><span class="keyword">var</span> p = &#123;<span class="attr">a</span>:<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">o.foo();<span class="comment">//3</span></span><br><span class="line">(p.foo = o.foo)(); <span class="comment">//2 this--&gt;window</span></span><br><span class="line">p.foo();  <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p><code>p.foo = o.foo</code>返回值是目标函数的引用，因此调用位置是foo(),而不是<code>p.foo()</code>,<code>o.foo()</code>;</p><h1 id="3-避免之，需谨小事微"><a href="#3-避免之，需谨小事微" class="headerlink" title="3.避免之，需谨小事微"></a>3.避免之，需谨小事微</h1><p>除了第一部分的方法外，还有一些常用的方法。</p><h2 id="3-1-ES5中我们经常会使用self-this，如："><a href="#3-1-ES5中我们经常会使用self-this，如：" class="headerlink" title="3.1 ES5中我们经常会使用self = this，如："></a>3.1 ES5中我们经常会使用<code>self = this</code>，如：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(self.a);</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="3-2-ES6中的箭头函数-this词法"><a href="#3-2-ES6中的箭头函数-this词法" class="headerlink" title="3.2 ES6中的箭头函数(this词法)"></a>3.2 ES6中的箭头函数(this词法)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">setTimeout =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);<span class="comment">//this继承来自foo()</span></span><br><span class="line">&#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack基础实践2</title>
      <link href="/2016/09/28/webpack%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B52/"/>
      <url>/2016/09/28/webpack%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B52/</url>
      
        <content type="html"><![CDATA[<p>本文在webpack基础实践1的基础上，主要阐述的是模块化和ES6与webpack的结合使用。</p><h1 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1.模块化"></a>1.模块化</h1><p><strong>commonJS/CMD风格</strong><br>module1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">val:<span class="string">"hello from m1"</span>,</span><br><span class="line">sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'hi'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sum:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = obj;</span><br></pre></td></tr></table></figure><p><strong>AMD风格</strong><br>module2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'./module1.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"1+2="</span>+m1.sum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>入口文件entry.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m1 = <span class="built_in">require</span>(<span class="string">"./module1.js"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);    </span><br><span class="line"><span class="built_in">document</span>.write(m1.val);    </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);    </span><br><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">require</span>(<span class="string">"./module2.js"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(m2);</span><br></pre></td></tr></table></figure><p>结果显示为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello from m1</span><br><span class="line">1+2=3</span><br></pre></td></tr></table></figure></p><p>当然实际项目中不建议两种风格的模块都使用，选择其中一种模块风格即可。</p><h1 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2.ES6"></a>2.ES6</h1><p>webpack是支持babel转化器的，所以可以将ES6代码转为ES5供现在的浏览器使用</p><ul><li>1) 安装babel依赖库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader --save-dev</span><br><span class="line">npm install babel-core --save-dev</span><br><span class="line">npm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure><ul><li>2) 新建一个<code>.babelrc</code>文件，内容是：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>3) 配置<code>webpack.config.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;<span class="attr">loaders</span>: [</span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,<span class="attr">loader</span>: <span class="string">'babel-loader'</span>,&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>4) 入口文件<code>entry.js</code>中就可以使用了</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*es6*/</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./es6test2.js"</span>);</span><br></pre></td></tr></table></figure><p><code>es6test2.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Point <span class="keyword">from</span> <span class="string">'./es6test1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">document</span>.write(p.toString());</span><br></pre></td></tr></table></figure><p><code>es6test1.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Point;</span><br></pre></td></tr></table></figure><p>编译完成即可</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><h2 id="3-1-配置文件webpack-config-js"><a href="#3-1-配置文件webpack-config-js" class="headerlink" title="3.1 配置文件webpack.config.js"></a>3.1 配置文件<code>webpack.config.js</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/home/js/entry.js"</span>, <span class="comment">//入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">"style!css"</span> &#125;, <span class="comment">//css加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">"style!css!sass"</span> &#125;, <span class="comment">//sass加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png)$/</span>, <span class="attr">loader</span>: <span class="string">"url?limit=8192"</span> &#125;, <span class="comment">//图片加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel-loader'</span>, &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-2-加载的依赖库package-json"><a href="#3-2-加载的依赖库package-json" class="headerlink" title="3.2 加载的依赖库package.json"></a>3.2 加载的依赖库<code>package.json</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpackdemo"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"webpack demo"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.14.0"</span>,</span><br><span class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.5"</span>,</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.14.0"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^0.24.0"</span>,</span><br><span class="line">    <span class="string">"file-loader"</span>: <span class="string">"^0.9.0"</span>,</span><br><span class="line">    <span class="string">"node-sass"</span>: <span class="string">"^3.8.0"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="string">"style-loader"</span>: <span class="string">"^0.13.1"</span>,</span><br><span class="line">    <span class="string">"url-loader"</span>: <span class="string">"^0.5.7"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-入口文件entry-js"><a href="#3-3-入口文件entry-js" class="headerlink" title="3.3 入口文件entry.js"></a>3.3 入口文件<code>entry.js</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./style.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.scss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>)); </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/br/&gt;"</span>);    </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>); </span><br><span class="line">img.src = <span class="built_in">require</span>(<span class="string">"./img/webpack.png"</span>); </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/br/&gt;"</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块化*/</span></span><br><span class="line"><span class="keyword">var</span> m1 = <span class="built_in">require</span>(<span class="string">"./module1.js"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;/br/&gt;"</span>);    </span><br><span class="line"><span class="built_in">document</span>.write(m1.val);    </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);    </span><br><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">require</span>(<span class="string">"./module2.js"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(m2);    </span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*es6*/</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./es6test2.js"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究1-ol2 VS ol3</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B61/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B61/</url>
      
        <content type="html"><![CDATA[<p>本文的重点在OpenLayers 3，对于OpenLayers 2简单比较说明。<br>下文中OpenLayers 2简称OL2，OpenLayers 3简称OL3</p><h1 id="1-OL-2-VS-OL-3简单源码和实例"><a href="#1-OL-2-VS-OL-3简单源码和实例" class="headerlink" title="1.OL 2 VS OL 3简单源码和实例"></a>1.OL 2 VS OL 3简单源码和实例</h1><h2 id="1-1-OpenLayers-2"><a href="#1-1-OpenLayers-2" class="headerlink" title="1.1 OpenLayers 2"></a>1.1 OpenLayers 2</h2><p>OpenLayers 是一个专为Web GIS 客户端开发提供的JavaScript 类库包，用于实现标准格式发布的地图数据访问。从OpenLayers2.2版本以后，OpenLayers已经将所用到的Prototype.js组件整合到了自身当中，并不断在Prototype.js的基础上完善面向对象的开发，Rico用到地方不多，只是在OpenLayers.Popup.AnchoredBubble类中圆角化DIV</p><h2 id="1-1-1-OpenLayers-2源码简要分析"><a href="#1-1-1-OpenLayers-2源码简要分析" class="headerlink" title="1.1.1 OpenLayers 2源码简要分析"></a>1.1.1 OpenLayers 2源码简要分析</h2><p>源码分析，下载版本为<code>2.13.1</code>,源码位置在<code>lib/OpenLayers</code><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol2%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6.png" alt="ol2源码文件"><br>由于OL2不是本文的重点，所以下面会简诉关于OL2源码。<br><code>lib/OpenLayers/Layer/Image.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">OpenLayers.Layer.Image = OpenLayers.Class(OpenLayers.Layer, &#123;</span><br><span class="line">    isBaseLayer: <span class="literal">true</span>,</span><br><span class="line">    url: <span class="literal">null</span>,</span><br><span class="line">    extent: <span class="literal">null</span>,</span><br><span class="line">    size: <span class="literal">null</span>,</span><br><span class="line">    tile: <span class="literal">null</span>,</span><br><span class="line">    aspectRatio: <span class="literal">null</span>,</span><br><span class="line">    initialize: <span class="function"><span class="keyword">function</span>(<span class="params">name, url, extent, size, options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,    </span><br><span class="line">    destroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clone: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,    </span><br><span class="line">    setMap: <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    moveTo:<span class="function"><span class="keyword">function</span>(<span class="params">bounds, zoomChanged, dragging</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;, </span><br><span class="line">    setTileSize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    addTileMonitoringHooks: <span class="function"><span class="keyword">function</span>(<span class="params">tile</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    CLASS_NAME: <span class="string">"OpenLayers.Layer.Image"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>OpenLayers.Layer.Image 继承了OpenLayers.Layer类<br>OpenLayers.Layer在上级目录下<code>lib/OpenLayers/Layer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">OpenLayers.Layer = OpenLayers.Class(&#123;</span><br><span class="line">id: <span class="literal">null</span>,</span><br><span class="line">name: <span class="literal">null</span>,</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">initialize: <span class="function"><span class="keyword">function</span>(<span class="params">name, options</span>) </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;,</span><br><span class="line">destroy: <span class="function"><span class="keyword">function</span>(<span class="params">setNewBaseLayer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;,</span><br><span class="line">clone: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;,   </span><br><span class="line">getOptions: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;,</span><br><span class="line">CLASS_NAME: <span class="string">"OpenLayers.Layer"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过分析我们可以知道，<code>OpenLayers.Class</code>的第一个参数是等号前面类(A类)继承的类;第二个参数是个对象，前面的部分作为A类的属性，后面的作为A类的方法。通过观察前三个方法我们可以看出，前三个方法依次为<code>initialize</code>,<code>destroy</code>,<code>clone</code>,分别为A类的初始化构造函数，销毁函数，克隆函数。</p><h2 id="1-1-2-OpenLayers-2简单实例"><a href="#1-1-2-OpenLayers-2简单实例" class="headerlink" title="1.1.2 OpenLayers 2简单实例"></a>1.1.2 OpenLayers 2简单实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        创建一个简单的电子地图</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载OpenLayers 类库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.openlayers.cn/olapi/OpenLayers.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关键代码在这里了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用指定的文档元素创建地图</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> map = <span class="keyword">new</span> OpenLayers.Map(<span class="string">"rcp1_map"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建一个 OpenStreeMap raster layer</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把这个图层添加到map中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> osm = <span class="keyword">new</span> OpenLayers.Layer.OSM();</span></span><br><span class="line"><span class="undefined">        map.addLayer(osm);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设定视图缩放地图程度为最大</span></span></span><br><span class="line"><span class="undefined">        map.zoomToMaxExtent();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rcp1_map"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol2%E5%AE%9E%E4%BE%8B%E6%95%88%E6%9E%9C.png" alt="ol2实例显示效果"></p><h2 id="1-2-OpenLayers-3"><a href="#1-2-OpenLayers-3" class="headerlink" title="1.2 OpenLayers 3"></a>1.2 OpenLayers 3</h2><h2 id="1-2-1-OpenLayers-3源码简要分析"><a href="#1-2-1-OpenLayers-3源码简要分析" class="headerlink" title="1.2.1 OpenLayers 3源码简要分析"></a>1.2.1 OpenLayers 3源码简要分析</h2><p>OpenLayers 3对OpenLayers网络地图库进行了根本的重新设计。版本2虽然被广泛使用，但从JavaScript开发的早期发展阶段开始，已日益现实出它的落后。 OL3已运用现代的设计模式从底层重写。</p><p>最初的版本旨在支持第2版提供的功能，提供大量商业或免费的瓦片资源以及最流行的开源矢量数据格式。与版本2一样，数据可以被任意投影。最初的版本还增加了一些额外的功能，如能够方便地旋转地图以及显示地图动画。<br>OpenLayers3同时设计了一些主要的新功能，如显示三维地图，或使用WebGL快速显示大型矢量数据集，这些功能将在以后的版本中加入。</p><p>源码分析，下载版本为<code>3.17.1</code>,源码位置在<code>ol/ol</code>文件夹下<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6.png" alt="ol3源码文件"><br><code>ol/ol/layer/layer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol.layer.Layer'</span>);</span><br><span class="line"></span><br><span class="line">goog.require(<span class="string">'ol.events'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.events.EventType'</span>);</span><br><span class="line">goog.require(<span class="string">'ol'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.Object'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.layer.Base'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.layer.LayerProperty'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.object'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.render.EventType'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.source.State'</span>);</span><br><span class="line"></span><br><span class="line">ol.layer.Layer = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> baseOptions = ol.object.assign(&#123;&#125;, options);</span><br><span class="line">  <span class="keyword">delete</span> baseOptions.source;</span><br><span class="line"></span><br><span class="line">  ol.layer.Base.call(<span class="keyword">this</span>, <span class="comment">/** @type &#123;olx.layer.BaseOptions&#125; */</span> (baseOptions));<span class="comment">//继承extends &#123;ol.layer.Base&#125;</span></span><br><span class="line">  <span class="keyword">this</span>.mapPrecomposeKey_ = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.mapRenderKey_ = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.sourceChangeKey_ = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.map) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setMap(options.map);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ol.events.listen(<span class="keyword">this</span>,</span><br><span class="line">      ol.Object.getChangeEventType(ol.layer.LayerProperty.SOURCE),</span><br><span class="line">      <span class="keyword">this</span>.handleSourcePropertyChange_, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> source = options.source ? options.source : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.setSource(source);</span><br><span class="line">&#125;;</span><br><span class="line">ol.inherits(ol.layer.Layer, ol.layer.Base);</span><br><span class="line"></span><br><span class="line">ol.layer.Layer.visibleAtResolution = <span class="function"><span class="keyword">function</span>(<span class="params">layerState, resolution</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ol.layer.Layer.prototype.getLayersArray = <span class="function"><span class="keyword">function</span>(<span class="params">opt_array</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line">ol.layer.Layer.prototype.getLayerStatesArray = <span class="function"><span class="keyword">function</span>(<span class="params">opt_states</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line">   <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>OL3利用<a href="https://developers.google.com/closure/" target="_blank" rel="noopener">google的closure库</a>组织代码的，库文件在源码的<code>closure-library</code>文件夹下。<br>在源码中用到的常用的功能是：</p><ul><li>类声明：使用goog.provide方法声明和注册一个类(表示自己能提供什么功能)。</li><li>依赖声明：使用goog.require方法声明具体依赖的其它类(表示提供这些功能需要额外的哪功能的支持)<br>这一点也是OL2和OL3源代码重写的最重要的变化。</li></ul><h2 id="1-2-1-OpenLayers-3实例"><a href="#1-2-1-OpenLayers-3实例" class="headerlink" title="1.2.1 OpenLayers 3实例"></a>1.2.1 OpenLayers 3实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://openlayers.org/en/v3.17.1/css/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.map</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://openlayers.org/en/v3.17.1/build/ol.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenLayers 3 example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Map<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">        target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="undefined">        layers: [</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="javascript">                source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        ],</span></span><br><span class="line"><span class="javascript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">            center: ol.proj.fromLonLat([37.41, 8.82]),</span></span><br><span class="line"><span class="undefined">            zoom: 4</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E5%AE%9E%E4%BE%8B%E6%95%88%E6%9E%9C.png" alt="ol3实例显示效果"></p><h1 id="2-OL-2-VS-OL-3变化简要总结"><a href="#2-OL-2-VS-OL-3变化简要总结" class="headerlink" title="2.OL 2 VS OL 3变化简要总结"></a>2.OL 2 VS OL 3变化简要总结</h1><table><thead><tr><th>比较部分</th><th style="text-align:center">OL2</th><th style="text-align:right">OL3</th></tr></thead><tbody><tr><td>源码</td><td style="text-align:center">使用Prototype和Rico</td><td style="text-align:right">使用Clourse</td></tr><tr><td>实现</td><td style="text-align:center">var map = new OpenLayers.Map(“rcp1_map”);var osm = new OpenLayers.Layer.OSM();map.addLayer(osm);</td><td style="text-align:right">var map = new ol.Map({});</td></tr><tr><td>渲染方式</td><td style="text-align:center">dom</td><td style="text-align:right">canvas/webgl/dom</td></tr></tbody></table><p>补充说明：<br>三种渲染方式可以在<code>ol/ol/map.js</code>看到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ol.DEFAULT_RENDERER_TYPES = [</span><br><span class="line">  ol.RendererType.CANVAS,</span><br><span class="line">  ol.RendererType.WEBGL,</span><br><span class="line">  ol.RendererType.DOM</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>dom是OL2常用的方式，显示地图时候(如openstreetmap)会采用img集合的方式。</li><li>OL3常用的渲染方式是基于canvas绘图技术。</li><li>WebGL快速显示大型矢量数据集<br>OL2和OL3的差别比较大，目前看从OL2升级OL3的比较麻烦。<br>最后分享一个ol2和ol3的<a href="http://pan.baidu.com/s/1dFt3tIx" target="_blank" rel="noopener">资料</a>，包含源码，教程和书籍</li></ul><p>参考阅读：</p><ul><li>1.2-2015_OpenLayers_3_入门教程详细版.pdf</li><li><a href="http://www.openlayers.cn/portal.php" target="_blank" rel="noopener">OpenLayers</a></li><li><a href="http://openlayers.org/" target="_blank" rel="noopener">OpenLayers 3官网</a></li><li><a href="http://openlayers.org/two/" target="_blank" rel="noopener">OpenLayers 2官网</a></li><li><a href="https://developers.google.com/closure/" target="_blank" rel="noopener">google closure库</a></li><li><a href="http://www.kuqin.com/webpagedesign/20100309/81059.html" target="_blank" rel="noopener">JS 库浅析之 Google Closure</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究4.3-ol3源码分析-Source,Layer</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.3/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.3/</url>
      
        <content type="html"><![CDATA[<h1 id="3-Source"><a href="#3-Source" class="headerlink" title="3.Source"></a>3.Source</h1><p><code>ol/ol/Source</code>文件夹下 </p><h2 id="3-1构造函数"><a href="#3-1构造函数" class="headerlink" title="3.1构造函数"></a>3.1构造函数</h2><h3 id="3-1-1-ol-source-Source-ol-source的基础类"><a href="#3-1-1-ol-source-Source-ol-source的基础类" class="headerlink" title="3.1.1 ol.source.Source ol.source的基础类"></a>3.1.1 <code>ol.source.Source</code> ol.source的基础类</h3><p><code>ol/ol/Source/source.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.source.Source = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-ol-source-OSM"><a href="#3-1-2-ol-source-OSM" class="headerlink" title="3.1.2 ol.source.OSM"></a>3.1.2 <code>ol.source.OSM</code></h3><p><code>ol/ol/Source/osmsource.js</code><br><code>openStreetMap</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.source.OSM = <span class="function"><span class="keyword">function</span>(<span class="params">opt_options</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>具体不进行展开描述。<br>运用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span><br></pre></td></tr></table></figure><h3 id="3-1-3-ol-source-TileWMS"><a href="#3-1-3-ol-source-TileWMS" class="headerlink" title="3.1.3 ol.source.TileWMS"></a>3.1.3 <code>ol.source.TileWMS</code></h3><p>先看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">        target: <span class="string">'map'</span>, <span class="comment">//document.getElementById("map")</span></span><br><span class="line">        layers: [</span><br><span class="line">            <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                title: <span class="string">"Global Imagery"</span>,</span><br><span class="line">                source: <span class="keyword">new</span> ol.source.TileWMS(&#123;</span><br><span class="line">                    url: <span class="string">'http://demo.boundlessgeo.com/geoserver/wms'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        <span class="string">'LAYERS'</span>: <span class="string">'ne:NE1_HR_LC_SR_W_DR'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>我们可以一路找下源头：<br><code>tilewmssource.js</code>–&gt;<code>tileimagessource.js</code>–&gt;<code>uritilesource.js</code>–&gt;<code>tilespurce.js</code>–&gt;<code>source.js</code><br>我们可以发现实例中的<code>source.url</code>是在<code>uritilesource.js</code><br>处理的<br>我们先考虑单url的情况(当然存在url数组的情况)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (options.url) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setUrl(options.url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//... ...</span></span><br><span class="line">ol.source.UrlTile.prototype.setUrl = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> urls = <span class="keyword">this</span>.urls = ol.TileUrlFunction.expandUrl(url);</span><br><span class="line">  <span class="keyword">this</span>.setTileUrlFunction(<span class="keyword">this</span>.fixedTileUrlFunction ?</span><br><span class="line">      <span class="keyword">this</span>.fixedTileUrlFunction.bind(<span class="keyword">this</span>) :</span><br><span class="line">      ol.TileUrlFunction.createFromTemplates(urls, <span class="keyword">this</span>.tileGrid), url);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>处理函数为<code>fixedTileUrlFunction</code>,在<code>tilewmssource.js</code><br><code>fixedTileUrlFunction</code>–&gt;<code>getRequestUrl_</code>–&gt;<code>ol.uri.appendParams(url, params)</code>请求地图<br>params包含请求地图的宽、高、分辨率、地图范围</p><h1 id="4-Layer"><a href="#4-Layer" class="headerlink" title="4.Layer"></a>4.Layer</h1><p><code>ol/ol/Layer</code>文件夹下 </p><h2 id="4-1构造函数"><a href="#4-1构造函数" class="headerlink" title="4.1构造函数"></a>4.1构造函数</h2><h3 id="4-1-1-ol-ol-Layer-layer-js"><a href="#4-1-1-ol-ol-Layer-layer-js" class="headerlink" title="4.1.1 ol/ol/Layer/layer.js"></a>4.1.1 <code>ol/ol/Layer/layer.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.layer.Layer = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.inherits(ol.layer.Layer, ol.layer.Base);</span><br></pre></td></tr></table></figure><p><code>ol.layer.Base</code>定义layer的基本属性和基本属性的setter，getter方法</p><p>实际在api接口上使用的是具体的图层</p><h3 id="4-1-2-矢量地图ol-ol-Layer-vectorlayer-js"><a href="#4-1-2-矢量地图ol-ol-Layer-vectorlayer-js" class="headerlink" title="4.1.2 矢量地图ol/ol/Layer/vectorlayer.js"></a>4.1.2 矢量地图<code>ol/ol/Layer/vectorlayer.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol.layer.Vector = <span class="function"><span class="keyword">function</span>(<span class="params">opt_options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> baseOptions = ol.object.assign(&#123;&#125;, options);</span><br><span class="line">ol.layer.Layer.call(<span class="keyword">this</span>, <span class="comment">/** @type &#123;olx.layer.LayerOptions&#125; */</span> (baseOptions));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际调用的方法，仍然在<code>ol/ol/Layer/layer.js</code>中</p><h3 id="4-1-3-瓦块地图ol-ol-Layer-titlelayer-js"><a href="#4-1-3-瓦块地图ol-ol-Layer-titlelayer-js" class="headerlink" title="4.1.3 瓦块地图ol/ol/Layer/titlelayer.js"></a>4.1.3 瓦块地图<code>ol/ol/Layer/titlelayer.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol.layer.Tile = <span class="function"><span class="keyword">function</span>(<span class="params">opt_options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> baseOptions = ol.object.assign(&#123;&#125;, options);</span><br><span class="line">ol.layer.Layer.call(<span class="keyword">this</span>, <span class="comment">/** @type &#123;olx.layer.LayerOptions&#125; */</span> (baseOptions));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有<code>heatmaplayer.js</code>,<code>imagelayer.js</code>,<code>vectortilelayer.js</code>对应热力图，图片地图，矢量瓦块地图<br>总结：<br><code>ol/ol/Layer/layer.js</code>是通用的方法部分<br>各个具体的地图*.js是各个地图的专有方法。<br>运用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">        target: <span class="string">'map'</span>, <span class="comment">//document.getElementById("map")</span></span><br><span class="line">        layers: [</span><br><span class="line">            <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">                title: <span class="string">"Global Imagery"</span>,</span><br><span class="line">                source: <span class="keyword">new</span> ol.source.TileWMS(&#123;</span><br><span class="line">                    url: <span class="string">'http://demo.boundlessgeo.com/geoserver/wms'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        <span class="string">'LAYERS'</span>: <span class="string">'ne:NE1_HR_LC_SR_W_DR'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><code>source</code>在layer.js中处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = options.source ? options.source : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.setSource(source);</span><br><span class="line"></span><br><span class="line">ol.layer.Layer.prototype.setSource = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.set(ol.layer.LayerProperty.SOURCE, source);<span class="comment">//添加到常量上，其实也是将source对象共享出去了</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-2方法-事件"><a href="#4-2方法-事件" class="headerlink" title="4.2方法 事件"></a>4.2方法 事件</h2><h3 id="4-2-1-ol-ol-Layer-layer-js"><a href="#4-2-1-ol-ol-Layer-layer-js" class="headerlink" title="4.2.1 ol/ol/Layer/layer.js"></a>4.2.1 <code>ol/ol/Layer/layer.js</code></h3><p>主要是一下方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ol.layer.Layer.visibleAtResolution</span><br><span class="line">getLayersArray</span><br><span class="line">getLayerStatesArray</span><br><span class="line">getSource</span><br><span class="line">getSourceState</span><br><span class="line">handleSourceChange_</span><br><span class="line">handleSourcePropertyChange_</span><br><span class="line">setMap</span><br><span class="line">setSource</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究3-ol3一个完整的例子</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B63/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B63/</url>
      
        <content type="html"><![CDATA[<p>【注】所有代码挂在我的<a href="https://github.com/zrysmt/openlayers-3" target="_blank" rel="noopener">github</a>上，本例对应<code>demo3</code></p><p>接着我们看一个比较长的例子，例子实现的是可以绘制图形，可以根据自己的设置打印地图。<br>我们先看显示效果是：</p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BE%8B%E5%AD%90.jpg" alt="ol3完整例子显示效果"><br>由于ol3的api现在更新变化挺大的，所以自己运行的例子的时候注意版本是<code>3.17.1</code><br>例子中的解释比较详细，不具体进行展开介绍。本例子主要分为三部分，在js文件中已经隔开</p><ul><li>第一部分是地图的初始化，包括添加图层，添加控件</li><li>第二部分加个标注点，点击显示位置的弹出框</li><li>第三部分自定义工具，包括点、线、面、圆形、菱形、矩形、多边形的绘制工具和打印地图工具<br>为了节省篇幅，<code>index.css</code>在这里就不在列出，详情可以查看<a href="http://pan.baidu.com/s/1dFt3tIx#path=%252Fblog%252Fjs%25E5%259C%25B0%25E5%259B%25BE%25E5%25BA%2593%252Fopenlayers%25203%25E5%25AE%259E%25E8%25B7%25B5%25E4%25B8%258E%25E5%258E%259F%25E7%2590%2586%25E6%258E%25A2%25E7%25A9%25B6%252Fdemo2" target="_blank" rel="noopener">百度云共享的资源</a><br><code>indxe.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>完整的例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"pubjs/v3.17.1-dist/ol.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.2.61/jspdf.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolsets"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"search-position"</span> <span class="attr">class</span>=<span class="string">"search-position btn btn-success  btn-sm"</span>&gt;</span>查询坐标<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"draw-point"</span> <span class="attr">class</span>=<span class="string">"draw-point btn btn-success  btn-sm"</span>&gt;</span>点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"draw-line"</span> <span class="attr">class</span>=<span class="string">"draw-line btn btn-success  btn-sm"</span>&gt;</span>线<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"draw-ploygon"</span> <span class="attr">class</span>=<span class="string">"draw-ploygon btn btn-success  btn-sm"</span>&gt;</span>多边形<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"draw-circle"</span> <span class="attr">class</span>=<span class="string">"draw-circle btn btn-success  btn-sm"</span>&gt;</span>圆形<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"draw-square"</span> <span class="attr">class</span>=<span class="string">"draw-square btn btn-success  btn-sm"</span>&gt;</span>菱形<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"draw-box"</span> <span class="attr">class</span>=<span class="string">"draw-box btn btn-success  btn-sm"</span>&gt;</span>矩形<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reshape"</span> <span class="attr">class</span>=<span class="string">"reshape btn btn-info  btn-sm"</span>&gt;</span>修改形状<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"print"</span> <span class="attr">class</span>=<span class="string">"print btn btn-info  btn-sm"</span>&gt;</span>打印地图<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打印地图的设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form print-form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Page size <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"format"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"a0"</span>&gt;</span>A0 (slow)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"a1"</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"a2"</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"a3"</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"a4"</span> <span class="attr">selected</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"a5"</span>&gt;</span>A5 (fast)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Resolution <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"resolution"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"72"</span>&gt;</span>72 dpi (fast)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"150"</span>&gt;</span>150 dpi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"300"</span>&gt;</span>300 dpi (slow)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Clickable label for Vienna --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"overlay"</span> <span class="attr">id</span>=<span class="string">"Shanghai"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://en.wikipedia.org/wiki/Shanghai"</span>&gt;</span>Shanghai<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"marker"</span> <span class="attr">title</span>=<span class="string">"Marker"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Popup --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popup"</span> <span class="attr">title</span>=<span class="string">"点击查询:"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"pubjs/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"pubjs/v3.17.1-dist/ol-debug.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************************************************/</span></span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    center: [<span class="number">9101767</span>, <span class="number">2822912</span>],</span><br><span class="line">    zoom: <span class="number">6</span></span><br><span class="line">&#125;); <span class="comment">//map.view的变量</span></span><br><span class="line"><span class="comment">/*图层*/</span></span><br><span class="line"><span class="keyword">var</span> bglayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">    source: <span class="keyword">new</span> ol.source.BingMaps(&#123;</span><br><span class="line">        <span class="comment">// key: 'Your Bing Maps Key from http://www.bingmapsportal.com/here',</span></span><br><span class="line">        key: <span class="string">'AgiU9gCjKNfaR2yFSDfLw8e9zUlAYisRvRC2_L-LsGYN2bII5ZUvorfP3QJvxmjn'</span>, <span class="comment">//自己申请的key</span></span><br><span class="line">        imagerySet: <span class="string">'Aerial'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> ol.source.Vector(&#123; <span class="attr">wrapX</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">//绘图绘在此矢量图层</span></span><br><span class="line"><span class="keyword">var</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">    source: source,</span><br><span class="line">    style: <span class="keyword">new</span> ol.style.Style(&#123; <span class="comment">//修改绘制的样式</span></span><br><span class="line">        fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">            color: <span class="string">'rgba(255, 255, 255, 0.2)'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">            color: <span class="string">'#ffcc33'</span>,</span><br><span class="line">            width: <span class="number">2</span></span><br><span class="line">        &#125;),</span><br><span class="line">        image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">            radius: <span class="number">7</span>,</span><br><span class="line">            fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">                color: <span class="string">'#ffcc33'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    controls: ol.control.defaults().extend([</span><br><span class="line">        <span class="keyword">new</span> ol.control.FullScreen(), <span class="comment">//全屏控件</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.ScaleLine(), <span class="comment">//比例尺</span></span><br><span class="line">        <span class="keyword">new</span> ol.control.OverviewMap(), <span class="comment">//鹰眼控件</span></span><br><span class="line">        <span class="comment">// new ol.control.Zoom(),</span></span><br><span class="line">    ]),</span><br><span class="line">    layers: [bglayer, vector], <span class="comment">//添加两个图层</span></span><br><span class="line">    target: <span class="string">'map'</span>, <span class="comment">//div#id='map'</span></span><br><span class="line">    view: view,</span><br><span class="line">    <span class="comment">// interaction:</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**上面的部分就可以初始化地图**/</span></span><br><span class="line"><span class="comment">/********************************************************************************************/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Marker标注</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pos = ol.proj.fromLonLat([<span class="number">121.3725</span>, <span class="number">31.008889</span>]); <span class="comment">//经纬度坐标转换</span></span><br><span class="line"><span class="comment">// Vienna marker</span></span><br><span class="line"><span class="keyword">var</span> marker = <span class="keyword">new</span> ol.Overlay(&#123;</span><br><span class="line">    position: pos,</span><br><span class="line">    positioning: <span class="string">'center-center'</span>,</span><br><span class="line">    element: <span class="built_in">document</span>.getElementById(<span class="string">'marker'</span>),</span><br><span class="line">    stopEvent: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">map.addOverlay(marker);</span><br><span class="line"><span class="comment">// Shanghai label</span></span><br><span class="line"><span class="keyword">var</span> Shanghai = <span class="keyword">new</span> ol.Overlay(&#123;</span><br><span class="line">    position: pos,</span><br><span class="line">    element: <span class="built_in">document</span>.getElementById(<span class="string">'Shanghai'</span>)</span><br><span class="line">&#125;);</span><br><span class="line">map.addOverlay(Shanghai); <span class="comment">//标签 a</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Popup查询坐标弹出框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Popup showing the position the user clicked</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'popup'</span>);</span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'popup-content'</span>);</span><br><span class="line"><span class="keyword">var</span> closer = <span class="built_in">document</span>.getElementById(<span class="string">'popup-closer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> popup = <span class="keyword">new</span> ol.Overlay(&#123;</span><br><span class="line">    element: container,</span><br><span class="line">    autoPan: <span class="literal">true</span>,</span><br><span class="line">    autoPanAnimation: &#123;</span><br><span class="line">        duration: <span class="number">250</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.addOverlay(popup);</span><br><span class="line"><span class="comment">//关闭popup</span></span><br><span class="line">closer.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    popup.setPosition(<span class="literal">undefined</span>);</span><br><span class="line">    closer.blur();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.search-position'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    map.removeInteraction(draw); <span class="comment">//点击选择时候  取消上次结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在地图上点击</span></span><br><span class="line">    map.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> coordinate = evt.coordinate;</span><br><span class="line">        <span class="keyword">var</span> hdms = ol.coordinate.toStringHDMS(ol.proj.transform(</span><br><span class="line">            coordinate, <span class="string">'EPSG:3857'</span>, <span class="string">'EPSG:4326'</span>));</span><br><span class="line"></span><br><span class="line">        content.innerHTML = <span class="string">'&lt;p&gt;点击的坐标是:&lt;/p&gt;&lt;code&gt;'</span> + hdms +</span><br><span class="line">            <span class="string">'&lt;/code&gt;'</span>;</span><br><span class="line">        popup.setPosition(coordinate);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/********************************************************************************************/</span></span><br><span class="line"><span class="comment">/* 自定义工具 */</span></span><br><span class="line"><span class="keyword">var</span> draw, select, modify;</span><br><span class="line">$(<span class="string">'.toolsets button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text());</span><br><span class="line">    <span class="keyword">var</span> geometryFunction, shapeName, maxPoints;</span><br><span class="line">    map.removeInteraction(draw); <span class="comment">//点击选择时候  取消绘图交互</span></span><br><span class="line">    map.removeInteraction(select); <span class="comment">//点击选择时候  取消选择</span></span><br><span class="line">    map.removeInteraction(modify); <span class="comment">//点击选择时候  取消修改</span></span><br><span class="line">    <span class="keyword">switch</span> ($(<span class="keyword">this</span>).text()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"点"</span>:</span><br><span class="line">            shapeName = <span class="string">'Point'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"线"</span>:</span><br><span class="line">            shapeName = <span class="string">'LineString'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"多边形"</span>:</span><br><span class="line">            shapeName = <span class="string">'Polygon'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"圆形"</span>:</span><br><span class="line">            shapeName = <span class="string">'Circle'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"菱形"</span>:</span><br><span class="line">            shapeName = <span class="string">'Circle'</span>;</span><br><span class="line">            geometryFunction = ol.interaction.Draw.createRegularPolygon(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"矩形"</span>:</span><br><span class="line">            shapeName = <span class="string">'LineString'</span>;</span><br><span class="line">            maxPoints = <span class="number">2</span>;</span><br><span class="line">            geometryFunction = <span class="function"><span class="keyword">function</span>(<span class="params">coordinates, geometry</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!geometry) &#123;</span><br><span class="line">                    geometry = <span class="keyword">new</span> ol.geom.Polygon(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> start = coordinates[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> end = coordinates[<span class="number">1</span>];</span><br><span class="line">                geometry.setCoordinates([</span><br><span class="line">                    [start, [start[<span class="number">0</span>], end[<span class="number">1</span>]], end, [end[<span class="number">0</span>], start[<span class="number">1</span>]], start]</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> geometry;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"修改形状"</span>:</span><br><span class="line">            reshape.init();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"打印地图"</span>:</span><br><span class="line">            printMap.init();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    draw = <span class="keyword">new</span> ol.interaction.Draw(&#123;</span><br><span class="line">        source: source,</span><br><span class="line">        type: <span class="comment">/** @type &#123;ol.geom.GeometryType&#125; */</span> (shapeName),</span><br><span class="line">        geometryFunction: geometryFunction,</span><br><span class="line">        maxPoints: maxPoints</span><br><span class="line">    &#125;);</span><br><span class="line">    map.addInteraction(draw); <span class="comment">//增加的交互</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*修改地图*/</span></span><br><span class="line"><span class="keyword">var</span> reshape = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// select选择形状</span></span><br><span class="line">        <span class="comment">// modify修改形状</span></span><br><span class="line">        <span class="keyword">var</span> select = <span class="keyword">new</span> ol.interaction.Select(&#123;</span><br><span class="line">            wrapX: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> modify = <span class="keyword">new</span> ol.interaction.Modify(&#123;</span><br><span class="line">            features: select.getFeatures()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// var selectModify = new ol.interaction.defaults().extend([select, modify]);</span></span><br><span class="line">        map.addInteraction(select);</span><br><span class="line">        map.addInteraction(modify);</span><br><span class="line">        <span class="comment">//interactions: ol.interaction.defaults().extend([select, modify]),</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*打印地图*/</span></span><br><span class="line"><span class="keyword">var</span> printMap = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        map.removeInteraction(draw); <span class="comment">//点击选择时候  取消绘制</span></span><br><span class="line">        <span class="keyword">var</span> dims = &#123;</span><br><span class="line">            a0: [<span class="number">1189</span>, <span class="number">841</span>],</span><br><span class="line">            a1: [<span class="number">841</span>, <span class="number">594</span>],</span><br><span class="line">            a2: [<span class="number">594</span>, <span class="number">420</span>],</span><br><span class="line">            a3: [<span class="number">420</span>, <span class="number">297</span>],</span><br><span class="line">            a4: [<span class="number">297</span>, <span class="number">210</span>],</span><br><span class="line">            a5: [<span class="number">210</span>, <span class="number">148</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> loading = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> loaded = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// var exportButton = document.getElementById('export-pdf');</span></span><br><span class="line">        <span class="comment">// exportButton.disabled = true;</span></span><br><span class="line">        <span class="built_in">document</span>.body.style.cursor = <span class="string">'progress'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> format = <span class="built_in">document</span>.getElementById(<span class="string">'format'</span>).value;</span><br><span class="line">        <span class="keyword">var</span> resolution = <span class="built_in">document</span>.getElementById(<span class="string">'resolution'</span>).value;</span><br><span class="line">        <span class="keyword">var</span> dim = dims[format];</span><br><span class="line">        <span class="keyword">var</span> width = <span class="built_in">Math</span>.round(dim[<span class="number">0</span>] * resolution / <span class="number">25.4</span>);</span><br><span class="line">        <span class="keyword">var</span> height = <span class="built_in">Math</span>.round(dim[<span class="number">1</span>] * resolution / <span class="number">25.4</span>);</span><br><span class="line">        <span class="keyword">var</span> size = <span class="comment">/** @type &#123;ol.Size&#125; */</span> (map.getSize());</span><br><span class="line">        <span class="keyword">var</span> extent = map.getView().calculateExtent(size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> source = bglayer.getSource();</span><br><span class="line">        <span class="keyword">var</span> tileLoadStart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            ++loading;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tileLoadEnd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            ++loaded;</span><br><span class="line">            <span class="keyword">if</span> (loading === loaded) &#123;</span><br><span class="line">                <span class="keyword">var</span> canvas = <span class="keyword">this</span>;</span><br><span class="line">                <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    loading = <span class="number">0</span>;</span><br><span class="line">                    loaded = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">var</span> data = canvas.toDataURL(<span class="string">'image/png'</span>); <span class="comment">//canvas</span></span><br><span class="line">                    <span class="keyword">var</span> pdf = <span class="keyword">new</span> jsPDF(<span class="string">'landscape'</span>, <span class="literal">undefined</span>, format);</span><br><span class="line">                    pdf.addImage(data, <span class="string">'JPEG'</span>, <span class="number">0</span>, <span class="number">0</span>, dim[<span class="number">0</span>], dim[<span class="number">1</span>]);</span><br><span class="line">                    pdf.save(<span class="string">'map.pdf'</span>);</span><br><span class="line">                    source.un(<span class="string">'tileloadstart'</span>, tileLoadStart);</span><br><span class="line">                    source.un(<span class="string">'tileloadend'</span>, tileLoadEnd, canvas);</span><br><span class="line">                    source.un(<span class="string">'tileloaderror'</span>, tileLoadEnd, canvas);</span><br><span class="line">                    map.setSize(size);</span><br><span class="line">                    map.getView().fit(extent, size);</span><br><span class="line">                    map.renderSync();</span><br><span class="line">                    <span class="comment">// exportButton.disabled = false;</span></span><br><span class="line">                    <span class="built_in">document</span>.body.style.cursor = <span class="string">'auto'</span>;</span><br><span class="line">                &#125;, <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        map.once(<span class="string">'postcompose'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            source.on(<span class="string">'tileloadstart'</span>, tileLoadStart);</span><br><span class="line">            source.on(<span class="string">'tileloadend'</span>, tileLoadEnd, event.context.canvas);</span><br><span class="line">            source.on(<span class="string">'tileloaderror'</span>, tileLoadEnd, event.context.canvas);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        map.setSize([width, height]);</span><br><span class="line">        map.getView().fit(extent, <span class="comment">/** @type &#123;ol.Size&#125; */</span> (map.getSize()));</span><br><span class="line">        map.renderSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack项目实践</title>
      <link href="/2016/09/28/webpack%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
      <url>/2016/09/28/webpack%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-目录结构初步构想"><a href="#1-目录结构初步构想" class="headerlink" title="1.目录结构初步构想"></a>1.目录结构初步构想</h1><p>上面的例子只是介绍了webpack的基本用法，并没有按照一个实际的项目进行构建目录结构，对于一个多页面的项目我们定义的目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- web/                  # web根目录</span><br><span class="line">  - src/                # 开发目录</span><br><span class="line">    - home/             # 主页目录</span><br><span class="line">      + css/            # css/sass资源目录</span><br><span class="line">      + img/            # 图片资源目录</span><br><span class="line">      + js/             # js&amp;jsx资源目录</span><br><span class="line">      entry.js          # webpack入口文件</span><br><span class="line">      home.html         # 页面文件</span><br><span class="line">    - about/            # about页目录</span><br><span class="line">      + css/            # css/sass资源目录</span><br><span class="line">      + img/            # 图片资源目录</span><br><span class="line">      + js/             # js&amp;jsx资源目录</span><br><span class="line">      entry.js          # webpack入口文件</span><br><span class="line">      about.html        # about页面文件</span><br><span class="line">  - dist/               # 编译输出目录，即发布目录</span><br><span class="line">    - home/             # 编译输出的home目录</span><br><span class="line">    - about/            # 编译输出的about目录</span><br><span class="line">    - common/           # 编译输出的公共资源目录</span><br><span class="line">      + js/             # 编译输出的公共js目录</span><br><span class="line">      + css/            # 编译输出的公共css目录</span><br><span class="line">      + img/            # 编译输出的公共图片目录</span><br><span class="line">    - index.html        # 系统html入口</span><br><span class="line">  webpack.config.js     # webpack配置文件</span><br><span class="line">  package.json          # 项目配置</span><br><span class="line">  .babelrc              # 配置es-2015</span><br><span class="line">  README.md             # 项目说明</span><br></pre></td></tr></table></figure></p><p>将上两篇博客<code>webpack基础实践1-2</code>中的例子配置文件改成如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/home/entry.js"</span>, <span class="comment">//入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>,<span class="string">'home'</span>),</span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        publicPath:<span class="string">'./images/'</span><span class="comment">//可以限定图片生成位置的路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">"style!css"</span> &#125;, <span class="comment">//css加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">"style!css!sass"</span> &#125;, <span class="comment">//sass加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png)$/</span>, <span class="attr">loader</span>: <span class="string">"url?limit=8192&amp;name=../images/[hash].[ext]"</span> &#125;, <span class="comment">//图片加载器[name].[ext]  limit 是限制大小，大于这个尺寸会是单独的图片，小于这个尺寸是base64的形式</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel-loader'</span>, &#125;<span class="comment">//babel加载器</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>入口文件等只需要改换成相对路径即可</p><h1 id="2-独立css文件"><a href="#2-独立css文件" class="headerlink" title="2.独立css文件"></a>2.独立css文件</h1><p>需要配合插件一起使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-text-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>比1中配置文件增加/修改的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//... ...  </span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>)&#125;, <span class="comment">//css加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader!sass-loader"</span>)&#125;, <span class="comment">//sass加载器</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时在html文件中引入就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./home/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-多入口"><a href="#3-多入口" class="headerlink" title="3.多入口"></a>3.多入口</h1><p>为了模拟数据，我们在<code>home</code>文件夹下新建了一个<code>entry2.js</code>入口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m2 = <span class="built_in">require</span>(<span class="string">"./module2.js"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(m2);</span><br><span class="line"><span class="comment">/*es6*/</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./es6test2.js"</span>);</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        page1:<span class="string">"./src/home/entry.js"</span>,</span><br><span class="line">        page2:<span class="string">"./src/home/entry2.js"</span></span><br><span class="line"></span><br><span class="line">    &#125;, <span class="comment">//入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'dist'</span>,<span class="string">'home'</span>),</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>)&#125;, <span class="comment">//css加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader!sass-loader"</span>)&#125;, <span class="comment">//sass加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png)$/</span>, <span class="attr">loader</span>: <span class="string">"url?limit=8192&amp;name=../images/[hash].[ext]"</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel-loader'</span>, &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个时候需要在<code>index.html</code>中分别引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./home/page1.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./home/page2.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./home/page1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./home/page2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-提取公共部分"><a href="#4-提取公共部分" class="headerlink" title="4.提取公共部分"></a>4.提取公共部分</h1><p>第3部分中给出的<code>entry2.js</code>和<code>entry.js</code>是有相同的部分的，我们想要实现的是可以提取出两者的公共部分。<br>配置文件中增加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">//... ...</span></span><br><span class="line">plugins: [</span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>如果公共部分想单列一个文件夹下，可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new webpack.optimize.CommonsChunkPlugin(&apos;../common/js/common.js&apos;)</span><br></pre></td></tr></table></figure></p><p>在html文件中引入<code>common.js</code>文件即可</p><h1 id="5-实践后的项目目录"><a href="#5-实践后的项目目录" class="headerlink" title="5.实践后的项目目录"></a>5.实践后的项目目录</h1><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webpack项目文件夹.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究4.2-ol3源码分析-Map,View</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.2/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Map"><a href="#1-Map" class="headerlink" title="1.Map"></a>1.Map</h1><p><code>ol/ol/map.js</code> </p><h2 id="1-1构造函数"><a href="#1-1构造函数" class="headerlink" title="1.1构造函数"></a>1.1构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol.Map = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  ol.Object.call(<span class="keyword">this</span>);<span class="comment">//@extends &#123;ol.Object&#125;</span></span><br><span class="line">   <span class="keyword">var</span> optionsInternal = ol.Map.createOptionsInternal(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常量对象共享地图设置，并且将常量对象共享出去，作为公用变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol.MapProperty'</span>);</span><br><span class="line">ol.MapProperty = &#123;</span><br><span class="line">  LAYERGROUP: <span class="string">'layergroup'</span>,</span><br><span class="line">  SIZE: <span class="string">'size'</span>,</span><br><span class="line">  TARGET: <span class="string">'target'</span>,</span><br><span class="line">  VIEW: <span class="string">'view'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>createOptionsInternal</code>函数对map中的配置对象进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别处理layer、layerGroup、target、view、renderer、controls、interactions、overlays</span></span><br><span class="line"> <span class="keyword">var</span> layerGroup = (options.layers <span class="keyword">instanceof</span> ol.layer.Group) ?</span><br><span class="line">      options.layers : <span class="keyword">new</span> ol.layer.Group(&#123;<span class="attr">layers</span>: options.layers&#125;);</span><br><span class="line">  values[ol.MapProperty.LAYERGROUP] = layerGroup;</span><br><span class="line"></span><br><span class="line">  values[ol.MapProperty.TARGET] = options.target;</span><br><span class="line"></span><br><span class="line">  values[ol.MapProperty.VIEW] = options.view !== <span class="literal">undefined</span> ?</span><br><span class="line">      options.view : <span class="keyword">new</span> ol.View();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    controls: controls,</span><br><span class="line">    interactions: interactions,</span><br><span class="line">    keyboardEventTarget: keyboardEventTarget,</span><br><span class="line">    logos: logos,</span><br><span class="line">    overlays: overlays,</span><br><span class="line">    rendererConstructor: rendererConstructor,</span><br><span class="line">    values: values</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>运用实例-初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">    controls: ol.control.defaults().extend([</span><br><span class="line">        <span class="keyword">new</span> ol.control.ScaleLine(), <span class="comment">//比例尺</span></span><br><span class="line">    ]),</span><br><span class="line">    layers: [bglayer, vector], <span class="comment">//添加两个图层</span></span><br><span class="line">    target: <span class="string">'map'</span>, <span class="comment">//div#id='map'</span></span><br><span class="line">    view: view,</span><br><span class="line">    interaction:interaction</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="1-2-方法-事件"><a href="#1-2-方法-事件" class="headerlink" title="1.2 方法 事件"></a>1.2 方法 事件</h2><p>方法 事件列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">addControl</span><br><span class="line">addInteraction</span><br><span class="line">addLayer</span><br><span class="line">addOverlay</span><br><span class="line">beforeRender</span><br><span class="line">changed</span><br><span class="line">dispatchEvent</span><br><span class="line">forEachFeatureAtPixel</span><br><span class="line">forEachLayerAtPixel</span><br><span class="line">get</span><br><span class="line">getControls</span><br><span class="line">getCoordinateFromPixel</span><br><span class="line">getEventCoordinate</span><br><span class="line">getEventPixel</span><br><span class="line">getInteractions</span><br><span class="line">getKeys</span><br><span class="line">getLayerGroup</span><br><span class="line">getLayers</span><br><span class="line">getOverlayById</span><br><span class="line">getOverlays</span><br><span class="line">getPixelFromCoordinate</span><br><span class="line">getProperties</span><br><span class="line">getRevision</span><br><span class="line">getSize</span><br><span class="line">getTarget</span><br><span class="line">getTargetElement</span><br><span class="line">getView</span><br><span class="line">getViewport</span><br><span class="line">hasFeatureAtPixel</span><br><span class="line">on</span><br><span class="line">once</span><br><span class="line">removeControl</span><br><span class="line">removeInteraction</span><br><span class="line">removeLayer</span><br><span class="line">removeOverlay</span><br><span class="line">render</span><br><span class="line">renderSync</span><br><span class="line">set</span><br><span class="line">setLayerGroup</span><br><span class="line">setProperties</span><br><span class="line">setSize</span><br><span class="line">setTarget</span><br><span class="line">setView</span><br><span class="line">un</span><br><span class="line">unByKey</span><br><span class="line">unset</span><br><span class="line">updateSize</span><br></pre></td></tr></table></figure></p><p>实现方式举几个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ol.Map.prototype.addControl = <span class="function"><span class="keyword">function</span>(<span class="params">control</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> controls = <span class="keyword">this</span>.getControls();</span><br><span class="line">  goog.asserts.assert(controls !== <span class="literal">undefined</span>, <span class="string">'controls should be defined'</span>);</span><br><span class="line">  controls.push(control);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ol.Map.prototype.addInteraction = <span class="function"><span class="keyword">function</span>(<span class="params">interaction</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> interactions = <span class="keyword">this</span>.getInteractions();</span><br><span class="line">  goog.asserts.assert(interactions !== <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">'interactions should be defined'</span>);</span><br><span class="line">  interactions.push(interaction);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>controls</code>控件,控件添加到<code>map</code>上，对控件设置两个监听事件，增加、删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.controls_ = optionsInternal.controls;</span><br><span class="line"><span class="keyword">this</span>.controls_.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">control</span>) </span>&#123;</span><br><span class="line">        control.setMap(<span class="keyword">this</span>);</span><br><span class="line">      &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  ol.events.listen(<span class="keyword">this</span>.controls_, ol.CollectionEventType.ADD, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event.element.setMap(<span class="keyword">this</span>);</span><br><span class="line">      &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  ol.events.listen(<span class="keyword">this</span>.controls_, ol.CollectionEventType.REMOVE, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event.element.setMap(<span class="literal">null</span>);</span><br><span class="line">      &#125;, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h1 id="2-View"><a href="#2-View" class="headerlink" title="2.View"></a>2.View</h1><p><code>ol/ol/view.js</code> </p><h2 id="2-1构造函数"><a href="#2-1构造函数" class="headerlink" title="2.1构造函数"></a>2.1构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ol.View = <span class="function"><span class="keyword">function</span>(<span class="params">opt_options</span>) </span>&#123;</span><br><span class="line">  ol.Object.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> options = opt_options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.projection_ = ol.proj.createProjection(options.projection, <span class="string">'EPSG:3857'</span>);</span><br><span class="line">  <span class="comment">//... ...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运用实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">target: <span class="string">'map'</span>,</span><br><span class="line">view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">            projection: <span class="string">'EPSG:4326'</span>, <span class="comment">//WGS 84</span></span><br><span class="line">            center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            zoom: <span class="number">2</span>,</span><br><span class="line">            maxResolution: <span class="number">0.703125</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol.View'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.ViewHint'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.ViewProperty'</span>);</span><br></pre></td></tr></table></figure><p>提供不只是一个构造函数，还有两个常量对象，其中一个常量对象包含三个常量如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ol.ViewProperty = &#123;</span><br><span class="line">  CENTER: <span class="string">'center'</span>,</span><br><span class="line">  RESOLUTION: <span class="string">'resolution'</span>,</span><br><span class="line">  ROTATION: <span class="string">'rotation'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实，我们在对象属性中写出来的，如<code>center</code>,作用等同于用下面介绍的方法<code>setCenter</code>,其本质是写入常量中，共享出去作为公用。</p><h2 id="2-2方法-事件"><a href="#2-2方法-事件" class="headerlink" title="2.2方法 事件"></a>2.2方法 事件</h2><p>举例；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ol.View.prototype.setCenter = <span class="function"><span class="keyword">function</span>(<span class="params">center</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.set(ol.ViewProperty.CENTER, center);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC1-原理探究</title>
      <link href="/2016/09/28/WebRTC1-%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
      <url>/2016/09/28/WebRTC1-%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-抛砖引玉"><a href="#1-抛砖引玉" class="headerlink" title="1.抛砖引玉"></a>1.抛砖引玉</h3><p><code>WebRTC (Web Real-Time Communications)</code> 是一项实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流或/和音频流或者其他任意数据的传输<br>实时查看WebRTC在浏览器中的支持情况： <a href="http://caniuse.com/#search=webRTC" target="_blank" rel="noopener">http://caniuse.com/#search=webRTC</a><br>FirFox 45+,Chrome 29+,Oprea 36+,Edge 14+,Android Brower 50+支持，其余支持情况有问题。   </p><p>备注：有的时候会使用<code>adapter.js</code>，这个js文件是为了提高兼容性，可以直接使用API 不用加前缀<br>使用：  </p><ul><li>下载  </li><li>引用 <code>&lt;script src=&quot;adapter.js&quot;&gt;</code><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/adapter.js" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/adapter.js</a>  </p></blockquote></li></ul><p><strong>几个概念</strong>   </p><ul><li><em>SDP(Session Description Protocol)</em><br>SDP是一种会话描述协议，用来描述双方的IP地址和端口号，通信所使用的带宽，会话的名称、标识符、激活时间，双方所要传输的媒体类型（视频、音频、文本）、媒体格式等等。该协议仅包含所要传递的媒体的描述信息，而不直接传递媒体内容。             </li><li><em>ICE（Interactive Connectivity Establishment）</em><br>ICE是一种以UDP为基础用于实现穿越NAT网管或者防火墙的协议。              </li><li><em>TURN&amp;&amp;STUN</em><br>两种协议都是用来明确自己的外网地址的，差别是如果要服务器辅助进行数据交换则设置TURN服务器，不需要则设置STUN服务。           </li></ul><p><strong>核心API</strong>    </p><ul><li><em>Navigator.getUserMedia</em><br>用来获取视频和音频，在浏览器装有摄像头和麦克风的情况下使用.<code>navigator.getUserMedia(constraints, successCallback, errorCallback)</code>；constraints是用来控制视频和音频是否获取，一般设为{video:true,audio: true}，即视频和音频都获取。      </li><li><em>RTCPeerConnection</em><br>RTCPeerConnection是一个表示两个浏览器端的连接的对象，其含有关于这个连接的所有信息和相关方法，是WebRTC的核心API，负责制作建立连接的SDP、ICE等报文，管理连接状态等等。      </li><li><em>RTCDataChannel</em><br>RTCDataChannel由RTCPeerConnection创建，需要传递视频、音频以外的数据时使用，它代表浏览器两端间的一个数据通道，和这个数据通道有关的属性和方法都记录在这个对象里。 </li></ul><h3 id="2-按图索骥"><a href="#2-按图索骥" class="headerlink" title="2.按图索骥"></a>2.按图索骥</h3><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webRTC.png" alt=""><br> <strong>过程:</strong>    </p><ol><li>首先双方都建立一个RTCPeerConnection的实例，其中一方（称为offer方）用<code>RTCPeerConnection.createOffer()</code>创建一个会话描述<code>sessionDescription</code>，该会话描述包含SDP报文信息和该sessionDescription的类型(type)    </li><li>接下来调用<code>RTCPeerConnection.setLocalDescription()</code>方法将本地的<code>localDescription</code>设置为刚才创建的<code>sessionDescription</code>。之后将创建的<code>sessionDescription</code>发送给对方（称为answer方），发送方式没有规定，可以通过服务器中转，可以通过IM软件发送(这里使用WebSocket信令服务器)。    </li><li>answer端接收到<code>sessionDescription</code>后调用<code>RTCPeerConnection. setRemoteDescription</code>方法设置,然后调用<code>RTCPeerConnection. createAnswer</code>方法产生自己的<code>sessionDescription</code>。    </li><li>再将创建的<code>sessionDescription</code>发送给offfer方，同样发送方式没有规定。offer方接收到<code>sessionDescrip</code>后调用<code>RTCPeerConnection. setRemoteDescription</code>方法设置，这样双方的SDP信息就交换完成了。   </li><li>在完成SDP的交换后双方还要交换ICE candidate信息。双方首先设置<code>RTCPeerConnection.onicecandidate</code>回调函数，当candidate可用时，双方中的一方将所有<code>icecandidate</code>发送给对方，发送方式同样没有规定，接收方调用<code>RTCPeerConnection.addIceCandidate</code>方法接收candidate信息。经过这些步骤后双方连接就建立完成了。   </li></ol><h3 id="3-纸上可谈兵"><a href="#3-纸上可谈兵" class="headerlink" title="3.纸上可谈兵"></a>3.纸上可谈兵</h3><h4 id="3-1-由简入繁"><a href="#3-1-由简入繁" class="headerlink" title="3.1.由简入繁"></a>3.1.由简入繁</h4><p>html文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"JavaScript, WebRTC"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"WebRTC"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取本地视频<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"simpleVideo.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;video /&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'../lib/adapter.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"simpleVideo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constraints = &#123;</span><br><span class="line">    video: <span class="literal">true</span>,</span><br><span class="line">    audio:<span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.stream = stream; <span class="comment">// stream available to console</span></span><br><span class="line">    <span class="built_in">console</span>.log(stream);</span><br><span class="line">    <span class="built_in">console</span>.log(stream.getVideoTracks());</span><br><span class="line">    <span class="built_in">console</span>.log(stream.getAudioTracks());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">"video"</span>);</span><br><span class="line">    video.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">    video.play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getUserMedia error: "</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserMedia(constraints, successCallback, errorCallback);</span><br></pre></td></tr></table></figure></p><h4 id="3-2-顺藤摸瓜"><a href="#3-2-顺藤摸瓜" class="headerlink" title="3.2.顺藤摸瓜"></a>3.2.顺藤摸瓜</h4><p>这是个完整的例子，参照<code>2.按图索骥</code>部分理解<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"JavaScript, WebRTC"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"WebRTC codelab"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebRTC codelab: step 2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- css可以使用一些滤镜效果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'js/lib/adapter.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"localVideo"</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"remoteVideo"</span> <span class="attr">autoplay</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"startButton"</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"callButton"</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"hangupButton"</span>&gt;</span>Hang Up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><code>index.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> localStream, localPeerConnection, remotePeerConnection;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> localVideo = <span class="built_in">document</span>.getElementById(<span class="string">"localVideo"</span>);</span><br><span class="line">   <span class="keyword">var</span> remoteVideo = <span class="built_in">document</span>.getElementById(<span class="string">"remoteVideo"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> startButton = <span class="built_in">document</span>.getElementById(<span class="string">"startButton"</span>);</span><br><span class="line">   <span class="keyword">var</span> callButton = <span class="built_in">document</span>.getElementById(<span class="string">"callButton"</span>);</span><br><span class="line">   <span class="keyword">var</span> hangupButton = <span class="built_in">document</span>.getElementById(<span class="string">"hangupButton"</span>);</span><br><span class="line">   startButton.disabled = <span class="literal">false</span>;</span><br><span class="line">   callButton.disabled = <span class="literal">true</span>;</span><br><span class="line">   hangupButton.disabled = <span class="literal">true</span>;</span><br><span class="line">   startButton.onclick = start;</span><br><span class="line">   callButton.onclick = call;</span><br><span class="line">   hangupButton.onclick = hangup;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">trace</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log((performance.now() / <span class="number">1000</span>).toFixed(<span class="number">3</span>) + <span class="string">": "</span> + text);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gotStream</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">       trace(<span class="string">"Received local stream"</span>);</span><br><span class="line">       localVideo.src = URL.createObjectURL(stream);</span><br><span class="line">       localStream = stream;</span><br><span class="line">       callButton.disabled = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       trace(<span class="string">"Requesting local stream"</span>);</span><br><span class="line">       startButton.disabled = <span class="literal">true</span>;</span><br><span class="line">       getUserMedia(&#123;</span><br><span class="line">               audio: <span class="literal">true</span>,</span><br><span class="line">               video: <span class="literal">true</span></span><br><span class="line">           &#125;, gotStream,</span><br><span class="line">           <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">               trace(<span class="string">"getUserMedia error: "</span>, error);</span><br><span class="line">           &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       callButton.disabled = <span class="literal">true</span>;</span><br><span class="line">       hangupButton.disabled = <span class="literal">false</span>;</span><br><span class="line">       trace(<span class="string">"Starting call"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (localStream.getVideoTracks().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           trace(<span class="string">'Using video device: '</span> + localStream.getVideoTracks()[<span class="number">0</span>].label);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (localStream.getAudioTracks().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           trace(<span class="string">'Using audio device: '</span> + localStream.getAudioTracks()[<span class="number">0</span>].label);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> servers = <span class="literal">null</span>;<span class="comment">//本机测试不用其他服务器</span></span><br><span class="line"></span><br><span class="line">       localPeerConnection = <span class="keyword">new</span> RTCPeerConnection(servers);<span class="comment">//offer方</span></span><br><span class="line">       trace(<span class="string">"Created local peer connection object localPeerConnection"</span>);</span><br><span class="line">       localPeerConnection.onicecandidate = gotLocalIceCandidate;<span class="comment">//offer方发送ICE</span></span><br><span class="line">       remotePeerConnection = <span class="keyword">new</span> RTCPeerConnection(servers);<span class="comment">//answe方</span></span><br><span class="line">       trace(<span class="string">"Created remote peer connection object remotePeerConnection"</span>);</span><br><span class="line">       remotePeerConnection.onicecandidate = gotRemoteIceCandidate;<span class="comment">//answer方发送ICE</span></span><br><span class="line">       remotePeerConnection.onaddstream = gotRemoteStream;<span class="comment">//设置视频流</span></span><br><span class="line"></span><br><span class="line">       localPeerConnection.addStream(localStream);</span><br><span class="line">       trace(<span class="string">"Added localStream to localPeerConnection"</span>);</span><br><span class="line">       localPeerConnection.createOffer(gotLocalDescription, handleError);<span class="comment">//作为offer，产生自己的SessionDescription【SD】信息</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gotLocalDescription</span>(<span class="params">description</span>) </span>&#123;<span class="comment">//description是offer方的SD</span></span><br><span class="line">       localPeerConnection.setLocalDescription(description);</span><br><span class="line">       trace(<span class="string">"Offer from localPeerConnection: \n"</span> + description.sdp);</span><br><span class="line">       remotePeerConnection.setRemoteDescription(description);<span class="comment">//answer方接收offer的SD</span></span><br><span class="line">       remotePeerConnection.createAnswer(gotRemoteDescription, handleError);<span class="comment">//answer方发送自己的SD</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gotRemoteDescription</span>(<span class="params">description</span>) </span>&#123;</span><br><span class="line">       remotePeerConnection.setLocalDescription(description);<span class="comment">//anwer方设置本身自己的SD</span></span><br><span class="line">       trace(<span class="string">"Answer from remotePeerConnection: \n"</span> + description.sdp);</span><br><span class="line">       localPeerConnection.setRemoteDescription(description);<span class="comment">//offer接收answer方的SD</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">hangup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       trace(<span class="string">"Ending call"</span>);</span><br><span class="line">       localPeerConnection.close();</span><br><span class="line">       remotePeerConnection.close();</span><br><span class="line">       localPeerConnection = <span class="literal">null</span>;</span><br><span class="line">       remotePeerConnection = <span class="literal">null</span>;</span><br><span class="line">       hangupButton.disabled = <span class="literal">true</span>;</span><br><span class="line">       callButton.disabled = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gotRemoteStream</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">       remoteVideo.src = URL.createObjectURL(event.stream);</span><br><span class="line">       trace(<span class="string">"Received remote stream"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gotLocalIceCandidate</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (event.candidate) &#123;</span><br><span class="line">           remotePeerConnection.addIceCandidate(<span class="keyword">new</span> RTCIceCandidate(event.candidate));<span class="comment">//answer方接收ICE</span></span><br><span class="line">           trace(<span class="string">"Local ICE candidate: \n"</span> + event.candidate.candidate);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gotRemoteIceCandidate</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (event.candidate) &#123;</span><br><span class="line">           localPeerConnection.addIceCandidate(<span class="keyword">new</span> RTCIceCandidate(event.candidate));<span class="comment">//offer方接收ICE</span></span><br><span class="line">           trace(<span class="string">"Remote ICE candidate: \n "</span> + event.candidate.candidate);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>另外加一些CSS可以很容易实现滤镜效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(180deg) <span class="built_in">saturate</span>(200%);</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">hue-rotate</span>(180deg) <span class="built_in">saturate</span>(200%);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">hue-rotate</span>(180deg) <span class="built_in">saturate</span>(200%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行这两段代码，就可以调出来本地视频窗口   </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bitbucket.org/webrtc/codelab" target="_blank" rel="noopener">强烈推荐的WebRTC入门教程</a><br><a href="https://sites.google.com/site/webrtc/" target="_blank" rel="noopener">google webRTC</a><br><a href="https://webrtc.org/" target="_blank" rel="noopener">WebRTC官网</a><br><a href="http://w3c.github.io/webrtc-pc/" target="_blank" rel="noopener">WebRTC-W3School</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API" target="_blank" rel="noopener">MDN-WebRTC</a></p><p><a href="https://segmentfault.com/a/1190000000436544" target="_blank" rel="noopener">WebRTC实践教程</a><br><a href="http://www.tuicool.com/articles/eYJvee" target="_blank" rel="noopener">使用WebRTC搭建前端视频聊天室——信令篇</a><br><a href="https://www.zhihu.com/question/25497090" target="_blank" rel="noopener">可以用WebRTC来做视频直播吗？-知乎</a><br><a href="https://shishimao.com/" target="_blank" rel="noopener">实时猫–WebRTC服务商</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> HTML5 </tag>
            
            <tag> WebRTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究4.1-ol3源码分析-底层基础</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.1/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.1/</url>
      
        <content type="html"><![CDATA[<p>因为下面的内容会分模块介绍源码，所以这里为了方便，首先介绍源码的目录结构<br>在OpenLayers 3官网的<a href="http://openlayers.org/download/" target="_blank" rel="noopener">下载页面</a>下载我们在开发工程中需要的文件(如：v3.17.1.zip)，注意如果需要编译源代码，需要下载包含编译功能的文件包：<a href="https://github.com/openlayers/ol3/releases" target="_blank" rel="noopener">https://github.com/openlayers/ol3/releases</a> 下载指定release版本的源码，注意是Source code (zip)或者Source code (tar.gz)。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="ol3源码目录结构.png"></p><ul><li><code>apidoc</code>是ol3的api文档，打开<code>ol.html</code>就可以在浏览器中离线使用，当然也可以在官网中查看api；</li><li><code>build</code>是ol3编译过的文件，工程开发中可以直接使用，下部分的案例是基于离线的源码的；</li><li><code>closure-library</code>是google的closure库文件夹；</li><li><code>css</code>里面只有<code>ol.css</code>一个文件，是定义ol3的全局样式，项目开发中需要引入；</li><li><code>doc</code>提供给我们一些的案例，打开<code>quickstart.html</code>即可看到快速开始的案例；</li><li><code>examples</code>是比较丰富的例子，和官网中的examples一样；</li><li><code>ol</code>就是我们要分析的源码文件夹；</li><li><code>ol.ext</code>是ol3所要使用的js库。</li></ul><p><code>ol/ol</code>文件夹下是我们分析的源码，分析基本思路：文件夹下的文件是公用的部分(A部分)，文件夹是分部分写的(B部分)。</p><h1 id="0-底层基础"><a href="#0-底层基础" class="headerlink" title="0.底层基础"></a>0.底层基础</h1><h2 id="0-1-ol-js"><a href="#0-1-ol-js" class="headerlink" title="0.1 ol.js"></a>0.1 <code>ol.js</code></h2><p>第一行就可以看出，<code>ol.js</code>提供全局的第一命名空间<code>ol</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol'</span>);</span><br></pre></td></tr></table></figure><p>唯一的一个方法是：继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol.inherits = <span class="function"><span class="keyword">function</span>(<span class="params">childCtor, parentCtor</span>) </span>&#123;</span><br><span class="line">  childCtor.prototype = <span class="built_in">Object</span>.create(parentCtor.prototype);</span><br><span class="line">  childCtor.prototype.constructor = childCtor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="0-2-object-js"><a href="#0-2-object-js" class="headerlink" title="0.2 object.js"></a>0.2 <code>object.js</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol.Object'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.ObjectEvent'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.ObjectEventType'</span>);</span><br><span class="line"></span><br><span class="line">goog.require(<span class="string">'ol.Observable'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.events'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.events.Event'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.object'</span>);</span><br></pre></td></tr></table></figure><p>ol命名空间下所有的基本对象，比如<code>map</code>对象，<code>feature</code>矢量地图对象，都应该建立在<code>ol.Object</code>基础上。如：</p><hr><p><code>map.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ol.Object.call(<span class="keyword">this</span>);</span><br><span class="line">ol.inherits(ol.Map, ol.Object);</span><br></pre></td></tr></table></figure><p><code>feature.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ol.Object.call(<span class="keyword">this</span>);</span><br><span class="line">ol.inherits(ol.Feature, ol.Object);</span><br></pre></td></tr></table></figure><hr><p>通过这行代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.inherits(ol.Object, ol.Observable);</span><br></pre></td></tr></table></figure></p><p>我们发现<code>ol.Object</code>继承<code>ol.Observable</code><br><code>Observable.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.inherits(ol.Observable, ol.events.EventTarget);</span><br></pre></td></tr></table></figure><p>我们发现<code>ol.Observable</code>继承<code>ol.EventTarget</code>；<br>这样，我们可以知道继承<code>ol.Object</code>后也就继承了基础事件<code>ol.events</code>。</p><h2 id="0-3-events-js"><a href="#0-3-events-js" class="headerlink" title="0.3 events.js"></a>0.3 <code>events.js</code></h2><p>ol3的基础事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol.events'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.events.EventType'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.events.KeyCode'</span>);</span><br><span class="line"></span><br><span class="line">goog.require(<span class="string">'ol.object'</span>);</span><br></pre></td></tr></table></figure><p>提供的所有基础事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ol.events.EventType = &#123;</span><br><span class="line">  CHANGE: <span class="string">'change'</span>,</span><br><span class="line">  CLICK: <span class="string">'click'</span>,</span><br><span class="line">  DBLCLICK: <span class="string">'dblclick'</span>,</span><br><span class="line">  DRAGENTER: <span class="string">'dragenter'</span>,</span><br><span class="line">  DRAGOVER: <span class="string">'dragover'</span>,</span><br><span class="line">  DROP: <span class="string">'drop'</span>,</span><br><span class="line">  ERROR: <span class="string">'error'</span>,</span><br><span class="line">  KEYDOWN: <span class="string">'keydown'</span>,</span><br><span class="line">  KEYPRESS: <span class="string">'keypress'</span>,</span><br><span class="line">  LOAD: <span class="string">'load'</span>,</span><br><span class="line">  MOUSEDOWN: <span class="string">'mousedown'</span>,</span><br><span class="line">  MOUSEMOVE: <span class="string">'mousemove'</span>,</span><br><span class="line">  MOUSEOUT: <span class="string">'mouseout'</span>,</span><br><span class="line">  MOUSEUP: <span class="string">'mouseup'</span>,</span><br><span class="line">  MOUSEWHEEL: <span class="string">'mousewheel'</span>,</span><br><span class="line">  MSPOINTERDOWN: <span class="string">'mspointerdown'</span>,</span><br><span class="line">  RESIZE: <span class="string">'resize'</span>,</span><br><span class="line">  TOUCHSTART: <span class="string">'touchstart'</span>,</span><br><span class="line">  TOUCHMOVE: <span class="string">'touchmove'</span>,</span><br><span class="line">  TOUCHEND: <span class="string">'touchend'</span>,</span><br><span class="line">  WHEEL: <span class="string">'wheel'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们分析一下提供的几个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol.events.bindListener_ = <span class="function"><span class="keyword">function</span>(<span class="params">listenerObj</span>) </span>&#123;&#125;;</span><br><span class="line">ol.events.listen = <span class="function"><span class="keyword">function</span>(<span class="params">target, type, listener, opt_this, opt_once</span>) </span>&#123;&#125;;</span><br><span class="line">ol.events.unlisten = <span class="function"><span class="keyword">function</span>(<span class="params">target, type, listener, opt_this</span>) </span>&#123;&#125;;</span><br><span class="line">ol.events.unlistenAll = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>其中方法名末尾带有”_”为私有方法，不带的为提供出去的共有方法。</p><h2 id="0-4-math-js"><a href="#0-4-math-js" class="headerlink" title="0.4 math.js"></a>0.4 <code>math.js</code></h2><p>提供基础的数学运算方法，角度转化弧度函数如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ol.math.toRadians = <span class="function"><span class="keyword">function</span>(<span class="params">angleInDegrees</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> angleInDegrees * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="0-5-animation-js"><a href="#0-5-animation-js" class="headerlink" title="0.5 animation.js"></a>0.5 <code>animation.js</code></h2><p>提供bounce、pan、rotate、zoom四种方法</p><h2 id="0-6-collection-js"><a href="#0-6-collection-js" class="headerlink" title="0.6 collection.js"></a>0.6 <code>collection.js</code></h2><p>对ol命名空间下的对象集合的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">goog.provide(<span class="string">'ol.Collection'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.CollectionEvent'</span>);</span><br><span class="line">goog.provide(<span class="string">'ol.CollectionEventType'</span>);</span><br><span class="line"></span><br><span class="line">goog.require(<span class="string">'ol.events.Event'</span>);</span><br><span class="line">goog.require(<span class="string">'ol.Object'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol.CollectionEventType = &#123;</span><br><span class="line">  ADD: <span class="string">'add'</span></span><br><span class="line">  REMOVE: <span class="string">'remove'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ol.inherits(ol.CollectionEvent, ol.events.Event);</span><br><span class="line">ol.inherits(ol.Collection, ol.Object);</span><br></pre></td></tr></table></figure><p>方法举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ol.Collection.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="keyword">this</span>.array_;</span><br><span class="line">  <span class="keyword">var</span> i, ii;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, ii = arr.length; i &lt; ii; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === elem) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="0-7-uri-js"><a href="#0-7-uri-js" class="headerlink" title="0.7 uri.js"></a>0.7 <code>uri.js</code></h2><p>通过url加载地图，其中<code>params</code>包含请求地图的宽、高、分辨率、地图范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ol.uri.appendParams = <span class="function"><span class="keyword">function</span>(<span class="params">uri, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> qs = <span class="built_in">Object</span>.keys(params).map(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[k]);</span><br><span class="line">  &#125;).join(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="comment">// remove any trailing ? or &amp;</span></span><br><span class="line">  uri = uri.replace(<span class="regexp">/[?&amp;]$/</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="comment">// append ? or &amp; depending on whether uri has existing parameters</span></span><br><span class="line">  uri = uri.indexOf(<span class="string">'?'</span>) === <span class="number">-1</span> ? uri + <span class="string">'?'</span> : uri + <span class="string">'&amp;'</span>;</span><br><span class="line">  <span class="keyword">return</span> uri + qs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenLayers 3实践与原理探究4.4-ol3源码分析-render</title>
      <link href="/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.4/"/>
      <url>/2016/09/28/openlayers%203%E5%AE%9E%E8%B7%B5%E4%B8%8E%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B64.4/</url>
      
        <content type="html"><![CDATA[<p>前面几节的内容介绍了<code>Map</code>,<code>View</code>,<code>Source</code>,<code>Layer</code>,这些其实我们都是要么在对象属性中设置 ，要么是通过方法设置，实质上是通过共享的全局变量设置地图包含的图层，地图的显示效果，但是如果真正上绘制在浏览器上，需要渲染在canvas(ol3常用的渲染方式).</p><p>由于源码代码量比较大，这里只是从大部分介绍流程。<br>网上有人(OpenLayers 3源码那些事)总结一张图的不错，这里拿来用一下<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/ol/ol3%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png" alt="ol3渲染流程"></p><h1 id="0-从map-js开始"><a href="#0-从map-js开始" class="headerlink" title="0.从map.js开始"></a>0.从<code>map.js</code>开始</h1><ul><li><strong>1) render/renderSync</strong><br>具体流程用注释的形式标出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//renderSync是异步的，同样道理</span></span><br><span class="line">ol.Map.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.animationDelayKey_ === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.animationDelayKey_ = ol.global.requestAnimationFrame(</span><br><span class="line">        <span class="keyword">this</span>.animationDelay_);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>2) animationDelay_</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.animationDelay_ = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.animationDelayKey_ = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">this</span>.renderFrame_.call(<span class="keyword">this</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>3) renderFrame_</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">ol.Map.prototype.renderFrame_ = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i, ii, viewState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> size = <span class="keyword">this</span>.getSize();</span><br><span class="line">  <span class="keyword">var</span> view = <span class="keyword">this</span>.getView();</span><br><span class="line">  <span class="keyword">var</span> extent = ol.extent.createEmpty();</span><br><span class="line">  <span class="comment">/** @type &#123;?olx.FrameState&#125; */</span></span><br><span class="line">  <span class="keyword">var</span> frameState = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (size !== <span class="literal">undefined</span> &amp;&amp; ol.size.hasArea(size) &amp;&amp; view &amp;&amp; view.isDef()) &#123;</span><br><span class="line">    <span class="keyword">var</span> viewHints = view.getHints(<span class="keyword">this</span>.frameState_ ? <span class="keyword">this</span>.frameState_.viewHints : <span class="literal">undefined</span>);</span><br><span class="line">    <span class="keyword">var</span> layerStatesArray = <span class="keyword">this</span>.getLayerGroup().getLayerStatesArray();</span><br><span class="line">    <span class="keyword">var</span> layerStates = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, ii = layerStatesArray.length; i &lt; ii; ++i) &#123;</span><br><span class="line">      layerStates[goog.getUid(layerStatesArray[i].layer)] = layerStatesArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    viewState = view.getState();</span><br><span class="line">    frameState = <span class="comment">/** @type &#123;olx.FrameState&#125; */</span> (&#123;      <span class="comment">//1.准备frameState</span></span><br><span class="line">      animate: <span class="literal">false</span>,</span><br><span class="line">      attributions: &#123;&#125;,</span><br><span class="line">      coordinateToPixelMatrix: <span class="keyword">this</span>.coordinateToPixelMatrix_,</span><br><span class="line">      extent: extent,</span><br><span class="line">      focus: !<span class="keyword">this</span>.focus_ ? viewState.center : <span class="keyword">this</span>.focus_,</span><br><span class="line">      index: <span class="keyword">this</span>.frameIndex_++,</span><br><span class="line">      layerStates: layerStates,<span class="comment">//layer的常量属性，通过共享作为全局变量</span></span><br><span class="line">      layerStatesArray: layerStatesArray,</span><br><span class="line">      logos: ol.object.assign(&#123;&#125;, <span class="keyword">this</span>.logos_),</span><br><span class="line">      pixelRatio: <span class="keyword">this</span>.pixelRatio_,</span><br><span class="line">      pixelToCoordinateMatrix: <span class="keyword">this</span>.pixelToCoordinateMatrix_,</span><br><span class="line">      postRenderFunctions: [],</span><br><span class="line">      size: size,</span><br><span class="line">      skippedFeatureUids: <span class="keyword">this</span>.skippedFeatureUids_,</span><br><span class="line">      tileQueue: <span class="keyword">this</span>.tileQueue_,</span><br><span class="line">      time: time,</span><br><span class="line">      usedTiles: &#123;&#125;,</span><br><span class="line">      viewState: viewState,<span class="comment">//view的常量属性，通过共享作为全局变量</span></span><br><span class="line">      viewHints: viewHints,</span><br><span class="line">      wantedTiles: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (frameState) &#123;</span><br><span class="line">    <span class="keyword">var</span> preRenderFunctions = <span class="keyword">this</span>.preRenderFunctions_;<span class="comment">//2.渲染前</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>, preRenderFunction;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, ii = preRenderFunctions.length; i &lt; ii; ++i) &#123;</span><br><span class="line">      preRenderFunction = preRenderFunctions[i];</span><br><span class="line">      <span class="keyword">if</span> (preRenderFunction(<span class="keyword">this</span>, frameState)) &#123;</span><br><span class="line">        preRenderFunctions[n++] = preRenderFunction;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    preRenderFunctions.length = n;</span><br><span class="line"></span><br><span class="line">    frameState.extent = ol.extent.getForViewAndSize(viewState.center,</span><br><span class="line">        viewState.resolution, viewState.rotation, frameState.size, extent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.frameState_ = frameState;</span><br><span class="line">  <span class="keyword">this</span>.renderer_.renderFrame(frameState);                <span class="comment">//3.渲染</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (frameState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (frameState.animate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.render();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.apply(</span><br><span class="line">        <span class="keyword">this</span>.postRenderFunctions_, frameState.postRenderFunctions);<span class="comment">//4.渲染后</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> idle = <span class="keyword">this</span>.preRenderFunctions_.length === <span class="number">0</span> &amp;&amp;</span><br><span class="line">        !frameState.viewHints[ol.ViewHint.ANIMATING] &amp;&amp;</span><br><span class="line">        !frameState.viewHints[ol.ViewHint.INTERACTING] &amp;&amp;</span><br><span class="line">        !ol.extent.equals(frameState.extent, <span class="keyword">this</span>.previousExtent_);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (idle) &#123;</span><br><span class="line">      <span class="keyword">this</span>.dispatchEvent(</span><br><span class="line">          <span class="keyword">new</span> ol.MapEvent(ol.MapEventType.MOVEEND, <span class="keyword">this</span>, frameState));</span><br><span class="line">      ol.extent.clone(frameState.extent, <span class="keyword">this</span>.previousExtent_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.dispatchEvent(</span><br><span class="line">      <span class="keyword">new</span> ol.MapEvent(ol.MapEventType.POSTRENDER, <span class="keyword">this</span>, frameState));</span><br><span class="line"></span><br><span class="line">  goog.async.nextTick(<span class="keyword">this</span>.handlePostRender, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>下面讲诉的渲染的第3步 <code>renderFrame(frameState)</code></strong><br>有关渲染的源代码在<code>ol/ol/render</code>,<code>ol/ol/renderer</code>下。<br><code>ol/ol/render</code>文件夹下是渲染的基本属性和方法，利用设计模式中的工厂模式，用来构造<code>ol/ol/renderer</code>。</p><h1 id="1-渲染Map"><a href="#1-渲染Map" class="headerlink" title="1.渲染Map"></a>1.渲染Map</h1><p><code>ol/ol/renderer/maprenderer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.renderer.Map = <span class="function"><span class="keyword">function</span>(<span class="params">container, map</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这只是个父类，具体实现类位置在：<br><code>ol/ol/renderer/canvas/canvasmaprenderer.js</code>–ol.render.canvas.Map(默认)<br><code>ol/ol/renderer/canvas/webglmaprenderer.js</code>–ol.render.webgl.Map<br><code>ol/ol/renderer/canvas/dommaprenderer.js</code>–ol.render.dom.Map</p><p>主要介绍第一种<code>ol/ol/renderer/canvas/canvasmaprenderer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ol.renderer.canvas.Map = <span class="function"><span class="keyword">function</span>(<span class="params">container, map</span>) </span>&#123;</span><br><span class="line">ol.renderer.Map.call(<span class="keyword">this</span>, container, map);</span><br><span class="line"><span class="keyword">this</span>.context_ = ol.dom.createCanvasContext2D();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.canvas_ = <span class="keyword">this</span>.context_.canvas;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.canvas_.style.width = <span class="string">'100%'</span>;</span><br><span class="line">  <span class="keyword">this</span>.canvas_.style.height = <span class="string">'100%'</span>;</span><br><span class="line">  <span class="keyword">this</span>.canvas_.className = ol.css.CLASS_UNSELECTABLE;</span><br><span class="line">  container.insertBefore(<span class="keyword">this</span>.canvas_, container.childNodes[<span class="number">0</span>] || <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染逻辑<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol.renderer.canvas.Map.prototype.renderFrame = <span class="function"><span class="keyword">function</span>(<span class="params">frameState</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h1 id="2-渲染Layer"><a href="#2-渲染Layer" class="headerlink" title="2.渲染Layer"></a>2.渲染Layer</h1><p><code>ol/ol/renderer/layerrenderer.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ol.renderer.Layer = <span class="function"><span class="keyword">function</span>(<span class="params">layer</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  ol.Observable.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.layer_ = layer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这只是个父类，具体实现类位置在：<br><code>ol/ol/renderer/canvas/canvaslayerrenderer.js</code>–ol.render.canvas.Layer(默认)<br><code>ol/ol/renderer/canvas/webgllayerrenderer.js</code>–ol.render.webgl.Layer<br><code>ol/ol/renderer/canvas/domlayerrenderer.js</code>–ol.render.dom.Layer</p><p>主要介绍第一种ol.render.canvas.Layer(默认)：<br>这个类又分为三种类型：</p><ul><li>ol.render.canvas.TileLayer</li><li>ol.render.canvas.VectorLayer</li><li>ol.render.canvas.VectorTileLayer</li></ul><p><code>ol.render.canvas.TileLayer</code>渲染逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ol.renderer.canvas.TileLayer.prototype.prepareFrame = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    frameState, layerState</span>) </span>&#123;&#125;    <span class="comment">//第一步</span></span><br><span class="line">ol.renderer.canvas.TileLayer.prototype.composeFrame = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">//</span>第二步</span></span></span><br><span class="line"><span class="function"><span class="params">    frameState, layerState, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> transform = <span class="keyword">this</span>.getTransform(frameState, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">this</span>.dispatchPreComposeEvent(context, frameState, transform);</span><br><span class="line">  <span class="keyword">this</span>.renderTileImages(context, frameState, layerState);</span><br><span class="line">  <span class="keyword">this</span>.dispatchPostComposeEvent(context, frameState, transform);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ol.renderer.canvas.TileLayer.prototype.renderTileImages = <span class="function"><span class="keyword">function</span>(<span class="params">context, frameState, layerState</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>参考文献：</p><ul><li><a href="http://www.jianshu.com/p/573cde18575a" target="_blank" rel="noopener">OpenLayers 3源码解析视频</a></li><li><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;ved=0ahUKEwjV852YrvDNAhVEQo8KHbbAAzwQFgg0MAM&amp;url=%68%74%74%70%3a%2f%2f%77%65%69%6c%69%6e%2e%6d%65%2f%64%6f%63%2f%4f%70%65%6e%4c%61%79%65%72%73%25%32%30%33%25%45%36%25%42%41%25%39%30%25%45%37%25%41%30%25%38%31%25%45%39%25%38%32%25%41%33%25%45%34%25%42%41%25%39%42%25%45%34%25%42%41%25%38%42%28%25%45%34%25%42%38%25%38%41%29%2e%64%6f%63%78&amp;usg=AFQjCNHRsX5ZW6MBpwJUCSEZgOuR7NL4Rw" target="_blank" rel="noopener">OpenLayers 3源码那些事(上)</a></li><li><a href="http://weilin.me/ol3-shares/source-explain-2/" target="_blank" rel="noopener">OpenLayers 3源码那些事(下)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers 3 </tag>
            
            <tag> 地图 </tag>
            
            <tag> WebGIS </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack基础实践1</title>
      <link href="/2016/09/28/webpack%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B51/"/>
      <url>/2016/09/28/webpack%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B51/</url>
      
        <content type="html"><![CDATA[<p>这是个webpack的入门教程，看到网上blog大多是配置好了再解释，这样来的不太直观。本文从第一步开始慢慢做起，一步一步走下来，最后再总结，这样直观看到每个配置行代表什么含义。<br>webpack的作用是什么？现在说太多可能对于入门的同学来说也不好理解，索性这里就记住一句话，一张图得了<br><strong>一张图</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/webpack.png" alt=""><br><strong>一句话</strong><br>webpack是能把各种资源，例如JS(JSX),coffee,样式(CSS/SASS/LESS),图片作为模块来进行打包和处理。</p><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h1><h2 id="1-1-安装全局webpack"><a href="#1-1-安装全局webpack" class="headerlink" title="1.1 安装全局webpack"></a>1.1 安装全局webpack</h2><p>前提是在本地先安装了<code>node.js</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack -g</span><br></pre></td></tr></table></figure><h2 id="1-2-将依赖写入package-json"><a href="#1-2-将依赖写入package-json" class="headerlink" title="1.2 将依赖写入package.json"></a>1.2 将依赖写入package.json</h2><p>新建的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>一路回车就可以，其实这些都是项目的描述信息和git地址等信息，这些信息我们可以后面再文件中直接修改<br>如果是clone的项目，已经有package.json文件了，就运行命令(忽略步骤<code>1.3</code>,<code>2.3</code>引入css加载器部分)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><h2 id="1-3-安装局部webpack"><a href="#1-3-安装局部webpack" class="headerlink" title="1.3 安装局部webpack"></a>1.3 安装局部webpack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure><h1 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2.开始使用"></a>2.开始使用</h1><h2 id="2-1-起步"><a href="#2-1-起步" class="headerlink" title="2.1 起步"></a>2.1 起步</h2><p><code>entry.js</code>作为我们的入口文件，其中会包含其他模块(js)或者是CSS    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"入口entry.js"</span>);</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行webpack命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack ./entry.js bundle.js</span><br></pre></td></tr></table></figure></p><p>然后index.html就可以work了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">入口entry.js</span><br></pre></td></tr></table></figure></p><h2 id="2-2-引入其他模块"><a href="#2-2-引入其他模块" class="headerlink" title="2.2 引入其他模块"></a>2.2 引入其他模块</h2><p><code>content.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">"模块content.js"</span>;</span><br></pre></td></tr></table></figure></p><p><code>entry.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</span><br></pre></td></tr></table></figure></p><p>编译命令同上<br>运行index.html结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模块content.js</span><br></pre></td></tr></table></figure></p><h2 id="2-3-引入CSS"><a href="#2-3-引入CSS" class="headerlink" title="2.3 引入CSS"></a>2.3 引入CSS</h2><p>引入css加载器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader --save-dev</span><br><span class="line">npm install style-loader --save-dev</span><br></pre></td></tr></table></figure><p>style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>entry.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"!style!css!./style.css"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</span><br></pre></td></tr></table></figure><p>最后编译，就是这么简单随意完成了，如果我们想这样<code>require(&quot;./style.css&quot;);</code>引入css，岂不是更加完美<br>使用编译命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack ./entry.js bundle.js --module-bind <span class="string">'css=style!css'</span></span><br></pre></td></tr></table></figure><h2 id="2-4-引入SASS文件"><a href="#2-4-引入SASS文件" class="headerlink" title="2.4 引入SASS文件"></a>2.4 引入SASS文件</h2><p>引入sass加载器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save-dev</span><br><span class="line">npm install sass-loader --save-dev</span><br></pre></td></tr></table></figure><p>index.scss<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同css一样<br>entry.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"!style!css!sass!./index.scss"</span>);</span><br></pre></td></tr></table></figure><p>当然我们还不是很满意。简单点，编译命令的方式简单点。所以我们来到了配置文件</p><h1 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h1><p>新建文件<code>webpack.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./entry.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">"style!css"</span> &#125;,<span class="comment">//css加载器</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">"style!css!sass"</span> &#125;<span class="comment">//sass加载器</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译命令就剩下这样的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure></p><h1 id="5-图片的打包"><a href="#5-图片的打包" class="headerlink" title="5.图片的打包"></a>5.图片的打包</h1><p>图片是用url-loader加载的。css中的url属性，其实就是一种封装过的require操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader --save-dev</span><br><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|png)$/</span>, <span class="attr">loader</span>: <span class="string">"url?limit=8192"</span>&#125;</span><br></pre></td></tr></table></figure><p>在js中 entry.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>); </span><br><span class="line">img.src = <span class="built_in">require</span>(<span class="string">"./img/webpack.png"</span>); </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure><p>或者直接在css中写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    background: url("./img/font-icon.png");//小于8kb的图片会打包处理成Base64的图片</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="6-常用webpack编译命令"><a href="#6-常用webpack编译命令" class="headerlink" title="6.常用webpack编译命令"></a>6.常用webpack编译命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">webpack //基本命令</span><br><span class="line">webpack --progress --colors //显示打包过程</span><br><span class="line">webpack -w //实时进行打包更新，文件改变时候，自动打包</span><br><span class="line">webpack -p // 对打包后的文件进行压缩，提供production</span><br><span class="line">webpack -d // 提供<span class="built_in">source</span> map，方便调试。</span><br></pre></td></tr></table></figure><p>关于对图片打包 AMD/CommonJS/ES6的使用在下一篇博客中<code>webpack基础实践2</code><br>参考文章</p><ul><li><a href="http://webpack.github.io/docs/tutorials/getting-started/" target="_blank" rel="noopener">webpack官网-getting-start</a>    </li><li><a href="http://www.cnblogs.com/YikaJ/p/4586703.html" target="_blank" rel="noopener">webpack前端模块加载工具</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EChart 2升级EChart 3注意事项</title>
      <link href="/2016/09/27/EChart%202%E5%8D%87%E7%BA%A7EChart%203%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2016/09/27/EChart%202%E5%8D%87%E7%BA%A7EChart%203%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>本文是根据自己的实践进行总结过来的，是不完全的所有升级注意事项。<br>如果想直接看结果，请移步到第4部分内容</p><h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><p><a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">EChart 3</a>是在2015年12月发布的新版本,相比较<a href="http://echarts.baidu.com/echarts2/" target="_blank" rel="noopener">EChart 2</a>,主要的变化总结如下：</p><ul><li>1) 支持了直角坐标系（catesian，同 grid）、极坐标系（polar）、地理坐标系（geo）</li><li>2) 移动端的优化,说明白就是将源码体积减小</li><li>3) 新增更多图表类型，增加了一些动态效果</li><li>4) 更丰富的交互模式</li><li>5) EChart 2推荐使用模块化单文件引入，EChart 3可以选择独立文件或者在webpack中使用模块化(在第2部分说明)</li><li>6) 异步数据加载与更新(在第3部分说明)。</li></ul><h1 id="2-模块-非模块"><a href="#2-模块-非模块" class="headerlink" title="2 模块/非模块"></a>2 模块/非模块</h1><h2 id="2-1-EChart-2模块化引入"><a href="#2-1-EChart-2模块化引入" class="headerlink" title="2.1 EChart 2模块化引入"></a>2.1 EChart 2模块化引入</h2><p>EChart 2自带有模块化机制，不用使用其它AMD/CMD库就可以require进来echarts提供的模块<br>EChart 2 引入进来的目录结构：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/echart%202%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt=""><br>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"height:400px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ECharts单文件引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://echarts.baidu.com/build/dist/echarts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 路径配置</span></span><br><span class="line"><span class="undefined">        require.config(&#123;</span></span><br><span class="line"><span class="undefined">            paths: &#123;</span></span><br><span class="line"><span class="undefined">                echarts: 'http://echarts.baidu.com/build/dist'</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">        // 使用</span></span><br><span class="line"><span class="undefined">        require(</span></span><br><span class="line"><span class="undefined">            [</span></span><br><span class="line"><span class="undefined">                'echarts',</span></span><br><span class="line"><span class="undefined">                'echarts/chart/bar' // 使用柱状图就加载bar模块，按需加载</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="undefined">            function (ec) &#123;</span></span><br><span class="line"><span class="undefined">                // 基于准备好的dom，初始化echarts图表</span></span><br><span class="line"><span class="undefined">                var myChart = ec.init(document.getElementById('main')); </span></span><br><span class="line"><span class="undefined">                </span></span><br><span class="line"><span class="undefined">                var option = &#123;</span></span><br><span class="line"><span class="undefined">                    tooltip: &#123;</span></span><br><span class="line"><span class="undefined">                        show: true</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                    legend: &#123;</span></span><br><span class="line"><span class="undefined">                        data:['销量']</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                    xAxis : [</span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="undefined">                            type : 'category',</span></span><br><span class="line"><span class="undefined">                            data : ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    ],</span></span><br><span class="line"><span class="undefined">                    yAxis : [</span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="undefined">                            type : 'value'</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    ],</span></span><br><span class="line"><span class="undefined">                    series : [</span></span><br><span class="line"><span class="undefined">                        &#123;</span></span><br><span class="line"><span class="undefined">                            "name":"销量",</span></span><br><span class="line"><span class="undefined">                            "type":"bar",</span></span><br><span class="line"><span class="undefined">                            "data":[5, 20, 40, 10, 10, 20]</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    ]</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">                // 为echarts对象加载数据 </span></span><br><span class="line"><span class="undefined">                myChart.setOption(option); </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        );</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-EChart-2非模块化引入"><a href="#2-2-EChart-2非模块化引入" class="headerlink" title="2.2 EChart 2非模块化引入"></a>2.2 EChart 2非模块化引入</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"height:400px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ECharts单文件引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://echarts.baidu.com/build/dist/echarts-all.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 基于准备好的dom，初始化echarts图表</span></span><br><span class="line"><span class="undefined">        var myChart = echarts.init(document.getElementById('main')); </span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">        var option = &#123;</span></span><br><span class="line"><span class="undefined">            tooltip: &#123;</span></span><br><span class="line"><span class="undefined">                show: true</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            legend: &#123;</span></span><br><span class="line"><span class="undefined">                data:['销量']</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            xAxis : [</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    type : 'category',</span></span><br><span class="line"><span class="undefined">                    data : ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="undefined">            yAxis : [</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    type : 'value'</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            ],</span></span><br><span class="line"><span class="undefined">            series : [</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    "name":"销量",</span></span><br><span class="line"><span class="undefined">                    "type":"bar",</span></span><br><span class="line"><span class="undefined">                    "data":[5, 20, 40, 10, 10, 20]</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            ]</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        // 为echarts对象加载数据 </span></span><br><span class="line"><span class="undefined">        myChart.setOption(option); </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-EChart-3模块化引入"><a href="#2-3-EChart-3模块化引入" class="headerlink" title="2.3 EChart 3模块化引入"></a>2.3 EChart 3模块化引入</h2><p><strong>通过npm命令安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><p><strong>按需引入 ECharts 图表和组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts/lib/echarts'</span>);</span><br><span class="line"><span class="comment">// 引入柱状图</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/chart/bar'</span>);</span><br><span class="line"><span class="comment">// 引入提示框和标题组件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/tooltip'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/title'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">    title: &#123; <span class="attr">text</span>: <span class="string">'ECharts 入门示例'</span> &#125;,</span><br><span class="line">    tooltip: &#123;&#125;,</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;&#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        name: <span class="string">'销量'</span>,</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-4-EChart-3非模块化引入"><a href="#2-4-EChart-3非模块化引入" class="headerlink" title="2.4 EChart 3非模块化引入"></a>2.4 EChart 3非模块化引入</h2><p>同2.2类似</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-异步数据加载与更新"><a href="#3-异步数据加载与更新" class="headerlink" title="3.异步数据加载与更新"></a>3.异步数据加载与更新</h1><p>由于地图模块分辨率变高，为了不增大源码的体积，地图模块采用按照需要下载引入<br>在<a href="http://echarts.baidu.com/download-map.html" target="_blank" rel="noopener">地图下载页面</a>,下载需要的世界地图/中国地图/中国分省地图，下载后的格式有js和json两种。<br>对应js格式的，引入的方式是通过script标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"map/js/china.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span></span><br><span class="line"><span class="undefined">chart.setOption(&#123;</span></span><br><span class="line"><span class="undefined">    series: [&#123;</span></span><br><span class="line"><span class="javascript">        type: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="javascript">        map: <span class="string">'china'</span></span></span><br><span class="line"><span class="undefined">    &#125;]</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过JSON格式引入就可以实现异步数据加载与更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'map/json/china.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chinaJson</span>) </span>&#123;</span><br><span class="line">    echarts.registerMap(<span class="string">'china'</span>, chinaJson);</span><br><span class="line">    <span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line">    chart.setOption(&#123;</span><br><span class="line">        series: [&#123;</span><br><span class="line">            type: <span class="string">'map'</span>,</span><br><span class="line">            map: <span class="string">'china'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-升级总结"><a href="#4-升级总结" class="headerlink" title="4.升级总结"></a>4.升级总结</h1><h2 id="4-1-配置变化举例"><a href="#4-1-配置变化举例" class="headerlink" title="4.1 配置变化举例"></a>4.1 配置变化举例</h2><table><thead><tr><th>EChart 2</th><th style="text-align:center">EChart 3</th></tr></thead><tbody><tr><td>option.series.mapLocation</td><td style="text-align:center">删去，使用left，top，bottom，right定义位置</td></tr><tr><td>option.series.textFixed</td><td style="text-align:center">删去地区的名称文本位置修正</td></tr><tr><td>dataRange颜色标识属性(示例4.1-1)</td><td style="text-align:center">visualMap</td></tr><tr><td>单个echarts 实例中最多只能存在一个 grid 组件</td><td style="text-align:center">ECharts 3 中可以存在任意个 grid 组件</td></tr></tbody></table><p>一个网格中(示例4.1-2)|<br>| addData , setSeries 方法设置配置项|统一使用setOption(示例4.1-3)|<br>|级联this.myChart = ec.init(dom).showLoading({effect:’bubble’}).hideLoading();|不支持|<br>| myChart.component.tooltip.showTip 这种形式调用相应的接口触发图表行为|dispatchAction(示例4.1-4)|<br>示例4.1-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">     dataRange: &#123;</span><br><span class="line">         realtime: <span class="literal">false</span>,</span><br><span class="line">         itemHeight: <span class="number">80</span>,</span><br><span class="line">         splitNumber:<span class="number">6</span>,</span><br><span class="line">         borderWidth:<span class="number">1</span>, </span><br><span class="line">         textStyle: &#123; <span class="attr">color</span>: <span class="string">'#333333'</span> &#125;,</span><br><span class="line">         text: [<span class="string">'高'</span>, <span class="string">'低'</span>],</span><br><span class="line">         calculable: <span class="literal">true</span></span><br><span class="line">     &#125;,</span><br><span class="line"><span class="comment">//=======================================================</span></span><br><span class="line">    visualMap: &#123;</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        max: <span class="number">1000000</span>,</span><br><span class="line">        text: [<span class="string">'High'</span>, <span class="string">'Low'</span>],</span><br><span class="line">        realtime: <span class="literal">false</span>,</span><br><span class="line">        calculable: <span class="literal">true</span>,</span><br><span class="line">        inRange: &#123;</span><br><span class="line">            color: [<span class="string">'lightskyblue'</span>, <span class="string">'yellow'</span>, <span class="string">'orangered'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>示例4.1-2<br>图略，官网例子：<a href="http://echarts.baidu.com/gallery/editor.html?c=scatter-anscombe-quartet" target="_blank" rel="noopener">http://echarts.baidu.com/gallery/editor.html?c=scatter-anscombe-quartet</a><br>部分配置属性变化，需要修改</p><p>示例4.1-3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myChart.setOption(&#123;</span><br><span class="line">    visualMap: &#123;</span><br><span class="line">        inRange: &#123;</span><br><span class="line">            color: ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)<span class="comment">//注意最后一定要再次setOption(option);option是配置对象</span></span><br></pre></td></tr></table></figure><p>示例4.1-4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">myChart.on(<span class="string">'brushselected'</span>, renderBrushed);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.myChart.dispatchAction(&#123;</span><br><span class="line">        type: <span class="string">'brush'</span>,</span><br><span class="line">        areas: [&#123;</span><br><span class="line">            geoIndex: <span class="number">0</span>,</span><br><span class="line">            brushType: <span class="string">'polygon'</span>,</span><br><span class="line">            coordRange: [</span><br><span class="line">                [<span class="number">119.72</span>, <span class="number">34.85</span>],</span><br><span class="line">                [<span class="number">117.05</span>, <span class="number">34.06</span>],</span><br><span class="line">                [<span class="number">117.49</span>, <span class="number">33.75</span>],</span><br><span class="line">                [<span class="number">123.16</span>, <span class="number">29.92</span>],</span><br><span class="line">                [<span class="number">121.64</span>, <span class="number">34.08</span>]</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderBrushed</span>(<span class="params">params</span>) </span>&#123; <span class="comment">//... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-第2部分的模块与非模块更改时候需要注意"><a href="#4-2-第2部分的模块与非模块更改时候需要注意" class="headerlink" title="4.2 第2部分的模块与非模块更改时候需要注意"></a>4.2 第2部分的模块与非模块更改时候需要注意</h2><h2 id="4-3-地图模块"><a href="#4-3-地图模块" class="headerlink" title="4.3 地图模块"></a>4.3 地图模块</h2><p>EChart 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chart.setOption(&#123;</span><br><span class="line">    series: [&#123;</span><br><span class="line">        type: <span class="string">'map'</span>,</span><br><span class="line">        map: <span class="string">'china'</span><span class="comment">//'world'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>EChart 3，需要下载地图，使用方式见第3部分。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 可视化 </tag>
            
            <tag> EChart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS3--font-face使用</title>
      <link href="/2016/09/27/CSS3--font-face%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/09/27/CSS3--font-face%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><ul><li>@font-face是CSS3中的一个模块，他主要是把自己定义的Web字体嵌入到你的网页中，不用担心兼容性，@font-face在IE4中都支持。</li><li>如果是用字体做logo，英文的话字体和图片占用大小差不多，但是中文的字体包一般比较大，最好还是使用图片的形式。</li></ul><h1 id="2-快速实践"><a href="#2-快速实践" class="headerlink" title="2.快速实践"></a>2.快速实践</h1><ul><li><a href="http://www.dafont.com/" target="_blank" rel="noopener">下载字体</a>需要格式为.tff格式的字体文件</li><li>搜索Webfont Generator，或者直接使用<a href="https://www.web-font-generator.com/" target="_blank" rel="noopener">该网站</a>提供的服务。这很简单，进入网站后选择.tff字体文件上传，勾选同意的复选框，点击<code>Generate web font</code>，点击<code>Download Package</code>下载，解压缩文件。</li><li>使用<br>新建index.css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot'</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'../fonts2/Happy-Camper-Regular.svg#SingleMaltaRegular'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-class">.demo</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">'Happy-Camper-Regular'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>hello world!You are my Destiny<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-字体icon"><a href="#3-字体icon" class="headerlink" title="3.字体icon"></a>3.字体icon</h1><p>使用某些字体，如：<code>WebSymbols-Regular</code><a href="http://pan.baidu.com/s/1jIO0Y2q" target="_blank" rel="noopener">百度云下载地址</a>，<code>Guifx</code>字体，包括现在开源的比较流行的<code>Font Awesome</code>,使用方法同上。在html文件中如下示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>B<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>C<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>D<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>F<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一行显示的是其对应的图标<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/font-icon.png" alt=""><br>参考文献：</p><ul><li><a href="http://www.dafont.com/" target="_blank" rel="noopener">下载字体的地方</a></li><li><a href="http://www.w3cplus.com/content/css3-font-face" target="_blank" rel="noopener">CSS3 @font-face</a></li><li><a href="http://www.w3cplus.com/css3/web-icon-with-font-face" target="_blank" rel="noopener">@font-face制作Web Icon</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> CSS </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript面向对象和面向委托</title>
      <link href="/2016/09/27/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E5%A7%94%E6%89%98/"/>
      <url>/2016/09/27/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<p>昨天看了一本书《你不知道的javascript(上)》关于这方面的内容，体会颇深，其中书中讲到的把javascript当作是面向委托的语言比面向对象的解释更加贴切，下面我就简单结合自己的理解，书写阐述一下，也可以作为一种笔记记录。     </p><h3 id="1-提取精华——几个重要的方法"><a href="#1-提取精华——几个重要的方法" class="headerlink" title="1. 提取精华——几个重要的方法"></a>1. 提取精华——几个重要的方法</h3><h4 id="1-1-原型链关联"><a href="#1-1-原型链关联" class="headerlink" title="1.1 原型链关联"></a>1.1 原型链关联</h4><ul><li>Bar.prototype = Foo.prototype;</li><li>Bar.prototype = new Foo();</li><li>Bar.prototype = Object.create(Foo.prototype);<br>第一种方式，没有创建Bar.prototype的新对象Bar.prototype直接引用了Foo.prototype，修改Bar.prototype会影响Foo.prototype<br>第二种方式，创建了一个关联Bar.prototype的新对象，new其实是调用Foo的“构造函数”，有些东西会影响到Bar()的后代。<br>第三种方式，Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法：<code>Object.create(proto, [ propertiesObject ])</code><br>参数:proto 一个对象，作为新创建对象的原型。<br>   propertiesObject 可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">MDN</a>  </p></blockquote></li></ul><p>ES5之前Object.create Poyfill代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create)&#123;</span><br><span class="line"><span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">F.prototype = o;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> F();  <span class="comment">//new的作用参见上述 第二种方式</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES5:<code>Object.setPrototypeOf(Bar.prototype,Foo.prototype)</code>更加标准可靠</p><h4 id="1-2-ES6-class"><a href="#1-2-ES6-class" class="headerlink" title="1.2 ES6 class"></a>1.2 ES6 class</h4><p>内部也是通过原型链实现的，只是一种语法糖。</p><h3 id="2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO"><a href="#2-针尖麦芒——面向对象-OO-VS-面向委托-对象关联-OLOO" class="headerlink" title="2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)"></a>2.针尖麦芒——面向对象(OO) VS 面向委托(对象关联 OLOO)</h3><ul><li><p>OO：类的继承是复制行为，简单说关系是父子关系<br>OLOO： 只是对象的关联(基于原型/原型链)，简单说关系是兄弟关系，互相关联。</p></li><li><p>代码<br>OO风格：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = who;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.identity = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"I am "</span>+<span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>)</span>&#123;</span><br><span class="line">Foo.call(<span class="keyword">this</span>,who);</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype);</span><br><span class="line"></span><br><span class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"hello,"</span>+<span class="keyword">this</span>.identity()+<span class="string">" ."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar(<span class="string">'b1'</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar(<span class="string">'b2'</span>);</span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure></li></ul><p>OLOO风格：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Foo = &#123;</span><br><span class="line">       init: <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.name = who;</span><br><span class="line">       &#125;,</span><br><span class="line">       identity: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.name;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   Bar = <span class="built_in">Object</span>.create(Foo);</span><br><span class="line">   Bar.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       alert(<span class="string">"hello,"</span> + <span class="keyword">this</span>.identity() + <span class="string">" ."</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">   b1.init(<span class="string">'b1'</span>);</span><br><span class="line">   <span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create(Bar);</span><br><span class="line">   b2.init(<span class="string">'b2'</span>);</span><br><span class="line">   b1.speak();</span><br><span class="line">   b2.speak();</span><br></pre></td></tr></table></figure></p><h3 id="3-问题探究"><a href="#3-问题探究" class="headerlink" title="3.问题探究"></a>3.问题探究</h3><p><strong>内省：</strong>我们想看Foo和Bar之间的关系<br>OO:对比的是Bar.prototype与Foo的关系，并不是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Bar.prototype <span class="keyword">instanceof</span> Foo);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar.prototype) === Foo.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype.isPrototypeOf(Bar.prototype));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>OLOO:是Bar和Foo的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Bar) === Foo);</span><br><span class="line"><span class="built_in">console</span>.log(Foo.isPrototypeOf(Bar));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> javascript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP协议实践篇--使用Fiddler与后台php交互</title>
      <link href="/2016/09/27/HTTP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E8%B7%B5%E7%AF%87--%E4%BD%BF%E7%94%A8fiddle%E4%B8%8E%E5%90%8E%E5%8F%B0php%E4%BA%A4%E4%BA%92/"/>
      <url>/2016/09/27/HTTP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E8%B7%B5%E7%AF%87--%E4%BD%BF%E7%94%A8fiddle%E4%B8%8E%E5%90%8E%E5%8F%B0php%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<p>工具：</p><ul><li>PHP、Apache服务器，端口号这里设置为8000,如果本机没有安装php环境，可以选择wamp或者xampp集成的php环境开发器</li><li><a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">fiddler</a>是比较好用的抓包工具，它是免费的，具体使用我们不单独介绍。</li></ul><h1 id="1-模拟form表单提交数据"><a href="#1-模拟form表单提交数据" class="headerlink" title="1.模拟form表单提交数据"></a>1.模拟form表单提交数据</h1><p><strong>html表单写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8000/test.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>method改为<code>post</code>,<code>get</code>去体会它们的区别</p><ul><li>最大的区别是<code>get</code>方式，提交的话会将提交的数据放在url中，如<code>http://127.0.0.1:8000/test.php?name=hello</code><br><code>post</code>请求提交的name=hello会放在header请求体内，具体位置在【<strong>报文主体</strong>】<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/1/http1.jpg" alt=""></li><li>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB</li><li>其实，两种方式都可以向服务器传送数据，向服务器上获取数据。<br><strong>test.php</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $name1 = $_POST[<span class="string">'name'</span>];</span><br><span class="line">    $name2 = $_GET[<span class="string">'name'</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$name1"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$name2"</span>;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>完整的请求头是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST http://127.0.0.1:8000/test.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8000</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 10</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: null</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line"></span><br><span class="line">name=hello</span><br></pre></td></tr></table></figure><p>最后的结果，分别两种方式提交，总会有一个会显示没有定义,一个显示出请求的数据</p><p>下面就用Fiddler模拟</p><ul><li>使用<code>post</code>方式<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/1/http2.jpg" alt=""><br><code>Content-Type</code>不能忽略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 10</span><br><span class="line">Host: 127.0.0.1:8000</span><br></pre></td></tr></table></figure></li></ul><p>点击右上角【Execute】，就能模拟一个form表单提交数据了。<br>右边会显示一条我们刚刚的HTTP请求。</p><ul><li>使用<code>get</code>方式<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/1/http3.jpg" alt=""><br>【Execute】执行</li></ul><h1 id="2-模拟文件操作"><a href="#2-模拟文件操作" class="headerlink" title="2.模拟文件操作"></a>2.模拟文件操作</h1><h2 id="2-1-上传文件"><a href="#2-1-上传文件" class="headerlink" title="2.1 上传文件"></a>2.1 上传文件</h2><p>post方式提交请求，很少会用get方式去请求文件<br><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8000/test/upload_file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $name = $_POST[<span class="string">'name'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$name"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];<span class="comment">//$_FILES["file"]通过 HTTP POST 方式上传到当前脚本的项目的数组。</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>])) &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</span><br><span class="line">      <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>请求头文件</strong></p><ul><li>在chrome中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST http://127.0.0.1:8000/test/upload_file.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8000</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 291</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: null</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryC1Pk1uMWXzAMqRMF</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryC1Pk1uMWXzAMqRMF</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">wenjian</span><br><span class="line">------WebKitFormBoundaryC1Pk1uMWXzAMqRMF</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">This is a txt.</span><br><span class="line">------WebKitFormBoundaryC1Pk1uMWXzAMqRMF--</span><br></pre></td></tr></table></figure><ul><li>在Firfox中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST http://127.0.0.1:8000/test/upload_file.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8000</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------31340552315478</span><br><span class="line">Content-Length: 302</span><br><span class="line"></span><br><span class="line">-----------------------------31340552315478</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">txt文件</span><br><span class="line">-----------------------------31340552315478</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">This is a txt.</span><br><span class="line">-----------------------------31340552315478--</span><br></pre></td></tr></table></figure><p>其中最大的差异也就是<code>boundary</code>分界线<br>分界线里的是上传文件的信息，如果是个图片，我们会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;CCGIS2.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">//下面这些是图片的信息</span><br></pre></td></tr></table></figure></p><p><strong>响应头信息</strong>差别并不大<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 20 Sep 2016 06:48:58 GMT</span><br><span class="line">Server: Apache/2.4.16 (Win64) PHP/5.6.13</span><br><span class="line">X-Powered-By: PHP/5.6.13</span><br><span class="line">Content-Length: 43</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">wenjian&lt;br&gt;1.txt&lt;br&gt;Stored in: upload/1.txt</span><br></pre></td></tr></table></figure></p><p><strong>用Fiddler模拟</strong><br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/1/http4.jpg" alt=""><br>这里的头信息完全是照抄在chrome请求的头信息，其中最重要的是<code>Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryC1Pk1uMWXzAMqRMF</code>,我们用这一行就可以去执行，当然Fiddler会自动加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host: 127.0.0.1:8000</span><br><span class="line">Content-Length: 295</span><br></pre></td></tr></table></figure></p><p>有意思的是我们在<code>Request Body</code>中可以修改<code>filename</code>就可以修改上传后的文件名，我们也可以添加些内容，上传到服务器端。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryC1Pk1uMWXzAMqRMF</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">wenjian</span><br><span class="line">------WebKitFormBoundaryC1Pk1uMWXzAMqRMF</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;3.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">This is a txt. 这里是加入的内容 hahahha 哈哈哈</span><br><span class="line">------WebKitFormBoundaryC1Pk1uMWXzAMqRMF--</span><br></pre></td></tr></table></figure></p><p>我们甚至可以修改boundary:<code>Content-Type: multipart/form-data; boundary=----123456</code><br>那么<code>Request Body</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------123456</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">wenjian</span><br><span class="line">------123456</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;4.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">This is a txt.hahahha 哈哈哈</span><br><span class="line">------123456</span><br></pre></td></tr></table></figure></p><p>值得一提的是，<code>Ruqest Body</code>右边的<code>Upload File</code>可以将选择的文件放在请求体中。注意修改<code>name</code>属性，与php文件的获取字段相同。</p><h2 id="2-2-请求文件"><a href="#2-2-请求文件" class="headerlink" title="2.2 请求文件"></a>2.2 请求文件</h2><p>请求文件其实很简单<br>POST/GET <a href="http://127.0.0.1:8000/test/upload/1.txt" target="_blank" rel="noopener">http://127.0.0.1:8000/test/upload/1.txt</a><br>【Excute】执行即可</p><p>既然我们是来实践HTTP协议的，那么很重要的文件缓存这方面的我们也可以实践，这些内容我打算单独写一篇博客</p><p>———————–华丽的分界线—————————-<br>感觉这些技术很基础，但是也很黑客，我们完全可以使用这些技术去“黑”些网站，哈哈，当然要遵纪守法，当然有这些技术还是不够的。</p>]]></content>
      
      
      <categories>
          
          <category> HTTP/TCP/IP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP协议 </tag>
            
            <tag> HTTP协议实践 </tag>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>File Input多次添加文件，动态删除文件，用来实现上传等操作</title>
      <link href="/2016/09/27/File%20Input%E5%A4%9A%E6%AC%A1%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
      <url>/2016/09/27/File%20Input%E5%A4%9A%E6%AC%A1%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E7%AD%89%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="1-需求图示"><a href="#1-需求图示" class="headerlink" title="1.需求图示"></a>1.需求图示</h3><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/file%20input.png" alt="实现"></p><h3 id="2-按图索骥"><a href="#2-按图索骥" class="headerlink" title="2.按图索骥"></a>2.按图索骥</h3><ul><li><p>添加 实际上，添加附件就是<code>&lt;input type=&quot;file&quot; id=&quot;myFile&quot;&gt;</code>的控件，<code>var fileList = getElementById(myFile).files</code>就可以得到选择的文件的FileList对象，这个对象是类数组的对象(含义有点像函数参数arguments)。记住这一点很重要。</p></li><li><p>显示 下面的显示文件名的面板根据上传的文件名<code>name</code>显示</p></li></ul><h3 id="3-刨根问底"><a href="#3-刨根问底" class="headerlink" title="3.刨根问底"></a>3.刨根问底</h3><ul><li><p>FileList类数组对象<br> <code>console.log(fileList)</code>打印出来的结果显示：   </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FileList  </span><br><span class="line">0:File  </span><br><span class="line"> lastModified:1446204650848  </span><br><span class="line"> lastModifiedDate:Fri Oct 30 2015 19:30:50 GMT+0800 (中国标准时间)   </span><br><span class="line"> name:<span class="string">"CCGIS.png"</span>    </span><br><span class="line"> size:809542   </span><br><span class="line"> <span class="built_in">type</span>:<span class="string">"image/png"</span>   </span><br><span class="line"> webkitRelativePath:<span class="string">""</span>   </span><br><span class="line">   __proto__:File   </span><br><span class="line">  length:1  </span><br><span class="line">__proto__:FileList</span><br></pre></td></tr></table></figure><p> 思考：我们只需要能动态修改fileList即可，第一想法是将它转化为数组进行操作。<br> <code>files = Array.prototype.slice.call(files);</code></p></li></ul><h3 id="4-付诸行动"><a href="#4-付诸行动" class="headerlink" title="4.付诸行动"></a>4.付诸行动</h3><p>动手编程吧：<br>    html很简单，省略<br>    逻辑代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">'myFile'</span>);</span><br><span class="line">   <span class="keyword">var</span> files = fileInput.files; <span class="comment">//filelist</span></span><br><span class="line"></span><br><span class="line">   $(<span class="string">'#myFile'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">       files = fileInput.files; <span class="comment">//应该重新获取</span></span><br><span class="line">       <span class="built_in">console</span>.log(files);</span><br><span class="line">       </span><br><span class="line">       files = <span class="built_in">Array</span>.prototype.slice.call(files); <span class="comment">//全部转化为数组</span></span><br><span class="line">       fileLists = fileLists.concat(files);</span><br><span class="line">       <span class="comment">//显示文件名面板</span></span><br><span class="line">       <span class="keyword">if</span> (files.length !== <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">               html += <span class="string">"&lt;p&gt;"</span> + files[i].name + <span class="string">"&amp;nbsp&amp;nbsp&lt;img class='icon-remove'&gt;&lt;/p&gt;"</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           $(<span class="string">'.upfile-list-mes'</span>).append(html);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*点击叉号可以删除要上传的文件*/</span></span><br><span class="line">   $(<span class="string">'.upfile-list-mes'</span>).on(<span class="string">'click'</span>, <span class="string">'.icon-remove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> ind = $(<span class="keyword">this</span>).parent().index();</span><br><span class="line">       $(<span class="keyword">this</span>).parent().css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">       fileLists.splice(ind, <span class="number">1</span>);<span class="comment">//修改fileLists</span></span><br><span class="line">       <span class="built_in">console</span>.log(fileLists);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP协议实践篇--浏览器缓存总结、利用Fiddler和apache模拟</title>
      <link href="/2016/09/27/HTTP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E8%B7%B5%E7%AF%87--%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93%E3%80%81%E5%88%A9%E7%94%A8Fiddler%E5%92%8Capache%E6%A8%A1%E6%8B%9F/"/>
      <url>/2016/09/27/HTTP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E8%B7%B5%E7%AF%87--%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%80%BB%E7%BB%93%E3%80%81%E5%88%A9%E7%94%A8Fiddler%E5%92%8Capache%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-浏览器缓存"><a href="#1-浏览器缓存" class="headerlink" title="1.浏览器缓存"></a>1.浏览器缓存</h1><p>废话少说，我们先了解浏览器缓存的知识。<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-1.png" alt=""><br>其中优先级是：Cache-Control&gt;Expires&gt;协商缓存<br>浏览器访问缓存的顺序是：<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-2.png" alt=""></p><h1 id="2-浏览器刷新的几种状态"><a href="#2-浏览器刷新的几种状态" class="headerlink" title="2.浏览器刷新的几种状态"></a>2.浏览器刷新的几种状态</h1><ul><li><strong>普通模式</strong> 我们下面的叙述在没有特殊说明的情况下就是这个模式</li><li><strong>普通页面跳转</strong>（点击页面链接跳转，window.open，在地址栏敲回车，刷新页面）<ul><li>无缓存情况下，请求会返回所有资源结果</li><li>设置Expires并且未过期时，浏览器将不会发出http请求</li><li>如果Expires过期，则会发送相应请求，并附带上Last-Modifed等信息，供服务器校验</li></ul></li><li><strong>页面刷新(F5)</strong><br> 这种情况一下，一般会看到很多304的请求，就是说即便资源设置了Expires且未过期，浏览器也会发送相应请求，<strong>命中协商缓存</strong>。</li><li><strong>强制刷新(Ctrl+F5)</strong><br> 效果和无缓存时候一致，返回200的结果</li></ul><h1 id="3-强缓存"><a href="#3-强缓存" class="headerlink" title="3.强缓存"></a>3.强缓存</h1><p>返回的http状态为<strong>200</strong>，在chrome的开发者工具的network里面size会显示为from cache</p><h2 id="3-1-Cache-Control"><a href="#3-1-Cache-Control" class="headerlink" title="3.1 Cache-Control"></a>3.1 Cache-Control</h2><p>请求指令<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-3.png" alt=""><br>响应指令<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-4.png" alt=""><br>这里需要注意<code>no-cache</code>对客户端和服务器含义是不同的，见下图<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-5.png" alt=""></p><h2 id="3-2-Expires"><a href="#3-2-Expires" class="headerlink" title="3.2 Expires"></a>3.2 Expires</h2><p>资源失效的日期<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires:  Wed, 21 Sep 2016 12:06:44 GMT</span><br></pre></td></tr></table></figure></p><hr><p><strong>实践：</strong></p><h2 id="实践3-1-html文件中"><a href="#实践3-1-html文件中" class="headerlink" title="实践3-1 html文件中"></a>实践3-1 html文件中</h2><p>在html文件<head><meta name="generator" content="Hexo 3.8.0">中</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Wed, 25 Oct 2016 13:19:55 GMT"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些方法不常用，而且测试不能通过</p><h2 id="实践3-2-PHP中设置"><a href="#实践3-2-PHP中设置" class="headerlink" title="实践3-2 PHP中设置"></a>实践3-2 PHP中设置</h2><p>可以使用php设置，当然也可以在apche服务器中进行设置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Cache-Control: public"</span>);</span><br><span class="line">header(<span class="string">"Pragma: cache"</span>);</span><br><span class="line">$offset = <span class="number">30</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>; <span class="comment">// cache 1 month</span></span><br><span class="line">$ExpStr = <span class="string">"Expires: "</span>.gmdate(<span class="string">"D, d M Y H:i:s"</span>, time() + $offset).<span class="string">" GMT"</span>;</span><br><span class="line">header($ExpStr);</span><br></pre></td></tr></table></figure></p><p>chrome network工具栏显示<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-6.png" alt=""><br><strong>打开浏览器新窗口的方式测试，而不是F5刷新</strong><br>chrome network工具栏显示<br><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-7.png" alt=""></p><h2 id="实践3-3-不需要PHP"><a href="#实践3-3-不需要PHP" class="headerlink" title="实践3-3 不需要PHP"></a>实践3-3 不需要PHP</h2><p>可以像<a href="http://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="noopener">浅谈浏览器http的缓存机制</a>文中所使用的方法</p><ul><li>在fildder右下角黑色区域–命令行，输入如：bpu localhost:8000 阻断来自localhost:8000的本地http请求      </li><li>点击被拦截的请求，可以在右栏直接修改报文内容（上半区域是请求报文，下半区域是响应报文），点击黄色的“Break on Response”按钮可以执行下一步（把请求发给服务器），点击绿色的按钮“Run to Completion”可以直接完成整个请求过程</li></ul><hr><h1 id="4-协商缓存"><a href="#4-协商缓存" class="headerlink" title="4.协商缓存"></a>4.协商缓存</h1><p>当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的http状态为<strong>304</strong>并且会显示一个Not Modified的字符串</p><h2 id="4-1-Last-Modified，If-Modified-Since"><a href="#4-1-Last-Modified，If-Modified-Since" class="headerlink" title="4.1 Last-Modified，If-Modified-Since"></a>4.1 Last-Modified，If-Modified-Since</h2><p>这对名词通常是成对出现的<br><code>last-modified</code>：服务端设置的文档的最后的更新日期<br><code>if-modified-since</code>用于指定这个时间以后的服务器资源，GMT格式</p><h2 id="4-2-ETag、If-None-Match-if-match"><a href="#4-2-ETag、If-None-Match-if-match" class="headerlink" title="4.2 ETag、If-None-Match/if-match"></a>4.2 ETag、If-None-Match/if-match</h2><p>这对名词通常也是成对出现的<br><code>ETag</code>用于服务器向客户端传送的代表实体内容特征的标记信息<br><code>If-None-Match/if-match</code>服务器给客户机传送网页的时候，可以传递代表实体内容特征的头字段（ETag），这种头字段被叫做实体标签。当客户机再次向服务端发请求的时候，会使用if-match携带实体标签信息</p><hr><p><strong>实践：</strong><br><strong>php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Last-Modified:"</span>.gmdate(<span class="string">"D, d M Y H:i:s"</span>) . <span class="string">" GMT"</span> );</span><br></pre></td></tr></table></figure></p><p><strong>使用fiddler请求</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">If-Modified-Since: Wed, 04 Oct 2016 13:32:30 GMT</span><br><span class="line">Last-Modified: Wed, 05 Oct 2016 13:32:30 GMT</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/zrysmt/mdPics/master/HTTP%E5%8D%8F%E8%AE%AE/2/http2-8.png" alt=""><br>测试了几遍，并没有返回 304，原因不明</p><hr><p><strong>参考阅读:</strong></p><ul><li><a href="http://www.111cn.net/phper/php/48528.htm" target="_blank" rel="noopener">php header()函数设置页面Cache缓存</a></li><li><a href="http://www.lampweb.org/seo/4/11.html" target="_blank" rel="noopener">在php编程中使用header()函数发送文件头，设置浏览器缓存，加快站点的访问速度</a></li><li><a href="http://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="noopener">浅谈浏览器http的缓存机制</a></li><li><a href="http://www.imooc.com/article/4475" target="_blank" rel="noopener">HTML meta标签总结与属性的使用介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP/TCP/IP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP协议 </tag>
            
            <tag> HTTP协议实践 </tag>
            
            <tag> 浏览器缓存 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
